
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090dc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080096ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bb4  24000078  08009724  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004c2c  08009724  00024c2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030a5b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dd0  00000000  00000000  00050b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001888  00000000  00000000  000558d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001700  00000000  00000000  00057160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000333ff  00000000  00000000  00058860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eaef  00000000  00000000  0008bc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149f69  00000000  00000000  000aa74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f46b7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c9c  00000000  00000000  001f470c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009374 	.word	0x08009374

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08009374 	.word	0x08009374

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandsToBlink */
  CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandsToBlink_attributes);
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_FREERTOS_Init+0x68>)
 800068e:	2102      	movs	r1, #2
 8000690:	2010      	movs	r0, #16
 8000692:	f005 fa86 	bl	8005ba2 <osMessageQueueNew>
 8000696:	4603      	mov	r3, r0
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_FREERTOS_Init+0x6c>)
 800069a:	6013      	str	r3, [r2, #0]

  /* creation of times_blinked */
  times_blinkedHandle = osMessageQueueNew (16, sizeof(uint16_t), &times_blinked_attributes);
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_FREERTOS_Init+0x70>)
 800069e:	2102      	movs	r1, #2
 80006a0:	2010      	movs	r0, #16
 80006a2:	f005 fa7e 	bl	8005ba2 <osMessageQueueNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <MX_FREERTOS_Init+0x74>)
 80006aa:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandLine */
  CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 80006ac:	4a14      	ldr	r2, [pc, #80]	; (8000700 <MX_FREERTOS_Init+0x78>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_FREERTOS_Init+0x7c>)
 80006b2:	f005 f9c9 	bl	8005a48 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <MX_FREERTOS_Init+0x80>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* creation of Blinker1 */
  Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_FREERTOS_Init+0x84>)
 80006be:	2100      	movs	r1, #0
 80006c0:	4813      	ldr	r0, [pc, #76]	; (8000710 <MX_FREERTOS_Init+0x88>)
 80006c2:	f005 f9c1 	bl	8005a48 <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_FREERTOS_Init+0x8c>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* creation of Blinker2 */
  Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_FREERTOS_Init+0x90>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_FREERTOS_Init+0x94>)
 80006d2:	f005 f9b9 	bl	8005a48 <osThreadNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a11      	ldr	r2, [pc, #68]	; (8000720 <MX_FREERTOS_Init+0x98>)
 80006da:	6013      	str	r3, [r2, #0]

  /* creation of Blinker3 */
  Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <MX_FREERTOS_Init+0x9c>)
 80006de:	2100      	movs	r1, #0
 80006e0:	4811      	ldr	r0, [pc, #68]	; (8000728 <MX_FREERTOS_Init+0xa0>)
 80006e2:	f005 f9b1 	bl	8005a48 <osThreadNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <MX_FREERTOS_Init+0xa4>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	080094a0 	.word	0x080094a0
 80006f4:	24004af4 	.word	0x24004af4
 80006f8:	080094b8 	.word	0x080094b8
 80006fc:	24004af8 	.word	0x24004af8
 8000700:	08009410 	.word	0x08009410
 8000704:	08000731 	.word	0x08000731
 8000708:	24004adc 	.word	0x24004adc
 800070c:	08009434 	.word	0x08009434
 8000710:	08000871 	.word	0x08000871
 8000714:	24004ad8 	.word	0x24004ad8
 8000718:	08009458 	.word	0x08009458
 800071c:	080008e5 	.word	0x080008e5
 8000720:	24004aec 	.word	0x24004aec
 8000724:	0800947c 	.word	0x0800947c
 8000728:	080008f5 	.word	0x080008f5
 800072c:	24004af0 	.word	0x24004af0

08000730 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b092      	sub	sp, #72	; 0x48
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandLine */
	uint8_t local_pointer = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char* delay_ptr = NULL;
 800073e:	2300      	movs	r3, #0
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t delay_len = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t total_blinks = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	877b      	strh	r3, [r7, #58]	; 0x3a
	/* Infinite loop */
	for(;;)
	{
		HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,(uint8_t*)rx_buffer ,1, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	4941      	ldr	r1, [pc, #260]	; (8000854 <StartCommandLine+0x124>)
 8000750:	4841      	ldr	r0, [pc, #260]	; (8000858 <StartCommandLine+0x128>)
 8000752:	f003 ff01 	bl	8004558 <HAL_UART_Receive>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(ret == HAL_OK){
 800075c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000760:	2b00      	cmp	r3, #0
 8000762:	d144      	bne.n	80007ee <StartCommandLine+0xbe>
			HAL_UART_Transmit(&huart3, (uint8_t*)rx_buffer, 1, 100);
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	493a      	ldr	r1, [pc, #232]	; (8000854 <StartCommandLine+0x124>)
 800076a:	483b      	ldr	r0, [pc, #236]	; (8000858 <StartCommandLine+0x128>)
 800076c:	f003 fe5e 	bl	800442c <HAL_UART_Transmit>
			local_buffer[local_pointer] = rx_buffer[0];
 8000770:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000774:	4a37      	ldr	r2, [pc, #220]	; (8000854 <StartCommandLine+0x124>)
 8000776:	7811      	ldrb	r1, [r2, #0]
 8000778:	4a38      	ldr	r2, [pc, #224]	; (800085c <StartCommandLine+0x12c>)
 800077a:	54d1      	strb	r1, [r2, r3]
			if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 800077c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000780:	4a36      	ldr	r2, [pc, #216]	; (800085c <StartCommandLine+0x12c>)
 8000782:	5cd3      	ldrb	r3, [r2, r3]
 8000784:	2b0a      	cmp	r3, #10
 8000786:	d005      	beq.n	8000794 <StartCommandLine+0x64>
 8000788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800078c:	4a33      	ldr	r2, [pc, #204]	; (800085c <StartCommandLine+0x12c>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	2b0d      	cmp	r3, #13
 8000792:	d120      	bne.n	80007d6 <StartCommandLine+0xa6>
				delay_ptr = strstr(local_buffer, DELAY_TRIGGER_WORD);
 8000794:	4932      	ldr	r1, [pc, #200]	; (8000860 <StartCommandLine+0x130>)
 8000796:	4831      	ldr	r0, [pc, #196]	; (800085c <StartCommandLine+0x12c>)
 8000798:	f008 fa02 	bl	8008ba0 <strstr>
 800079c:	6438      	str	r0, [r7, #64]	; 0x40
				if (delay_ptr != NULL) {
 800079e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d024      	beq.n	80007ee <StartCommandLine+0xbe>
					delay_len = atoi(delay_ptr + 5);
 80007a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a6:	3305      	adds	r3, #5
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 f867 	bl	800887c <atoi>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
					osMessageQueuePut(CommandsToBlinkHandle, &delay_len, 0, 0);
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <StartCommandLine+0x134>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80007bc:	2300      	movs	r3, #0
 80007be:	2200      	movs	r2, #0
 80007c0:	f005 fa62 	bl	8005c88 <osMessageQueuePut>
					memset(local_buffer,0,RX_BUFFER_LENGTH);
 80007c4:	2264      	movs	r2, #100	; 0x64
 80007c6:	2100      	movs	r1, #0
 80007c8:	4824      	ldr	r0, [pc, #144]	; (800085c <StartCommandLine+0x12c>)
 80007ca:	f008 f89d 	bl	8008908 <memset>
					local_pointer = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (delay_ptr != NULL) {
 80007d4:	e00b      	b.n	80007ee <StartCommandLine+0xbe>
				}
			}else{
				local_pointer++;
 80007d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007da:	3301      	adds	r3, #1
 80007dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(local_pointer > RX_BUFFER_LENGTH){
 80007e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e4:	2b64      	cmp	r3, #100	; 0x64
 80007e6:	d902      	bls.n	80007ee <StartCommandLine+0xbe>
					local_pointer = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		if (osMessageQueueGet(times_blinkedHandle, &total_blinks, NULL , 0)) {
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <StartCommandLine+0x138>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 80007f6:	2300      	movs	r3, #0
 80007f8:	2200      	movs	r2, #0
 80007fa:	f005 faa5 	bl	8005d48 <osMessageQueueGet>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d022      	beq.n	800084a <StartCommandLine+0x11a>
			char tx_buffer[50];
			uint8_t tx_len =0;
 8000804:	2300      	movs	r3, #0
 8000806:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			tx_len  = sprintf(tx_buffer,"total blinks: %d\n",total_blinks);
 800080a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800080c:	461a      	mov	r2, r3
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <StartCommandLine+0x13c>)
 8000814:	4618      	mov	r0, r3
 8000816:	f008 f9a3 	bl	8008b60 <siprintf>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			HAL_UART_Transmit(&huart3, (uint8_t)tx_buffer,tx_len , 100);
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800082c:	b29a      	uxth	r2, r3
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <StartCommandLine+0x128>)
 8000832:	f003 fdfb 	bl	800442c <HAL_UART_Transmit>
			free(tx_buffer);
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4618      	mov	r0, r3
 800083c:	f008 f84e 	bl	80088dc <free>
			free(tx_len);
 8000840:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000844:	4618      	mov	r0, r3
 8000846:	f008 f849 	bl	80088dc <free>
		}
		osDelay(10);
 800084a:	200a      	movs	r0, #10
 800084c:	f005 f98e 	bl	8005b6c <osDelay>
	{
 8000850:	e77b      	b.n	800074a <StartCommandLine+0x1a>
 8000852:	bf00      	nop
 8000854:	24004ae0 	.word	0x24004ae0
 8000858:	24004b48 	.word	0x24004b48
 800085c:	24004a70 	.word	0x24004a70
 8000860:	080093dc 	.word	0x080093dc
 8000864:	24004af4 	.word	0x24004af4
 8000868:	24004af8 	.word	0x24004af8
 800086c:	080093e4 	.word	0x080093e4

08000870 <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker1 */
	uint16_t blink_rate = 1000;
 8000878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087c:	81bb      	strh	r3, [r7, #12]
	uint16_t blinks = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	81fb      	strh	r3, [r7, #14]
	/* Infinite loop */
	for(;;)
	{
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <StartBlinker1+0x64>)
 8000884:	6818      	ldr	r0, [r3, #0]
 8000886:	f107 010c 	add.w	r1, r7, #12
 800088a:	2300      	movs	r3, #0
 800088c:	2200      	movs	r2, #0
 800088e:	f005 fa5b 	bl	8005d48 <osMessageQueueGet>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000892:	2101      	movs	r1, #1
 8000894:	4810      	ldr	r0, [pc, #64]	; (80008d8 <StartBlinker1+0x68>)
 8000896:	f000 ff2a 	bl	80016ee <HAL_GPIO_TogglePin>
		blinks++;
 800089a:	89fb      	ldrh	r3, [r7, #14]
 800089c:	3301      	adds	r3, #1
 800089e:	81fb      	strh	r3, [r7, #14]
		if (blinks%100 == 0) {
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <StartBlinker1+0x6c>)
 80008a4:	fba2 1203 	umull	r1, r2, r2, r3
 80008a8:	0952      	lsrs	r2, r2, #5
 80008aa:	2164      	movs	r1, #100	; 0x64
 80008ac:	fb01 f202 	mul.w	r2, r1, r2
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d107      	bne.n	80008c8 <StartBlinker1+0x58>
			osMessageQueuePut(times_blinkedHandle, blinks , NULL, 0);
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <StartBlinker1+0x70>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	89fb      	ldrh	r3, [r7, #14]
 80008be:	4619      	mov	r1, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	2200      	movs	r2, #0
 80008c4:	f005 f9e0 	bl	8005c88 <osMessageQueuePut>
		}
		osDelay(blink_rate);
 80008c8:	89bb      	ldrh	r3, [r7, #12]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 f94e 	bl	8005b6c <osDelay>
		osMessageQueueGet(CommandsToBlinkHandle,&blink_rate , NULL, 0);
 80008d0:	e7d7      	b.n	8000882 <StartBlinker1+0x12>
 80008d2:	bf00      	nop
 80008d4:	24004af4 	.word	0x24004af4
 80008d8:	58020400 	.word	0x58020400
 80008dc:	51eb851f 	.word	0x51eb851f
 80008e0:	24004af8 	.word	0x24004af8

080008e4 <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f005 f93d 	bl	8005b6c <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartBlinker2+0x8>

080008f4 <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f005 f935 	bl	8005b6c <osDelay>
 8000902:	e7fb      	b.n	80008fc <StartBlinker3+0x8>

08000904 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b80      	ldr	r3, [pc, #512]	; (8000b1c <MX_GPIO_Init+0x218>)
 800091c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000920:	4a7e      	ldr	r2, [pc, #504]	; (8000b1c <MX_GPIO_Init+0x218>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800092a:	4b7c      	ldr	r3, [pc, #496]	; (8000b1c <MX_GPIO_Init+0x218>)
 800092c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	623b      	str	r3, [r7, #32]
 8000936:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000938:	4b78      	ldr	r3, [pc, #480]	; (8000b1c <MX_GPIO_Init+0x218>)
 800093a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093e:	4a77      	ldr	r2, [pc, #476]	; (8000b1c <MX_GPIO_Init+0x218>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000948:	4b74      	ldr	r3, [pc, #464]	; (8000b1c <MX_GPIO_Init+0x218>)
 800094a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4b71      	ldr	r3, [pc, #452]	; (8000b1c <MX_GPIO_Init+0x218>)
 8000958:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095c:	4a6f      	ldr	r2, [pc, #444]	; (8000b1c <MX_GPIO_Init+0x218>)
 800095e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000962:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000966:	4b6d      	ldr	r3, [pc, #436]	; (8000b1c <MX_GPIO_Init+0x218>)
 8000968:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b69      	ldr	r3, [pc, #420]	; (8000b1c <MX_GPIO_Init+0x218>)
 8000976:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800097a:	4a68      	ldr	r2, [pc, #416]	; (8000b1c <MX_GPIO_Init+0x218>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000984:	4b65      	ldr	r3, [pc, #404]	; (8000b1c <MX_GPIO_Init+0x218>)
 8000986:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	4b62      	ldr	r3, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x218>)
 8000994:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000998:	4a60      	ldr	r2, [pc, #384]	; (8000b1c <MX_GPIO_Init+0x218>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009a2:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b0:	4b5a      	ldr	r3, [pc, #360]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b6:	4a59      	ldr	r2, [pc, #356]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009c0:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b53      	ldr	r3, [pc, #332]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d4:	4a51      	ldr	r2, [pc, #324]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009de:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ec:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f2:	4a4a      	ldr	r2, [pc, #296]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009fc:	4b47      	ldr	r3, [pc, #284]	; (8000b1c <MX_GPIO_Init+0x218>)
 80009fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	4843      	ldr	r0, [pc, #268]	; (8000b20 <MX_GPIO_Init+0x21c>)
 8000a12:	f000 fe53 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a1c:	4841      	ldr	r0, [pc, #260]	; (8000b24 <MX_GPIO_Init+0x220>)
 8000a1e:	f000 fe4d 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2102      	movs	r1, #2
 8000a26:	4840      	ldr	r0, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x224>)
 8000a28:	f000 fe48 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	483a      	ldr	r0, [pc, #232]	; (8000b2c <MX_GPIO_Init+0x228>)
 8000a42:	f000 fc8b 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4830      	ldr	r0, [pc, #192]	; (8000b20 <MX_GPIO_Init+0x21c>)
 8000a60:	f000 fc7c 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a64:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4829      	ldr	r0, [pc, #164]	; (8000b24 <MX_GPIO_Init+0x220>)
 8000a7e:	f000 fc6d 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	4826      	ldr	r0, [pc, #152]	; (8000b30 <MX_GPIO_Init+0x22c>)
 8000a98:	f000 fc60 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4820      	ldr	r0, [pc, #128]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000ab2:	f000 fc53 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000ad4:	f000 fc42 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000ad8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x230>)
 8000af2:	f000 fc33 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000af6:	2302      	movs	r3, #2
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x224>)
 8000b0e:	f000 fc25 	bl	800135c <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3738      	adds	r7, #56	; 0x38
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58021400 	.word	0x58021400
 8000b24:	58020400 	.word	0x58020400
 8000b28:	58021000 	.word	0x58021000
 8000b2c:	58020800 	.word	0x58020800
 8000b30:	58021800 	.word	0x58021800
 8000b34:	58020000 	.word	0x58020000

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fad2 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f80e 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f7ff fede 	bl	8000904 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b48:	f000 f9e8 	bl	8000f1c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b4c:	f000 fa98 	bl	8001080 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b50:	f004 ff30 	bl	80059b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b54:	f7ff fd98 	bl	8000688 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b58:	f004 ff50 	bl	80059fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <main+0x24>
	...

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09c      	sub	sp, #112	; 0x70
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	224c      	movs	r2, #76	; 0x4c
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f007 feca 	bl	8008908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2220      	movs	r2, #32
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 fec4 	bl	8008908 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b80:	2004      	movs	r0, #4
 8000b82:	f000 fdcf 	bl	8001724 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <SystemClock_Config+0xd8>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <SystemClock_Config+0xd8>)
 8000b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <SystemClock_Config+0xd8>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba2:	bf00      	nop
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <SystemClock_Config+0xd8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb0:	d1f8      	bne.n	8000ba4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bb2:	2321      	movs	r3, #33	; 0x21
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bcc:	2318      	movs	r3, #24
 8000bce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bdc:	230c      	movs	r3, #12
 8000bde:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fdf3 	bl	80017d8 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bf8:	f000 f832 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	233f      	movs	r3, #63	; 0x3f
 8000bfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2303      	movs	r3, #3
 8000c02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f9dd 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c2c:	f000 f818 	bl	8000c60 <Error_Handler>
  }
}
 8000c30:	bf00      	nop
 8000c32:	3770      	adds	r7, #112	; 0x70
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024800 	.word	0x58024800

08000c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4e:	f000 fa85 	bl	800115c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40001400 	.word	0x40001400

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x38>)
 8000c74:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_MspInit+0x38>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_MspInit+0x38>)
 8000c84:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	210f      	movs	r1, #15
 8000c94:	f06f 0001 	mvn.w	r0, #1
 8000c98:	f000 fb38 	bl	800130c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	d827      	bhi.n	8000d06 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	2037      	movs	r0, #55	; 0x37
 8000cbc:	f000 fb26 	bl	800130c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000cc0:	2037      	movs	r0, #55	; 0x37
 8000cc2:	f000 fb3d 	bl	8001340 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000cc6:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <HAL_InitTick+0xc4>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <HAL_InitTick+0xc8>)
 8000cce:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cd2:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <HAL_InitTick+0xc8>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_InitTick+0xc8>)
 8000cde:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cea:	f107 0210 	add.w	r2, r7, #16
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fcff 	bl	80026f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d106      	bne.n	8000d12 <HAL_InitTick+0x6a>
 8000d04:	e001      	b.n	8000d0a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e02b      	b.n	8000d62 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d0a:	f001 fcc9 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000d10:	e004      	b.n	8000d1c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d12:	f001 fcc5 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8000d16:	4603      	mov	r3, r0
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <HAL_InitTick+0xcc>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	0c9b      	lsrs	r3, r3, #18
 8000d26:	3b01      	subs	r3, #1
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_InitTick+0xd0>)
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_InitTick+0xd4>)
 8000d2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_InitTick+0xd0>)
 8000d32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d36:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d38:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_InitTick+0xd0>)
 8000d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_InitTick+0xd0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_InitTick+0xd0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_InitTick+0xd0>)
 8000d4c:	f003 f844 	bl	8003dd8 <HAL_TIM_Base_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d104      	bne.n	8000d60 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d56:	4808      	ldr	r0, [pc, #32]	; (8000d78 <HAL_InitTick+0xd0>)
 8000d58:	f003 f8a0 	bl	8003e9c <HAL_TIM_Base_Start_IT>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	e000      	b.n	8000d62 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3740      	adds	r7, #64	; 0x40
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	24000008 	.word	0x24000008
 8000d70:	58024400 	.word	0x58024400
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	24004afc 	.word	0x24004afc
 8000d7c:	40001400 	.word	0x40001400

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM7_IRQHandler+0x10>)
 8000db2:	f003 f8eb 	bl	8003f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	24004afc 	.word	0x24004afc

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f007 fd48 	bl	8008884 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24100000 	.word	0x24100000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	24000094 	.word	0x24000094
 8000e28:	24004c30 	.word	0x24004c30

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b32      	ldr	r3, [pc, #200]	; (8000efc <SystemInit+0xd0>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a31      	ldr	r2, [pc, #196]	; (8000efc <SystemInit+0xd0>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <SystemInit+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d807      	bhi.n	8000e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <SystemInit+0xd4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <SystemInit+0xd4>)
 8000e56:	f043 0303 	orr.w	r3, r3, #3
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <SystemInit+0xd8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <SystemInit+0xd8>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <SystemInit+0xd8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <SystemInit+0xd8>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4924      	ldr	r1, [pc, #144]	; (8000f04 <SystemInit+0xd8>)
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <SystemInit+0xdc>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <SystemInit+0xd4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <SystemInit+0xd4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <SystemInit+0xd4>)
 8000e90:	f043 0303 	orr.w	r3, r3, #3
 8000e94:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <SystemInit+0xd8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <SystemInit+0xd8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <SystemInit+0xd8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <SystemInit+0xd8>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <SystemInit+0xe0>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <SystemInit+0xd8>)
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <SystemInit+0xe4>)
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <SystemInit+0xd8>)
 8000eb6:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <SystemInit+0xe8>)
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <SystemInit+0xd8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <SystemInit+0xd8>)
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <SystemInit+0xe8>)
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <SystemInit+0xd8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <SystemInit+0xd8>)
 8000ece:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <SystemInit+0xe8>)
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <SystemInit+0xd8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <SystemInit+0xd8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <SystemInit+0xd8>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <SystemInit+0xd8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <SystemInit+0xec>)
 8000eec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ef0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	52002000 	.word	0x52002000
 8000f04:	58024400 	.word	0x58024400
 8000f08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f0c:	02020200 	.word	0x02020200
 8000f10:	01ff0000 	.word	0x01ff0000
 8000f14:	01010280 	.word	0x01010280
 8000f18:	52004000 	.word	0x52004000

08000f1c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <MX_USART3_UART_Init+0x94>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f64:	4811      	ldr	r0, [pc, #68]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f66:	f003 fa11 	bl	800438c <HAL_UART_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f70:	f7ff fe76 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f78:	f004 fc0e 	bl	8005798 <HAL_UARTEx_SetTxFifoThreshold>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f82:	f7ff fe6d 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f8a:	f004 fc43 	bl	8005814 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f7ff fe64 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_USART3_UART_Init+0x90>)
 8000f9a:	f004 fbc4 	bl	8005726 <HAL_UARTEx_DisableFifoMode>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f7ff fe5c 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	24004b48 	.word	0x24004b48
 8000fb0:	40004800 	.word	0x40004800

08000fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b8      	sub	sp, #224	; 0xe0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	22b8      	movs	r2, #184	; 0xb8
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 fc97 	bl	8008908 <memset>
  if(uartHandle->Instance==USART3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a25      	ldr	r2, [pc, #148]	; (8001074 <HAL_UART_MspInit+0xc0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d142      	bne.n	800106a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fbc2 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffe:	f7ff fe2f 	bl	8000c60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001004:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_UART_MspInit+0xc4>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001014:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0xc4>)
 8001032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800103e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0xc8>)
 8001066:	f000 f979 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800106a:	bf00      	nop
 800106c:	37e0      	adds	r7, #224	; 0xe0
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004800 	.word	0x40004800
 8001078:	58024400 	.word	0x58024400
 800107c:	58020c00 	.word	0x58020c00

08001080 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001094:	f7ff feca 	bl	8000e2c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010be:	f007 fbe7 	bl	8008890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fd39 	bl	8000b38 <main>
  bx  lr
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80010cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80010d4:	080096ac 	.word	0x080096ac
  ldr r2, =_sbss
 80010d8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80010dc:	24004c2c 	.word	0x24004c2c

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ea:	2003      	movs	r0, #3
 80010ec:	f000 f903 	bl	80012f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010f0:	f001 f92c 	bl	800234c <HAL_RCC_GetSysClockFreq>
 80010f4:	4602      	mov	r2, r0
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_Init+0x68>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	4913      	ldr	r1, [pc, #76]	; (8001150 <HAL_Init+0x6c>)
 8001102:	5ccb      	ldrb	r3, [r1, r3]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_Init+0x68>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_Init+0x6c>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_Init+0x70>)
 8001126:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_Init+0x74>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112e:	200f      	movs	r0, #15
 8001130:	f7ff fdba 	bl	8000ca8 <HAL_InitTick>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e002      	b.n	8001144 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800113e:	f7ff fd95 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	58024400 	.word	0x58024400
 8001150:	080094d0 	.word	0x080094d0
 8001154:	24000004 	.word	0x24000004
 8001158:	24000000 	.word	0x24000000

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2400000c 	.word	0x2400000c
 8001180:	24004bd8 	.word	0x24004bd8

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	24004bd8 	.word	0x24004bd8

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	05fa0000 	.word	0x05fa0000

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4c 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131a:	f7ff ff63 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 800131e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ffb3 	bl	8001290 <NVIC_EncodePriority>
 800132a:	4602      	mov	r2, r0
 800132c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff82 	bl	800123c <__NVIC_SetPriority>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff56 	bl	8001200 <__NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_GPIO_Init+0x234>)
 800136c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800136e:	e194      	b.n	800169a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8186 	beq.w	8001694 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d005      	beq.n	80013a0 <HAL_GPIO_Init+0x44>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d130      	bne.n	8001402 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d6:	2201      	movs	r2, #1
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 0201 	and.w	r2, r3, #1
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b03      	cmp	r3, #3
 800140c:	d017      	beq.n	800143e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d123      	bne.n	8001492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	69b9      	ldr	r1, [r7, #24]
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0203 	and.w	r2, r3, #3
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80e0 	beq.w	8001694 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_GPIO_Init+0x238>)
 80014d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014da:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <HAL_GPIO_Init+0x238>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_GPIO_Init+0x238>)
 80014e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_GPIO_Init+0x23c>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_GPIO_Init+0x240>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d052      	beq.n	80015c4 <HAL_GPIO_Init+0x268>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_GPIO_Init+0x244>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d031      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_GPIO_Init+0x248>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d02b      	beq.n	8001586 <HAL_GPIO_Init+0x22a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_GPIO_Init+0x24c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_Init+0x226>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <HAL_GPIO_Init+0x250>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_Init+0x222>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_GPIO_Init+0x254>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_Init+0x21e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x258>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <HAL_GPIO_Init+0x25c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x260>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_GPIO_Init+0x264>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x20e>
 8001566:	2309      	movs	r3, #9
 8001568:	e02d      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800156a:	230a      	movs	r3, #10
 800156c:	e02b      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800156e:	2308      	movs	r3, #8
 8001570:	e029      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001572:	2307      	movs	r3, #7
 8001574:	e027      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001576:	2306      	movs	r3, #6
 8001578:	e025      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800157a:	2305      	movs	r3, #5
 800157c:	e023      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800157e:	2304      	movs	r3, #4
 8001580:	e021      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001582:	2303      	movs	r3, #3
 8001584:	e01f      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 8001586:	2302      	movs	r3, #2
 8001588:	e01d      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800158a:	2301      	movs	r3, #1
 800158c:	e01b      	b.n	80015c6 <HAL_GPIO_Init+0x26a>
 800158e:	bf00      	nop
 8001590:	58000080 	.word	0x58000080
 8001594:	58024400 	.word	0x58024400
 8001598:	58000400 	.word	0x58000400
 800159c:	58020000 	.word	0x58020000
 80015a0:	58020400 	.word	0x58020400
 80015a4:	58020800 	.word	0x58020800
 80015a8:	58020c00 	.word	0x58020c00
 80015ac:	58021000 	.word	0x58021000
 80015b0:	58021400 	.word	0x58021400
 80015b4:	58021800 	.word	0x58021800
 80015b8:	58021c00 	.word	0x58021c00
 80015bc:	58022000 	.word	0x58022000
 80015c0:	58022400 	.word	0x58022400
 80015c4:	2300      	movs	r3, #0
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	f002 0203 	and.w	r2, r2, #3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4093      	lsls	r3, r2
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d6:	4938      	ldr	r1, [pc, #224]	; (80016b8 <HAL_GPIO_Init+0x35c>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800160a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3301      	adds	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f47f ae63 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3724      	adds	r7, #36	; 0x24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	58000400 	.word	0x58000400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	041a      	lsls	r2, r3, #16
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43d9      	mvns	r1, r3
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	400b      	ands	r3, r1
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	2b06      	cmp	r3, #6
 8001736:	d00a      	beq.n	800174e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e040      	b.n	80017cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e03e      	b.n	80017cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001756:	491f      	ldr	r1, [pc, #124]	; (80017d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800175e:	f7ff fd11 	bl	8001184 <HAL_GetTick>
 8001762:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001764:	e009      	b.n	800177a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001766:	f7ff fd0d 	bl	8001184 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001774:	d901      	bls.n	800177a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e028      	b.n	80017cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001786:	d1ee      	bne.n	8001766 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b1e      	cmp	r3, #30
 800178c:	d008      	beq.n	80017a0 <HAL_PWREx_ConfigSupply+0x7c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b2e      	cmp	r3, #46	; 0x2e
 8001792:	d005      	beq.n	80017a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b1d      	cmp	r3, #29
 8001798:	d002      	beq.n	80017a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b2d      	cmp	r3, #45	; 0x2d
 800179e:	d114      	bne.n	80017ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017a0:	f7ff fcf0 	bl	8001184 <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017a6:	e009      	b.n	80017bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017a8:	f7ff fcec 	bl	8001184 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b6:	d901      	bls.n	80017bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e007      	b.n	80017cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d1ee      	bne.n	80017a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	58024800 	.word	0x58024800

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e3f3      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b3 	beq.w	800195e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f8:	4b9e      	ldr	r3, [pc, #632]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001802:	4b9c      	ldr	r3, [pc, #624]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	2b10      	cmp	r3, #16
 800180c:	d007      	beq.n	800181e <HAL_RCC_OscConfig+0x46>
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	2b18      	cmp	r3, #24
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x62>
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d10d      	bne.n	800183a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181e:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8098 	beq.w	800195c <HAL_RCC_OscConfig+0x184>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 8093 	bne.w	800195c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e3cb      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x7a>
 8001844:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a8a      	ldr	r2, [pc, #552]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e058      	b.n	8001904 <HAL_RCC_OscConfig+0x12c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d112      	bne.n	8001880 <HAL_RCC_OscConfig+0xa8>
 800185a:	4b86      	ldr	r3, [pc, #536]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a85      	ldr	r2, [pc, #532]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a82      	ldr	r2, [pc, #520]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 800186c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7f      	ldr	r2, [pc, #508]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e041      	b.n	8001904 <HAL_RCC_OscConfig+0x12c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001888:	d112      	bne.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 800188a:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a79      	ldr	r2, [pc, #484]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a76      	ldr	r2, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 800189c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a73      	ldr	r2, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e029      	b.n	8001904 <HAL_RCC_OscConfig+0x12c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80018b8:	d112      	bne.n	80018e0 <HAL_RCC_OscConfig+0x108>
 80018ba:	4b6e      	ldr	r3, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6d      	ldr	r2, [pc, #436]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a67      	ldr	r2, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e011      	b.n	8001904 <HAL_RCC_OscConfig+0x12c>
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a63      	ldr	r2, [pc, #396]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a60      	ldr	r2, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5d      	ldr	r2, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80018fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fc3a 	bl	8001184 <HAL_GetTick>
 8001910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fc36 	bl	8001184 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e355      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x13c>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff fc26 	bl	8001184 <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fc22 	bl	8001184 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e341      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800194e:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x164>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 808c 	beq.w	8001a84 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196c:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001974:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_RCC_OscConfig+0x1ba>
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	2b18      	cmp	r3, #24
 8001986:	d137      	bne.n	80019f8 <HAL_RCC_OscConfig+0x220>
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d132      	bne.n	80019f8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x1d2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e313      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 0219 	bic.w	r2, r3, #25
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	492f      	ldr	r1, [pc, #188]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019bc:	f7ff fbe2 	bl	8001184 <HAL_GetTick>
 80019c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff fbde 	bl	8001184 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e2fd      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	061b      	lsls	r3, r3, #24
 80019f0:	4920      	ldr	r1, [pc, #128]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f6:	e045      	b.n	8001a84 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d026      	beq.n	8001a4e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 0219 	bic.w	r2, r3, #25
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4919      	ldr	r1, [pc, #100]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fbb7 	bl	8001184 <HAL_GetTick>
 8001a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fbb3 	bl	8001184 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e2d2      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	490b      	ldr	r1, [pc, #44]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e01a      	b.n	8001a84 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_RCC_OscConfig+0x29c>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fb93 	bl	8001184 <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff fb8f 	bl	8001184 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d903      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e2ae      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
 8001a74:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a78:	4b99      	ldr	r3, [pc, #612]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d06a      	beq.n	8001b66 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a90:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a9a:	4b91      	ldr	r3, [pc, #580]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d007      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2de>
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b18      	cmp	r3, #24
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x30c>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab6:	4b8a      	ldr	r3, [pc, #552]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x2f6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b80      	cmp	r3, #128	; 0x80
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e281      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ace:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	061b      	lsls	r3, r3, #24
 8001adc:	4980      	ldr	r1, [pc, #512]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae2:	e040      	b.n	8001b66 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001aec:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a7b      	ldr	r2, [pc, #492]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb44 	bl	8001184 <HAL_GetTick>
 8001afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b00:	f7ff fb40 	bl	8001184 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e25f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b1e:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	061b      	lsls	r3, r3, #24
 8001b2c:	496c      	ldr	r1, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60cb      	str	r3, [r1, #12]
 8001b32:	e018      	b.n	8001b66 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb20 	bl	8001184 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b48:	f7ff fb1c 	bl	8001184 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e23b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d036      	beq.n	8001be0 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d019      	beq.n	8001bae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff fafd 	bl	8001184 <HAL_GetTick>
 8001b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff faf9 	bl	8001184 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e218      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3b6>
 8001bac:	e018      	b.n	8001be0 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bae:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb2:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff fae3 	bl	8001184 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fadf 	bl	8001184 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1fe      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bd4:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d036      	beq.n	8001c5a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d019      	beq.n	8001c28 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c00:	f7ff fac0 	bl	8001184 <HAL_GetTick>
 8001c04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c08:	f7ff fabc 	bl	8001184 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1db      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x430>
 8001c26:	e018      	b.n	8001c5a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c34:	f7ff faa6 	bl	8001184 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7ff faa2 	bl	8001184 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1c1      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80af 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_RCC_OscConfig+0x50c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x50c>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c74:	f7ff fa86 	bl	8001184 <HAL_GetTick>
 8001c78:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c7c:	f7ff fa82 	bl	8001184 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	; 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1a1      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_RCC_OscConfig+0x50c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4d8>
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	e05b      	b.n	8001d68 <HAL_RCC_OscConfig+0x590>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d117      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x510>
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	4a02      	ldr	r2, [pc, #8]	; (8001ce0 <HAL_RCC_OscConfig+0x508>)
 8001cd6:	f023 0304 	bic.w	r3, r3, #4
 8001cda:	6713      	str	r3, [r2, #112]	; 0x70
 8001cdc:	e044      	b.n	8001d68 <HAL_RCC_OscConfig+0x590>
 8001cde:	bf00      	nop
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58024800 	.word	0x58024800
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d112      	bne.n	8001d16 <HAL_RCC_OscConfig+0x53e>
 8001cf0:	4b95      	ldr	r3, [pc, #596]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a94      	ldr	r2, [pc, #592]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a91      	ldr	r2, [pc, #580]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	4b8f      	ldr	r3, [pc, #572]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a8e      	ldr	r2, [pc, #568]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
 8001d14:	e028      	b.n	8001d68 <HAL_RCC_OscConfig+0x590>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b85      	cmp	r3, #133	; 0x85
 8001d1c:	d112      	bne.n	8001d44 <HAL_RCC_OscConfig+0x56c>
 8001d1e:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	4a89      	ldr	r2, [pc, #548]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2a:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a86      	ldr	r2, [pc, #536]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	4b84      	ldr	r3, [pc, #528]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a83      	ldr	r2, [pc, #524]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	e011      	b.n	8001d68 <HAL_RCC_OscConfig+0x590>
 8001d44:	4b80      	ldr	r3, [pc, #512]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a7f      	ldr	r2, [pc, #508]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a7c      	ldr	r2, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d56:	f023 0304 	bic.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	4b7a      	ldr	r3, [pc, #488]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a79      	ldr	r2, [pc, #484]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fa08 	bl	8001184 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7ff fa04 	bl	8001184 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e121      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0ee      	beq.n	8001d78 <HAL_RCC_OscConfig+0x5a0>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f9f2 	bl	8001184 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff f9ee 	bl	8001184 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e10b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8100 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dd0:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dd8:	2b18      	cmp	r3, #24
 8001dda:	f000 80bb 	beq.w	8001f54 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	f040 8095 	bne.w	8001f12 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a56      	ldr	r2, [pc, #344]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f9c6 	bl	8001184 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff f9c2 	bl	8001184 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0e1      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCC_OscConfig+0x774>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	4946      	ldr	r1, [pc, #280]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	628b      	str	r3, [r1, #40]	; 0x28
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	3b01      	subs	r3, #1
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e64:	4938      	ldr	r1, [pc, #224]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_RCC_OscConfig+0x778>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e82:	00d2      	lsls	r2, r2, #3
 8001e84:	4930      	ldr	r1, [pc, #192]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f023 020c 	bic.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	492c      	ldr	r1, [pc, #176]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f023 0202 	bic.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	4927      	ldr	r1, [pc, #156]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f94b 	bl	8001184 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f947 	bl	8001184 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e066      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x71a>
 8001f10:	e05e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f931 	bl	8001184 <HAL_GetTick>
 8001f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff f92d 	bl	8001184 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e04c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_RCC_OscConfig+0x770>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x74e>
 8001f44:	e044      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7f8>
 8001f46:	bf00      	nop
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	fffffc0c 	.word	0xfffffc0c
 8001f50:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_OscConfig+0x804>)
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_OscConfig+0x804>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d031      	beq.n	8001fcc <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d12a      	bne.n	8001fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d122      	bne.n	8001fcc <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d11a      	bne.n	8001fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	0a5b      	lsrs	r3, r3, #9
 8001f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d111      	bne.n	8001fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d108      	bne.n	8001fcc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0e1b      	lsrs	r3, r3, #24
 8001fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3730      	adds	r7, #48	; 0x30
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	58024400 	.word	0x58024400

08001fe0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e19c      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b8a      	ldr	r3, [pc, #552]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b87      	ldr	r3, [pc, #540]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 020f 	bic.w	r2, r3, #15
 800200a:	4985      	ldr	r1, [pc, #532]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b83      	ldr	r3, [pc, #524]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e184      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800203c:	429a      	cmp	r2, r3
 800203e:	d908      	bls.n	8002052 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002040:	4b78      	ldr	r3, [pc, #480]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4975      	ldr	r1, [pc, #468]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 800204e:	4313      	orrs	r3, r2
 8002050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	4b70      	ldr	r3, [pc, #448]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800206a:	429a      	cmp	r2, r3
 800206c:	d908      	bls.n	8002080 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	496a      	ldr	r1, [pc, #424]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 800207c:	4313      	orrs	r3, r2
 800207e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	4b64      	ldr	r3, [pc, #400]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002098:	429a      	cmp	r2, r3
 800209a:	d908      	bls.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800209c:	4b61      	ldr	r3, [pc, #388]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	495e      	ldr	r1, [pc, #376]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d908      	bls.n	80020dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4953      	ldr	r1, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f023 020f 	bic.w	r2, r3, #15
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4947      	ldr	r1, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002106:	4313      	orrs	r3, r2
 8002108:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d055      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4940      	ldr	r1, [pc, #256]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002124:	4313      	orrs	r3, r2
 8002126:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d107      	bne.n	8002140 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002130:	4b3c      	ldr	r3, [pc, #240]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d121      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0f6      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d107      	bne.n	8002158 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d115      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0ea      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0de      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002170:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d6      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f023 0207 	bic.w	r2, r3, #7
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4925      	ldr	r1, [pc, #148]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 800218e:	4313      	orrs	r3, r2
 8002190:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002192:	f7fe fff7 	bl	8001184 <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219a:	f7fe fff3 	bl	8001184 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0be      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	429a      	cmp	r2, r3
 80021c0:	d1eb      	bne.n	800219a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	429a      	cmp	r2, r3
 80021dc:	d208      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f023 020f 	bic.w	r2, r3, #15
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x244>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d214      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 020f 	bic.w	r2, r3, #15
 8002206:	4906      	ldr	r1, [pc, #24]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_RCC_ClockConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e086      	b.n	800232e <HAL_RCC_ClockConfig+0x34e>
 8002220:	52002000 	.word	0x52002000
 8002224:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002240:	429a      	cmp	r2, r3
 8002242:	d208      	bcs.n	8002256 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002244:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	4939      	ldr	r1, [pc, #228]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 8002252:	4313      	orrs	r3, r2
 8002254:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800226e:	429a      	cmp	r2, r3
 8002270:	d208      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	492e      	ldr	r1, [pc, #184]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 8002280:	4313      	orrs	r3, r2
 8002282:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800229c:	429a      	cmp	r2, r3
 800229e:	d208      	bcs.n	80022b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d208      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4917      	ldr	r1, [pc, #92]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80022e0:	f000 f834 	bl	800234c <HAL_RCC_GetSysClockFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	4912      	ldr	r1, [pc, #72]	; (800233c <HAL_RCC_ClockConfig+0x35c>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_RCC_ClockConfig+0x358>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_RCC_ClockConfig+0x35c>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x360>)
 8002316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x364>)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x368>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fcc0 	bl	8000ca8 <HAL_InitTick>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400
 800233c:	080094d0 	.word	0x080094d0
 8002340:	24000004 	.word	0x24000004
 8002344:	24000000 	.word	0x24000000
 8002348:	24000008 	.word	0x24000008

0800234c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002352:	4bb3      	ldr	r3, [pc, #716]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800235a:	2b18      	cmp	r3, #24
 800235c:	f200 8155 	bhi.w	800260a <HAL_RCC_GetSysClockFreq+0x2be>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	080023cd 	.word	0x080023cd
 800236c:	0800260b 	.word	0x0800260b
 8002370:	0800260b 	.word	0x0800260b
 8002374:	0800260b 	.word	0x0800260b
 8002378:	0800260b 	.word	0x0800260b
 800237c:	0800260b 	.word	0x0800260b
 8002380:	0800260b 	.word	0x0800260b
 8002384:	0800260b 	.word	0x0800260b
 8002388:	080023f3 	.word	0x080023f3
 800238c:	0800260b 	.word	0x0800260b
 8002390:	0800260b 	.word	0x0800260b
 8002394:	0800260b 	.word	0x0800260b
 8002398:	0800260b 	.word	0x0800260b
 800239c:	0800260b 	.word	0x0800260b
 80023a0:	0800260b 	.word	0x0800260b
 80023a4:	0800260b 	.word	0x0800260b
 80023a8:	080023f9 	.word	0x080023f9
 80023ac:	0800260b 	.word	0x0800260b
 80023b0:	0800260b 	.word	0x0800260b
 80023b4:	0800260b 	.word	0x0800260b
 80023b8:	0800260b 	.word	0x0800260b
 80023bc:	0800260b 	.word	0x0800260b
 80023c0:	0800260b 	.word	0x0800260b
 80023c4:	0800260b 	.word	0x0800260b
 80023c8:	080023ff 	.word	0x080023ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023cc:	4b94      	ldr	r3, [pc, #592]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023d8:	4b91      	ldr	r3, [pc, #580]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	4a90      	ldr	r2, [pc, #576]	; (8002624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023ea:	e111      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023ec:	4b8d      	ldr	r3, [pc, #564]	; (8002624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023ee:	61bb      	str	r3, [r7, #24]
    break;
 80023f0:	e10e      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023f2:	4b8d      	ldr	r3, [pc, #564]	; (8002628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023f4:	61bb      	str	r3, [r7, #24]
    break;
 80023f6:	e10b      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023f8:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023fa:	61bb      	str	r3, [r7, #24]
    break;
 80023fc:	e108      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023fe:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002408:	4b85      	ldr	r3, [pc, #532]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002412:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002414:	4b82      	ldr	r3, [pc, #520]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800241e:	4b80      	ldr	r3, [pc, #512]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	08db      	lsrs	r3, r3, #3
 8002424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002436:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80e1 	beq.w	8002604 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b02      	cmp	r3, #2
 8002446:	f000 8083 	beq.w	8002550 <HAL_RCC_GetSysClockFreq+0x204>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b02      	cmp	r3, #2
 800244e:	f200 80a1 	bhi.w	8002594 <HAL_RCC_GetSysClockFreq+0x248>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x114>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d056      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x1c0>
 800245e:	e099      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02d      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800246c:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	4a6b      	ldr	r2, [pc, #428]	; (8002624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024c6:	e087      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002634 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800250a:	e065      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002516:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002638 <HAL_RCC_GetSysClockFreq+0x2ec>
 800251a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800252e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002532:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002630 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800253a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800253e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800254e:	e043      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800263c <HAL_RCC_GetSysClockFreq+0x2f0>
 800255e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002572:	ed97 6a02 	vldr	s12, [r7, #8]
 8002576:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002630 <HAL_RCC_GetSysClockFreq+0x2e4>
 800257a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800257e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002592:	e021      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002638 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	0a5b      	lsrs	r3, r3, #9
 80025de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e2:	3301      	adds	r3, #1
 80025e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025fc:	ee17 3a90 	vmov	r3, s15
 8002600:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002602:	e005      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
    break;
 8002608:	e002      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800260c:	61bb      	str	r3, [r7, #24]
    break;
 800260e:	bf00      	nop
  }

  return sysclockfreq;
 8002610:	69bb      	ldr	r3, [r7, #24]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	58024400 	.word	0x58024400
 8002624:	03d09000 	.word	0x03d09000
 8002628:	003d0900 	.word	0x003d0900
 800262c:	007a1200 	.word	0x007a1200
 8002630:	46000000 	.word	0x46000000
 8002634:	4c742400 	.word	0x4c742400
 8002638:	4a742400 	.word	0x4a742400
 800263c:	4af42400 	.word	0x4af42400

08002640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002646:	f7ff fe81 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800264a:	4602      	mov	r2, r0
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_RCC_GetHCLKFreq+0x50>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	490f      	ldr	r1, [pc, #60]	; (8002694 <HAL_RCC_GetHCLKFreq+0x54>)
 8002658:	5ccb      	ldrb	r3, [r1, r3]
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_GetHCLKFreq+0x50>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_GetHCLKFreq+0x54>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_RCC_GetHCLKFreq+0x58>)
 800267c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_RCC_GetHCLKFreq+0x58>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	58024400 	.word	0x58024400
 8002694:	080094d0 	.word	0x080094d0
 8002698:	24000004 	.word	0x24000004
 800269c:	24000000 	.word	0x24000000

080026a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80026a4:	f7ff ffcc 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	58024400 	.word	0x58024400
 80026c8:	080094d0 	.word	0x080094d0

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80026d0:	f7ff ffb6 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	58024400 	.word	0x58024400
 80026f4:	080094d0 	.word	0x080094d0

080026f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	223f      	movs	r2, #63	; 0x3f
 8002706:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCC_GetClockConfig+0x7c>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0207 	and.w	r2, r3, #7
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_RCC_GetClockConfig+0x7c>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCC_GetClockConfig+0x7c>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_RCC_GetClockConfig+0x7c>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_RCC_GetClockConfig+0x7c>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_GetClockConfig+0x7c>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_RCC_GetClockConfig+0x7c>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_GetClockConfig+0x80>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	58024400 	.word	0x58024400
 8002778:	52002000 	.word	0x52002000

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002788:	2300      	movs	r3, #0
 800278a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03f      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800279c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027a0:	d02a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027a6:	d824      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ac:	d018      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b2:	d81e      	bhi.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027bc:	d007      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027be:	e018      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c0:	4ba6      	ldr	r3, [pc, #664]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	4aa5      	ldr	r2, [pc, #660]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027cc:	e015      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 f99b 	bl	8003b10 <RCCEx_PLL2_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027de:	e00c      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3324      	adds	r3, #36	; 0x24
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 fa44 	bl	8003c74 <RCCEx_PLL3_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027f0:	e003      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
      break;
 80027f6:	e000      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002800:	4b96      	ldr	r3, [pc, #600]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280c:	4993      	ldr	r1, [pc, #588]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	650b      	str	r3, [r1, #80]	; 0x50
 8002812:	e001      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d03d      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	2b04      	cmp	r3, #4
 800282a:	d826      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002849 	.word	0x08002849
 8002838:	08002857 	.word	0x08002857
 800283c:	08002869 	.word	0x08002869
 8002840:	08002881 	.word	0x08002881
 8002844:	08002881 	.word	0x08002881
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002848:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002854:	e015      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 f957 	bl	8003b10 <RCCEx_PLL2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002866:	e00c      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3324      	adds	r3, #36	; 0x24
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f001 fa00 	bl	8003c74 <RCCEx_PLL3_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002878:	e003      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
      break;
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002888:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	4971      	ldr	r1, [pc, #452]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002896:	4313      	orrs	r3, r2
 8002898:	650b      	str	r3, [r1, #80]	; 0x50
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d04a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028b4:	d031      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80028b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028ba:	d82b      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c0:	d02d      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c6:	d825      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028c8:	2bc0      	cmp	r3, #192	; 0xc0
 80028ca:	d02a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028cc:	2bc0      	cmp	r3, #192	; 0xc0
 80028ce:	d821      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d016      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d81d      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d007      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80028e0:	e018      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e2:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80028ee:	e019      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f90a 	bl	8003b10 <RCCEx_PLL2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002900:	e010      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3324      	adds	r3, #36	; 0x24
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f001 f9b3 	bl	8003c74 <RCCEx_PLL3_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002912:	e007      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	75fb      	strb	r3, [r7, #23]
      break;
 8002918:	e004      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800291a:	bf00      	nop
 800291c:	e002      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800292a:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800292c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	4949      	ldr	r1, [pc, #292]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	650b      	str	r3, [r1, #80]	; 0x50
 800293c:	e001      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04f      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002956:	d036      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002958:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800295c:	d830      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800295e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002962:	d032      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002968:	d82a      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800296a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800296e:	d02e      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002970:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002974:	d824      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d018      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x232>
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d81e      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298a:	d007      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800298c:	e018      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298e:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	4a32      	ldr	r2, [pc, #200]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800299a:	e019      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f8b4 	bl	8003b10 <RCCEx_PLL2_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80029ac:	e010      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3324      	adds	r3, #36	; 0x24
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f95d 	bl	8003c74 <RCCEx_PLL3_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80029be:	e007      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
      break;
 80029c4:	e004      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80029ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	491e      	ldr	r1, [pc, #120]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	650b      	str	r3, [r1, #80]	; 0x50
 80029e8:	e001      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d034      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	2b30      	cmp	r3, #48	; 0x30
 8002a00:	d01c      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002a02:	2b30      	cmp	r3, #48	; 0x30
 8002a04:	d817      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d00c      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d813      	bhi.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d10f      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002a22:	e00e      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 f870 	bl	8003b10 <RCCEx_PLL2_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002a34:	e005      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3a:	e002      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002a3c:	bf00      	nop
 8002a3e:	e000      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a54:	4901      	ldr	r1, [pc, #4]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a5a:	e003      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d047      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a78:	d030      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a7e:	d82a      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a84:	d02c      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002a86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a8a:	d824      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a90:	d018      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a96:	d81e      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002aa2:	e018      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa4:	4bb0      	ldr	r3, [pc, #704]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	4aaf      	ldr	r2, [pc, #700]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ab0:	e017      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 f829 	bl	8003b10 <RCCEx_PLL2_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ac2:	e00e      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3324      	adds	r3, #36	; 0x24
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 f8d2 	bl	8003c74 <RCCEx_PLL3_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ad4:	e005      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8002ada:	e002      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ae8:	4b9f      	ldr	r3, [pc, #636]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af4:	499c      	ldr	r1, [pc, #624]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	650b      	str	r3, [r1, #80]	; 0x50
 8002afa:	e001      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d049      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d02e      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1a:	d828      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b20:	d02a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b26:	d822      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b2c:	d026      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002b2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b32:	d81c      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b38:	d010      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b3e:	d816      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01d      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d111      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 ffdd 	bl	8003b10 <RCCEx_PLL2_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b5a:	e012      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3324      	adds	r3, #36	; 0x24
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 f886 	bl	8003c74 <RCCEx_PLL3_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b6c:	e009      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
      break;
 8002b72:	e006      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b74:	bf00      	nop
 8002b76:	e004      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b78:	bf00      	nop
 8002b7a:	e002      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b88:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b94:	4974      	ldr	r1, [pc, #464]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	650b      	str	r3, [r1, #80]	; 0x50
 8002b9a:	e001      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d053      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bb2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002bb6:	d034      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002bb8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002bbc:	d82e      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc2:	d030      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc8:	d828      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d02c      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d822      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bda:	d028      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002bdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002be0:	d81c      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be6:	d010      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bec:	d816      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01f      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 ff86 	bl	8003b10 <RCCEx_PLL2_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c08:	e014      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3324      	adds	r3, #36	; 0x24
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f82f 	bl	8003c74 <RCCEx_PLL3_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c20:	e008      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c22:	bf00      	nop
 8002c24:	e006      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c26:	bf00      	nop
 8002c28:	e004      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e002      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c48:	4947      	ldr	r1, [pc, #284]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	658b      	str	r3, [r1, #88]	; 0x58
 8002c4e:	e001      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02f      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c68:	d00e      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6e:	d814      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d015      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 ff3e 	bl	8003b10 <RCCEx_PLL2_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c98:	e003      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	492c      	ldr	r1, [pc, #176]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	650b      	str	r3, [r1, #80]	; 0x50
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d032      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d81b      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d13 	.word	0x08002d13
 8002ce0:	08002ced 	.word	0x08002ced
 8002ce4:	08002cfb 	.word	0x08002cfb
 8002ce8:	08002d13 	.word	0x08002d13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cf8:	e00c      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 ff05 	bl	8003b10 <RCCEx_PLL2_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4910      	ldr	r1, [pc, #64]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d2c:	e001      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 808a 	beq.w	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fa1a 	bl	8001184 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d52:	e00d      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d54:	f7fe fa16 	bl	8001184 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d906      	bls.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	75fb      	strb	r3, [r7, #23]
        break;
 8002d66:	e009      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d70:	4bba      	ldr	r3, [pc, #744]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0eb      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d166      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d82:	4bb7      	ldr	r3, [pc, #732]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d8c:	4053      	eors	r3, r2
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d013      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d96:	4bb2      	ldr	r3, [pc, #712]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002da0:	4baf      	ldr	r3, [pc, #700]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4aae      	ldr	r2, [pc, #696]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dac:	4bac      	ldr	r3, [pc, #688]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4aab      	ldr	r2, [pc, #684]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002db8:	4aa9      	ldr	r2, [pc, #676]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc8:	d115      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe f9db 	bl	8001184 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd0:	e00b      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe f9d7 	bl	8001184 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d902      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	75fb      	strb	r3, [r7, #23]
            break;
 8002de8:	e005      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dea:	4b9d      	ldr	r3, [pc, #628]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ed      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d126      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e0a:	d10d      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002e0c:	4b94      	ldr	r3, [pc, #592]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e1a:	0919      	lsrs	r1, r3, #4
 8002e1c:	4b91      	ldr	r3, [pc, #580]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	498f      	ldr	r1, [pc, #572]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	610b      	str	r3, [r1, #16]
 8002e26:	e005      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002e28:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	4a8c      	ldr	r2, [pc, #560]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e32:	6113      	str	r3, [r2, #16]
 8002e34:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e42:	4987      	ldr	r1, [pc, #540]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	670b      	str	r3, [r1, #112]	; 0x70
 8002e48:	e004      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	75bb      	strb	r3, [r7, #22]
 8002e4e:	e001      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07f      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e66:	2b28      	cmp	r3, #40	; 0x28
 8002e68:	d866      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002f3f 	.word	0x08002f3f
 8002e74:	08002f39 	.word	0x08002f39
 8002e78:	08002f39 	.word	0x08002f39
 8002e7c:	08002f39 	.word	0x08002f39
 8002e80:	08002f39 	.word	0x08002f39
 8002e84:	08002f39 	.word	0x08002f39
 8002e88:	08002f39 	.word	0x08002f39
 8002e8c:	08002f39 	.word	0x08002f39
 8002e90:	08002f15 	.word	0x08002f15
 8002e94:	08002f39 	.word	0x08002f39
 8002e98:	08002f39 	.word	0x08002f39
 8002e9c:	08002f39 	.word	0x08002f39
 8002ea0:	08002f39 	.word	0x08002f39
 8002ea4:	08002f39 	.word	0x08002f39
 8002ea8:	08002f39 	.word	0x08002f39
 8002eac:	08002f39 	.word	0x08002f39
 8002eb0:	08002f27 	.word	0x08002f27
 8002eb4:	08002f39 	.word	0x08002f39
 8002eb8:	08002f39 	.word	0x08002f39
 8002ebc:	08002f39 	.word	0x08002f39
 8002ec0:	08002f39 	.word	0x08002f39
 8002ec4:	08002f39 	.word	0x08002f39
 8002ec8:	08002f39 	.word	0x08002f39
 8002ecc:	08002f39 	.word	0x08002f39
 8002ed0:	08002f3f 	.word	0x08002f3f
 8002ed4:	08002f39 	.word	0x08002f39
 8002ed8:	08002f39 	.word	0x08002f39
 8002edc:	08002f39 	.word	0x08002f39
 8002ee0:	08002f39 	.word	0x08002f39
 8002ee4:	08002f39 	.word	0x08002f39
 8002ee8:	08002f39 	.word	0x08002f39
 8002eec:	08002f39 	.word	0x08002f39
 8002ef0:	08002f3f 	.word	0x08002f3f
 8002ef4:	08002f39 	.word	0x08002f39
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f39 	.word	0x08002f39
 8002f00:	08002f39 	.word	0x08002f39
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f3f 	.word	0x08002f3f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fdf8 	bl	8003b10 <RCCEx_PLL2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f24:	e00c      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3324      	adds	r3, #36	; 0x24
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fea1 	bl	8003c74 <RCCEx_PLL3_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f36:	e003      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3c:	e000      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f46:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f54:	4942      	ldr	r1, [pc, #264]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	654b      	str	r3, [r1, #84]	; 0x54
 8002f5a:	e001      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d038      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d821      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fbf 	.word	0x08002fbf
 8002f80:	08002f95 	.word	0x08002f95
 8002f84:	08002fa7 	.word	0x08002fa7
 8002f88:	08002fbf 	.word	0x08002fbf
 8002f8c:	08002fbf 	.word	0x08002fbf
 8002f90:	08002fbf 	.word	0x08002fbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fdb8 	bl	8003b10 <RCCEx_PLL2_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fa4:	e00c      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3324      	adds	r3, #36	; 0x24
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fe61 	bl	8003c74 <RCCEx_PLL3_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fb6:	e003      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
      break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd2:	4923      	ldr	r1, [pc, #140]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	654b      	str	r3, [r1, #84]	; 0x54
 8002fd8:	e001      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d040      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d821      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800303f 	.word	0x0800303f
 8003000:	08003015 	.word	0x08003015
 8003004:	08003027 	.word	0x08003027
 8003008:	0800303f 	.word	0x0800303f
 800300c:	0800303f 	.word	0x0800303f
 8003010:	0800303f 	.word	0x0800303f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fd78 	bl	8003b10 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003024:	e00c      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fe21 	bl	8003c74 <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003036:	e003      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e000      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800303e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d110      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003054:	4902      	ldr	r1, [pc, #8]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	658b      	str	r3, [r1, #88]	; 0x58
 800305a:	e007      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800305c:	58024800 	.word	0x58024800
 8003060:	58024400 	.word	0x58024400
 8003064:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d04b      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003082:	d02e      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003088:	d828      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308e:	d02a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d822      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003096:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800309a:	d026      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800309c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030a0:	d81c      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80030a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a6:	d010      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80030a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ac:	d816      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01d      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 80030b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b6:	d111      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fd26 	bl	8003b10 <RCCEx_PLL2_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030c8:	e012      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3324      	adds	r3, #36	; 0x24
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fdcf 	bl	8003c74 <RCCEx_PLL3_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030da:	e009      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	75fb      	strb	r3, [r7, #23]
      break;
 80030e0:	e006      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030e2:	bf00      	nop
 80030e4:	e004      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80030ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030f6:	4bb3      	ldr	r3, [pc, #716]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003104:	49af      	ldr	r1, [pc, #700]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003106:	4313      	orrs	r3, r2
 8003108:	654b      	str	r3, [r1, #84]	; 0x54
 800310a:	e001      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d04b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003122:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003126:	d02e      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003128:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800312c:	d828      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	d02a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003138:	d822      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800313a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800313e:	d026      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003144:	d81c      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314a:	d010      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003150:	d816      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01d      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d111      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fcd4 	bl	8003b10 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800316c:	e012      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3324      	adds	r3, #36	; 0x24
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fd7d 	bl	8003c74 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800317e:	e009      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	e006      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003186:	bf00      	nop
 8003188:	e004      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800319a:	4b8a      	ldr	r3, [pc, #552]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031a8:	4986      	ldr	r1, [pc, #536]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	658b      	str	r3, [r1, #88]	; 0x58
 80031ae:	e001      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d04b      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031ca:	d02e      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80031cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031d0:	d828      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d6:	d02a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80031d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031dc:	d822      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031e2:	d026      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80031e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031e8:	d81c      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ee:	d010      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80031f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f4:	d816      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01d      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	d111      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fc82 	bl	8003b10 <RCCEx_PLL2_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003210:	e012      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3324      	adds	r3, #36	; 0x24
 8003216:	2102      	movs	r1, #2
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fd2b 	bl	8003c74 <RCCEx_PLL3_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
      break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800323e:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800324c:	495d      	ldr	r1, [pc, #372]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800324e:	4313      	orrs	r3, r2
 8003250:	658b      	str	r3, [r1, #88]	; 0x58
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d10a      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3324      	adds	r3, #36	; 0x24
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fcfc 	bl	8003c74 <RCCEx_PLL3_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003286:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	494b      	ldr	r1, [pc, #300]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003296:	4313      	orrs	r3, r2
 8003298:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b0:	d10a      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3324      	adds	r3, #36	; 0x24
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fcdb 	bl	8003c74 <RCCEx_PLL3_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032c8:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d6:	493b      	ldr	r1, [pc, #236]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d034      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f2:	d01d      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80032f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f8:	d817      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d009      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003304:	e011      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fbff 	bl	8003b10 <RCCEx_PLL2_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003316:	e00c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3324      	adds	r3, #36	; 0x24
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fca8 	bl	8003c74 <RCCEx_PLL3_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
      break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003346:	491f      	ldr	r1, [pc, #124]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003348:	4313      	orrs	r3, r2
 800334a:	658b      	str	r3, [r1, #88]	; 0x58
 800334c:	e001      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d036      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003368:	d01c      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800336a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800336e:	d816      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003374:	d003      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800337a:	d007      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003388:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800338a:	e00c      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3324      	adds	r3, #36	; 0x24
 8003390:	2101      	movs	r1, #1
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fc6e 	bl	8003c74 <RCCEx_PLL3_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
      break;
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80033a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ba:	4902      	ldr	r1, [pc, #8]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	654b      	str	r3, [r1, #84]	; 0x54
 80033c0:	e004      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d029      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d007      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80033e6:	e00f      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e8:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4a68      	ldr	r2, [pc, #416]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033f4:	e00b      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fb87 	bl	8003b10 <RCCEx_PLL2_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003406:	e002      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
      break;
 800340c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003420:	495b      	ldr	r1, [pc, #364]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003422:	4313      	orrs	r3, r2
 8003424:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003426:	e001      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fc18 	bl	8003c74 <RCCEx_PLL3_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d032      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003464:	d017      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800346a:	d811      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d013      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003476:	d80b      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800347c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003480:	d106      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	4a42      	ldr	r2, [pc, #264]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800348e:	e007      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
      break;
 8003494:	e004      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800349e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a6:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b4:	4936      	ldr	r1, [pc, #216]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	654b      	str	r3, [r1, #84]	; 0x54
 80034ba:	e001      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034cc:	4b30      	ldr	r3, [pc, #192]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d8:	492d      	ldr	r1, [pc, #180]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f6:	4926      	ldr	r1, [pc, #152]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	491e      	ldr	r1, [pc, #120]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003516:	4313      	orrs	r3, r2
 8003518:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800352c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003530:	6113      	str	r3, [r2, #16]
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800353c:	4914      	ldr	r1, [pc, #80]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da08      	bge.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	490e      	ldr	r1, [pc, #56]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003558:	4313      	orrs	r3, r2
 800355a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	4906      	ldr	r1, [pc, #24]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003578:	4313      	orrs	r3, r2
 800357a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800357c:	7dbb      	ldrb	r3, [r7, #22]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	58024400 	.word	0x58024400

08003594 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003598:	f7ff f852 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	58024400 	.word	0x58024400
 80035bc:	080094d0 	.word	0x080094d0

080035c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035c8:	4ba1      	ldr	r3, [pc, #644]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80035d2:	4b9f      	ldr	r3, [pc, #636]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	0b1b      	lsrs	r3, r3, #12
 80035d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80035de:	4b9c      	ldr	r3, [pc, #624]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80035ea:	4b99      	ldr	r3, [pc, #612]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8111 	beq.w	8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b02      	cmp	r3, #2
 8003612:	f000 8083 	beq.w	800371c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b02      	cmp	r3, #2
 800361a:	f200 80a1 	bhi.w	8003760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d056      	beq.n	80036d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800362a:	e099      	b.n	8003760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800362c:	4b88      	ldr	r3, [pc, #544]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02d      	beq.n	8003694 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003638:	4b85      	ldr	r3, [pc, #532]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	08db      	lsrs	r3, r3, #3
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	4a84      	ldr	r2, [pc, #528]	; (8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	ee07 3a90 	vmov	s15, r3
 8003650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	4b7b      	ldr	r3, [pc, #492]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003672:	ed97 6a03 	vldr	s12, [r7, #12]
 8003676:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800367a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003692:	e087      	b.n	80037a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800385c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80036a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a6:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036d6:	e065      	b.n	80037a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80036e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ea:	4b59      	ldr	r3, [pc, #356]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80036fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800370a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800371a:	e043      	b.n	80037a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800372a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372e:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003742:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800375e:	e021      	b.n	80037a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800376e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003782:	ed97 6a03 	vldr	s12, [r7, #12]
 8003786:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800378a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80037a4:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	0a5b      	lsrs	r3, r3, #9
 80037aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037be:	edd7 6a07 	vldr	s13, [r7, #28]
 80037c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ca:	ee17 2a90 	vmov	r2, s15
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80037d2:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80037f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f8:	ee17 2a90 	vmov	r2, s15
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	0e1b      	lsrs	r3, r3, #24
 8003806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800381a:	edd7 6a07 	vldr	s13, [r7, #28]
 800381e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003826:	ee17 2a90 	vmov	r2, s15
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800382e:	e008      	b.n	8003842 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
}
 8003842:	bf00      	nop
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	58024400 	.word	0x58024400
 8003854:	03d09000 	.word	0x03d09000
 8003858:	46000000 	.word	0x46000000
 800385c:	4c742400 	.word	0x4c742400
 8003860:	4a742400 	.word	0x4a742400
 8003864:	4af42400 	.word	0x4af42400

08003868 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003870:	4ba1      	ldr	r3, [pc, #644]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800387a:	4b9f      	ldr	r3, [pc, #636]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	0d1b      	lsrs	r3, r3, #20
 8003880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003884:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003886:	4b9c      	ldr	r3, [pc, #624]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003892:	4b99      	ldr	r3, [pc, #612]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8111 	beq.w	8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f000 8083 	beq.w	80039c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	f200 80a1 	bhi.w	8003a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d056      	beq.n	8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80038d2:	e099      	b.n	8003a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d4:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02d      	beq.n	800393c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038e0:	4b85      	ldr	r3, [pc, #532]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	4a84      	ldr	r2, [pc, #528]	; (8003afc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a03 	vldr	s12, [r7, #12]
 800391e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800393a:	e087      	b.n	8003a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800397e:	e065      	b.n	8003a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039c2:	e043      	b.n	8003a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b48      	ldr	r3, [pc, #288]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a06:	e021      	b.n	8003a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	0a5b      	lsrs	r3, r3, #9
 8003a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a72:	ee17 2a90 	vmov	r2, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa0:	ee17 2a90 	vmov	r2, s15
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	0e1b      	lsrs	r3, r3, #24
 8003aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ace:	ee17 2a90 	vmov	r2, s15
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ad6:	e008      	b.n	8003aea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
}
 8003aea:	bf00      	nop
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
 8003afc:	03d09000 	.word	0x03d09000
 8003b00:	46000000 	.word	0x46000000
 8003b04:	4c742400 	.word	0x4c742400
 8003b08:	4a742400 	.word	0x4a742400
 8003b0c:	4af42400 	.word	0x4af42400

08003b10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b1e:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d101      	bne.n	8003b2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e099      	b.n	8003c62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b2e:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a4e      	ldr	r2, [pc, #312]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003b34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3a:	f7fd fb23 	bl	8001184 <HAL_GetTick>
 8003b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b40:	e008      	b.n	8003b54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b42:	f7fd fb1f 	bl	8001184 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e086      	b.n	8003c62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b54:	4b45      	ldr	r3, [pc, #276]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f0      	bne.n	8003b42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b60:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	493f      	ldr	r1, [pc, #252]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	628b      	str	r3, [r1, #40]	; 0x28
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	025b      	lsls	r3, r3, #9
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ba4:	4931      	ldr	r1, [pc, #196]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003baa:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	492d      	ldr	r1, [pc, #180]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f023 0220 	bic.w	r2, r3, #32
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	4928      	ldr	r1, [pc, #160]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bd4:	f023 0310 	bic.w	r3, r3, #16
 8003bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <RCCEx_PLL2_Config+0x160>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	69d2      	ldr	r2, [r2, #28]
 8003be6:	00d2      	lsls	r2, r2, #3
 8003be8:	4920      	ldr	r1, [pc, #128]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003bee:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003bf4:	f043 0310 	orr.w	r3, r3, #16
 8003bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c0c:	e00f      	b.n	8003c2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d106      	bne.n	8003c22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c20:	e005      	b.n	8003c2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3a:	f7fd faa3 	bl	8001184 <HAL_GetTick>
 8003c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c40:	e008      	b.n	8003c54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c42:	f7fd fa9f 	bl	8001184 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e006      	b.n	8003c62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <RCCEx_PLL2_Config+0x15c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	ffff0007 	.word	0xffff0007

08003c74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c82:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d101      	bne.n	8003c92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e099      	b.n	8003dc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c92:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a4e      	ldr	r2, [pc, #312]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9e:	f7fd fa71 	bl	8001184 <HAL_GetTick>
 8003ca2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ca6:	f7fd fa6d 	bl	8001184 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e086      	b.n	8003dc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cb8:	4b45      	ldr	r3, [pc, #276]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	051b      	lsls	r3, r3, #20
 8003cd2:	493f      	ldr	r1, [pc, #252]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	628b      	str	r3, [r1, #40]	; 0x28
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	025b      	lsls	r3, r3, #9
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d08:	4931      	ldr	r1, [pc, #196]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	492d      	ldr	r1, [pc, #180]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	4928      	ldr	r1, [pc, #160]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <RCCEx_PLL3_Config+0x160>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	69d2      	ldr	r2, [r2, #28]
 8003d4a:	00d2      	lsls	r2, r2, #3
 8003d4c:	4920      	ldr	r1, [pc, #128]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d52:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d106      	bne.n	8003d72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d70:	e00f      	b.n	8003d92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d106      	bne.n	8003d86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d84:	e005      	b.n	8003d92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9e:	f7fd f9f1 	bl	8001184 <HAL_GetTick>
 8003da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003da4:	e008      	b.n	8003db8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003da6:	f7fd f9ed 	bl	8001184 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e006      	b.n	8003dc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <RCCEx_PLL3_Config+0x15c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	ffff0007 	.word	0xffff0007

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e049      	b.n	8003e7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f841 	bl	8003e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 fa00 	bl	800421c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e054      	b.n	8003f5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d01d      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <HAL_TIM_Base_Start_IT+0xe0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d115      	bne.n	8003f48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_TIM_Base_Start_IT+0xec>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d015      	beq.n	8003f5a <HAL_TIM_Base_Start_IT+0xbe>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d011      	beq.n	8003f5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	e008      	b.n	8003f5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000c00 	.word	0x40000c00
 8003f7c:	40010400 	.word	0x40010400
 8003f80:	40001800 	.word	0x40001800
 8003f84:	40014000 	.word	0x40014000
 8003f88:	00010007 	.word	0x00010007

08003f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d122      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d11b      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0202 	mvn.w	r2, #2
 8003fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f905 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8f7 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f908 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0204 	mvn.w	r2, #4
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8db 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8cd 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8de 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b08      	cmp	r3, #8
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0208 	mvn.w	r2, #8
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2204      	movs	r2, #4
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8b1 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8a3 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8b4 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b10      	cmp	r3, #16
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0210 	mvn.w	r2, #16
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2208      	movs	r2, #8
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f887 	bl	80041de <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f879 	bl	80041ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f88a 	bl	80041f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0201 	mvn.w	r2, #1
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc fd96 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b80      	cmp	r3, #128	; 0x80
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f914 	bl	8004364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414a:	d10e      	bne.n	800416a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d107      	bne.n	800416a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f907 	bl	8004378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d10e      	bne.n	8004196 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d107      	bne.n	8004196 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800418e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f838 	bl	8004206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d10e      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d107      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0220 	mvn.w	r2, #32
 80041ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8c7 	bl	8004350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a40      	ldr	r2, [pc, #256]	; (8004330 <TIM_Base_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d013      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3d      	ldr	r2, [pc, #244]	; (8004334 <TIM_Base_SetConfig+0x118>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3c      	ldr	r2, [pc, #240]	; (8004338 <TIM_Base_SetConfig+0x11c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3b      	ldr	r2, [pc, #236]	; (800433c <TIM_Base_SetConfig+0x120>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3a      	ldr	r2, [pc, #232]	; (8004340 <TIM_Base_SetConfig+0x124>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2f      	ldr	r2, [pc, #188]	; (8004330 <TIM_Base_SetConfig+0x114>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01f      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d01b      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <TIM_Base_SetConfig+0x118>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d017      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <TIM_Base_SetConfig+0x11c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2a      	ldr	r2, [pc, #168]	; (800433c <TIM_Base_SetConfig+0x120>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00f      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a29      	ldr	r2, [pc, #164]	; (8004340 <TIM_Base_SetConfig+0x124>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00b      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a28      	ldr	r2, [pc, #160]	; (8004344 <TIM_Base_SetConfig+0x128>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a27      	ldr	r2, [pc, #156]	; (8004348 <TIM_Base_SetConfig+0x12c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a26      	ldr	r2, [pc, #152]	; (800434c <TIM_Base_SetConfig+0x130>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <TIM_Base_SetConfig+0x114>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00f      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <TIM_Base_SetConfig+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a11      	ldr	r2, [pc, #68]	; (8004344 <TIM_Base_SetConfig+0x128>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a10      	ldr	r2, [pc, #64]	; (8004348 <TIM_Base_SetConfig+0x12c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a0f      	ldr	r2, [pc, #60]	; (800434c <TIM_Base_SetConfig+0x130>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40010400 	.word	0x40010400
 8004344:	40014000 	.word	0x40014000
 8004348:	40014400 	.word	0x40014400
 800434c:	40014800 	.word	0x40014800

08004350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e042      	b.n	8004424 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fc fdff 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2224      	movs	r2, #36	; 0x24
 80043ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f996 	bl	8004700 <UART_SetConfig>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e022      	b.n	8004424 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 ffe8 	bl	80053bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800440a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 f86f 	bl	8005500 <UART_CheckIdleState>
 8004422:	4603      	mov	r3, r0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004442:	2b20      	cmp	r3, #32
 8004444:	f040 8083 	bne.w	800454e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Transmit+0x28>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e07b      	b.n	8004550 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Transmit+0x3a>
 8004462:	2302      	movs	r3, #2
 8004464:	e074      	b.n	8004550 <HAL_UART_Transmit+0x124>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2221      	movs	r2, #33	; 0x21
 800447a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447e:	f7fc fe81 	bl	8001184 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d108      	bne.n	80044b0 <HAL_UART_Transmit+0x84>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e003      	b.n	80044b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80044c0:	e02c      	b.n	800451c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f001 f862 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e039      	b.n	8004550 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	3302      	adds	r3, #2
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	e007      	b.n	800450a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3301      	adds	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1cc      	bne.n	80044c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	2140      	movs	r1, #64	; 0x40
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f001 f82f 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e006      	b.n	8004550 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	2b20      	cmp	r3, #32
 8004570:	f040 80c0 	bne.w	80046f4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_UART_Receive+0x28>
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0b8      	b.n	80046f6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_UART_Receive+0x3a>
 800458e:	2302      	movs	r3, #2
 8004590:	e0b1      	b.n	80046f6 <HAL_UART_Receive+0x19e>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2222      	movs	r2, #34	; 0x22
 80045a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045b0:	f7fc fde8 	bl	8001184 <HAL_GetTick>
 80045b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	88fa      	ldrh	r2, [r7, #6]
 80045ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ce:	d10e      	bne.n	80045ee <HAL_UART_Receive+0x96>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <HAL_UART_Receive+0x8c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045e2:	e02d      	b.n	8004640 <HAL_UART_Receive+0xe8>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	22ff      	movs	r2, #255	; 0xff
 80045e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045ec:	e028      	b.n	8004640 <HAL_UART_Receive+0xe8>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10d      	bne.n	8004612 <HAL_UART_Receive+0xba>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <HAL_UART_Receive+0xb0>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004606:	e01b      	b.n	8004640 <HAL_UART_Receive+0xe8>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	227f      	movs	r2, #127	; 0x7f
 800460c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004610:	e016      	b.n	8004640 <HAL_UART_Receive+0xe8>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461a:	d10d      	bne.n	8004638 <HAL_UART_Receive+0xe0>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_UART_Receive+0xd6>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	227f      	movs	r2, #127	; 0x7f
 8004628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800462c:	e008      	b.n	8004640 <HAL_UART_Receive+0xe8>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	223f      	movs	r2, #63	; 0x3f
 8004632:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004636:	e003      	b.n	8004640 <HAL_UART_Receive+0xe8>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004646:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d108      	bne.n	8004664 <HAL_UART_Receive+0x10c>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e003      	b.n	800466c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004674:	e032      	b.n	80046dc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	2120      	movs	r1, #32
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 ff88 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e032      	b.n	80046f6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10c      	bne.n	80046b0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b29a      	uxth	r2, r3
 800469e:	8a7b      	ldrh	r3, [r7, #18]
 80046a0:	4013      	ands	r3, r2
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	3302      	adds	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e00c      	b.n	80046ca <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	8a7b      	ldrh	r3, [r7, #18]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4013      	ands	r3, r2
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1c6      	bne.n	8004676 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	b08e      	sub	sp, #56	; 0x38
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4313      	orrs	r3, r2
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4bbf      	ldr	r3, [pc, #764]	; (8004a2c <UART_SetConfig+0x32c>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004736:	430b      	orrs	r3, r1
 8004738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4ab5      	ldr	r2, [pc, #724]	; (8004a30 <UART_SetConfig+0x330>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004766:	4313      	orrs	r3, r2
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	4bb0      	ldr	r3, [pc, #704]	; (8004a34 <UART_SetConfig+0x334>)
 8004772:	4013      	ands	r3, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800477a:	430b      	orrs	r3, r1
 800477c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f023 010f 	bic.w	r1, r3, #15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4aa7      	ldr	r2, [pc, #668]	; (8004a38 <UART_SetConfig+0x338>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d176      	bne.n	800488c <UART_SetConfig+0x18c>
 800479e:	4ba7      	ldr	r3, [pc, #668]	; (8004a3c <UART_SetConfig+0x33c>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a6:	2b28      	cmp	r3, #40	; 0x28
 80047a8:	d86c      	bhi.n	8004884 <UART_SetConfig+0x184>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0xb0>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	08004855 	.word	0x08004855
 80047b4:	08004885 	.word	0x08004885
 80047b8:	08004885 	.word	0x08004885
 80047bc:	08004885 	.word	0x08004885
 80047c0:	08004885 	.word	0x08004885
 80047c4:	08004885 	.word	0x08004885
 80047c8:	08004885 	.word	0x08004885
 80047cc:	08004885 	.word	0x08004885
 80047d0:	0800485d 	.word	0x0800485d
 80047d4:	08004885 	.word	0x08004885
 80047d8:	08004885 	.word	0x08004885
 80047dc:	08004885 	.word	0x08004885
 80047e0:	08004885 	.word	0x08004885
 80047e4:	08004885 	.word	0x08004885
 80047e8:	08004885 	.word	0x08004885
 80047ec:	08004885 	.word	0x08004885
 80047f0:	08004865 	.word	0x08004865
 80047f4:	08004885 	.word	0x08004885
 80047f8:	08004885 	.word	0x08004885
 80047fc:	08004885 	.word	0x08004885
 8004800:	08004885 	.word	0x08004885
 8004804:	08004885 	.word	0x08004885
 8004808:	08004885 	.word	0x08004885
 800480c:	08004885 	.word	0x08004885
 8004810:	0800486d 	.word	0x0800486d
 8004814:	08004885 	.word	0x08004885
 8004818:	08004885 	.word	0x08004885
 800481c:	08004885 	.word	0x08004885
 8004820:	08004885 	.word	0x08004885
 8004824:	08004885 	.word	0x08004885
 8004828:	08004885 	.word	0x08004885
 800482c:	08004885 	.word	0x08004885
 8004830:	08004875 	.word	0x08004875
 8004834:	08004885 	.word	0x08004885
 8004838:	08004885 	.word	0x08004885
 800483c:	08004885 	.word	0x08004885
 8004840:	08004885 	.word	0x08004885
 8004844:	08004885 	.word	0x08004885
 8004848:	08004885 	.word	0x08004885
 800484c:	08004885 	.word	0x08004885
 8004850:	0800487d 	.word	0x0800487d
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485a:	e326      	b.n	8004eaa <UART_SetConfig+0x7aa>
 800485c:	2304      	movs	r3, #4
 800485e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004862:	e322      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004864:	2308      	movs	r3, #8
 8004866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800486a:	e31e      	b.n	8004eaa <UART_SetConfig+0x7aa>
 800486c:	2310      	movs	r3, #16
 800486e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004872:	e31a      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004874:	2320      	movs	r3, #32
 8004876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800487a:	e316      	b.n	8004eaa <UART_SetConfig+0x7aa>
 800487c:	2340      	movs	r3, #64	; 0x40
 800487e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004882:	e312      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800488a:	e30e      	b.n	8004eaa <UART_SetConfig+0x7aa>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a6b      	ldr	r2, [pc, #428]	; (8004a40 <UART_SetConfig+0x340>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d130      	bne.n	80048f8 <UART_SetConfig+0x1f8>
 8004896:	4b69      	ldr	r3, [pc, #420]	; (8004a3c <UART_SetConfig+0x33c>)
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d826      	bhi.n	80048f0 <UART_SetConfig+0x1f0>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0x1a8>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048c1 	.word	0x080048c1
 80048ac:	080048c9 	.word	0x080048c9
 80048b0:	080048d1 	.word	0x080048d1
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048e9 	.word	0x080048e9
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c6:	e2f0      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80048c8:	2304      	movs	r3, #4
 80048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ce:	e2ec      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80048d0:	2308      	movs	r3, #8
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d6:	e2e8      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048de:	e2e4      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80048e0:	2320      	movs	r3, #32
 80048e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e6:	e2e0      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80048e8:	2340      	movs	r3, #64	; 0x40
 80048ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ee:	e2dc      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f6:	e2d8      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a51      	ldr	r2, [pc, #324]	; (8004a44 <UART_SetConfig+0x344>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d130      	bne.n	8004964 <UART_SetConfig+0x264>
 8004902:	4b4e      	ldr	r3, [pc, #312]	; (8004a3c <UART_SetConfig+0x33c>)
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b05      	cmp	r3, #5
 800490c:	d826      	bhi.n	800495c <UART_SetConfig+0x25c>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <UART_SetConfig+0x214>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	0800492d 	.word	0x0800492d
 8004918:	08004935 	.word	0x08004935
 800491c:	0800493d 	.word	0x0800493d
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	2300      	movs	r3, #0
 800492e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004932:	e2ba      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004934:	2304      	movs	r3, #4
 8004936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493a:	e2b6      	b.n	8004eaa <UART_SetConfig+0x7aa>
 800493c:	2308      	movs	r3, #8
 800493e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004942:	e2b2      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004944:	2310      	movs	r3, #16
 8004946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494a:	e2ae      	b.n	8004eaa <UART_SetConfig+0x7aa>
 800494c:	2320      	movs	r3, #32
 800494e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004952:	e2aa      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004954:	2340      	movs	r3, #64	; 0x40
 8004956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800495a:	e2a6      	b.n	8004eaa <UART_SetConfig+0x7aa>
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004962:	e2a2      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a37      	ldr	r2, [pc, #220]	; (8004a48 <UART_SetConfig+0x348>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d130      	bne.n	80049d0 <UART_SetConfig+0x2d0>
 800496e:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <UART_SetConfig+0x33c>)
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b05      	cmp	r3, #5
 8004978:	d826      	bhi.n	80049c8 <UART_SetConfig+0x2c8>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <UART_SetConfig+0x280>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	08004999 	.word	0x08004999
 8004984:	080049a1 	.word	0x080049a1
 8004988:	080049a9 	.word	0x080049a9
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800499e:	e284      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049a6:	e280      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ae:	e27c      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b6:	e278      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80049b8:	2320      	movs	r3, #32
 80049ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049be:	e274      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80049c0:	2340      	movs	r3, #64	; 0x40
 80049c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049c6:	e270      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ce:	e26c      	b.n	8004eaa <UART_SetConfig+0x7aa>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <UART_SetConfig+0x34c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d142      	bne.n	8004a60 <UART_SetConfig+0x360>
 80049da:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <UART_SetConfig+0x33c>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d838      	bhi.n	8004a58 <UART_SetConfig+0x358>
 80049e6:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <UART_SetConfig+0x2ec>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a05 	.word	0x08004a05
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	08004a15 	.word	0x08004a15
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a25 	.word	0x08004a25
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0a:	e24e      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a12:	e24a      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004a14:	2308      	movs	r3, #8
 8004a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1a:	e246      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a22:	e242      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004a24:	2320      	movs	r3, #32
 8004a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2a:	e23e      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004a2c:	cfff69f3 	.word	0xcfff69f3
 8004a30:	58000c00 	.word	0x58000c00
 8004a34:	11fff4ff 	.word	0x11fff4ff
 8004a38:	40011000 	.word	0x40011000
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	40004400 	.word	0x40004400
 8004a44:	40004800 	.word	0x40004800
 8004a48:	40004c00 	.word	0x40004c00
 8004a4c:	40005000 	.word	0x40005000
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a56:	e228      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a5e:	e224      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4ab1      	ldr	r2, [pc, #708]	; (8004d2c <UART_SetConfig+0x62c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d176      	bne.n	8004b58 <UART_SetConfig+0x458>
 8004a6a:	4bb1      	ldr	r3, [pc, #708]	; (8004d30 <UART_SetConfig+0x630>)
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a72:	2b28      	cmp	r3, #40	; 0x28
 8004a74:	d86c      	bhi.n	8004b50 <UART_SetConfig+0x450>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x37c>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004b21 	.word	0x08004b21
 8004a80:	08004b51 	.word	0x08004b51
 8004a84:	08004b51 	.word	0x08004b51
 8004a88:	08004b51 	.word	0x08004b51
 8004a8c:	08004b51 	.word	0x08004b51
 8004a90:	08004b51 	.word	0x08004b51
 8004a94:	08004b51 	.word	0x08004b51
 8004a98:	08004b51 	.word	0x08004b51
 8004a9c:	08004b29 	.word	0x08004b29
 8004aa0:	08004b51 	.word	0x08004b51
 8004aa4:	08004b51 	.word	0x08004b51
 8004aa8:	08004b51 	.word	0x08004b51
 8004aac:	08004b51 	.word	0x08004b51
 8004ab0:	08004b51 	.word	0x08004b51
 8004ab4:	08004b51 	.word	0x08004b51
 8004ab8:	08004b51 	.word	0x08004b51
 8004abc:	08004b31 	.word	0x08004b31
 8004ac0:	08004b51 	.word	0x08004b51
 8004ac4:	08004b51 	.word	0x08004b51
 8004ac8:	08004b51 	.word	0x08004b51
 8004acc:	08004b51 	.word	0x08004b51
 8004ad0:	08004b51 	.word	0x08004b51
 8004ad4:	08004b51 	.word	0x08004b51
 8004ad8:	08004b51 	.word	0x08004b51
 8004adc:	08004b39 	.word	0x08004b39
 8004ae0:	08004b51 	.word	0x08004b51
 8004ae4:	08004b51 	.word	0x08004b51
 8004ae8:	08004b51 	.word	0x08004b51
 8004aec:	08004b51 	.word	0x08004b51
 8004af0:	08004b51 	.word	0x08004b51
 8004af4:	08004b51 	.word	0x08004b51
 8004af8:	08004b51 	.word	0x08004b51
 8004afc:	08004b41 	.word	0x08004b41
 8004b00:	08004b51 	.word	0x08004b51
 8004b04:	08004b51 	.word	0x08004b51
 8004b08:	08004b51 	.word	0x08004b51
 8004b0c:	08004b51 	.word	0x08004b51
 8004b10:	08004b51 	.word	0x08004b51
 8004b14:	08004b51 	.word	0x08004b51
 8004b18:	08004b51 	.word	0x08004b51
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b26:	e1c0      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b2e:	e1bc      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b30:	2308      	movs	r3, #8
 8004b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b36:	e1b8      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b3e:	e1b4      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b40:	2320      	movs	r3, #32
 8004b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b46:	e1b0      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b48:	2340      	movs	r3, #64	; 0x40
 8004b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b4e:	e1ac      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b56:	e1a8      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a75      	ldr	r2, [pc, #468]	; (8004d34 <UART_SetConfig+0x634>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d130      	bne.n	8004bc4 <UART_SetConfig+0x4c4>
 8004b62:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <UART_SetConfig+0x630>)
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d826      	bhi.n	8004bbc <UART_SetConfig+0x4bc>
 8004b6e:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <UART_SetConfig+0x474>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004b8d 	.word	0x08004b8d
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	08004b9d 	.word	0x08004b9d
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b92:	e18a      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b94:	2304      	movs	r3, #4
 8004b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9a:	e186      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba2:	e182      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004baa:	e17e      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004bac:	2320      	movs	r3, #32
 8004bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bb2:	e17a      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004bb4:	2340      	movs	r3, #64	; 0x40
 8004bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bba:	e176      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc2:	e172      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5b      	ldr	r2, [pc, #364]	; (8004d38 <UART_SetConfig+0x638>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d130      	bne.n	8004c30 <UART_SetConfig+0x530>
 8004bce:	4b58      	ldr	r3, [pc, #352]	; (8004d30 <UART_SetConfig+0x630>)
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d826      	bhi.n	8004c28 <UART_SetConfig+0x528>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x4e0>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004bf9 	.word	0x08004bf9
 8004be4:	08004c01 	.word	0x08004c01
 8004be8:	08004c09 	.word	0x08004c09
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bfe:	e154      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004c00:	2304      	movs	r3, #4
 8004c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c06:	e150      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0e:	e14c      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c16:	e148      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004c18:	2320      	movs	r3, #32
 8004c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c1e:	e144      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c26:	e140      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c2e:	e13c      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a41      	ldr	r2, [pc, #260]	; (8004d3c <UART_SetConfig+0x63c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f040 8082 	bne.w	8004d40 <UART_SetConfig+0x640>
 8004c3c:	4b3c      	ldr	r3, [pc, #240]	; (8004d30 <UART_SetConfig+0x630>)
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c44:	2b28      	cmp	r3, #40	; 0x28
 8004c46:	d86d      	bhi.n	8004d24 <UART_SetConfig+0x624>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x550>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004cf5 	.word	0x08004cf5
 8004c54:	08004d25 	.word	0x08004d25
 8004c58:	08004d25 	.word	0x08004d25
 8004c5c:	08004d25 	.word	0x08004d25
 8004c60:	08004d25 	.word	0x08004d25
 8004c64:	08004d25 	.word	0x08004d25
 8004c68:	08004d25 	.word	0x08004d25
 8004c6c:	08004d25 	.word	0x08004d25
 8004c70:	08004cfd 	.word	0x08004cfd
 8004c74:	08004d25 	.word	0x08004d25
 8004c78:	08004d25 	.word	0x08004d25
 8004c7c:	08004d25 	.word	0x08004d25
 8004c80:	08004d25 	.word	0x08004d25
 8004c84:	08004d25 	.word	0x08004d25
 8004c88:	08004d25 	.word	0x08004d25
 8004c8c:	08004d25 	.word	0x08004d25
 8004c90:	08004d05 	.word	0x08004d05
 8004c94:	08004d25 	.word	0x08004d25
 8004c98:	08004d25 	.word	0x08004d25
 8004c9c:	08004d25 	.word	0x08004d25
 8004ca0:	08004d25 	.word	0x08004d25
 8004ca4:	08004d25 	.word	0x08004d25
 8004ca8:	08004d25 	.word	0x08004d25
 8004cac:	08004d25 	.word	0x08004d25
 8004cb0:	08004d0d 	.word	0x08004d0d
 8004cb4:	08004d25 	.word	0x08004d25
 8004cb8:	08004d25 	.word	0x08004d25
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004d25 	.word	0x08004d25
 8004cc4:	08004d25 	.word	0x08004d25
 8004cc8:	08004d25 	.word	0x08004d25
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d25 	.word	0x08004d25
 8004cd8:	08004d25 	.word	0x08004d25
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	08004d25 	.word	0x08004d25
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfa:	e0d6      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d02:	e0d2      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004d04:	2308      	movs	r3, #8
 8004d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0a:	e0ce      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d12:	e0ca      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004d14:	2320      	movs	r3, #32
 8004d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d1a:	e0c6      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004d1c:	2340      	movs	r3, #64	; 0x40
 8004d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d22:	e0c2      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d2a:	e0be      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004d2c:	40011400 	.word	0x40011400
 8004d30:	58024400 	.word	0x58024400
 8004d34:	40007800 	.word	0x40007800
 8004d38:	40007c00 	.word	0x40007c00
 8004d3c:	40011800 	.word	0x40011800
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4aad      	ldr	r2, [pc, #692]	; (8004ffc <UART_SetConfig+0x8fc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d176      	bne.n	8004e38 <UART_SetConfig+0x738>
 8004d4a:	4bad      	ldr	r3, [pc, #692]	; (8005000 <UART_SetConfig+0x900>)
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d52:	2b28      	cmp	r3, #40	; 0x28
 8004d54:	d86c      	bhi.n	8004e30 <UART_SetConfig+0x730>
 8004d56:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0x65c>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004e01 	.word	0x08004e01
 8004d60:	08004e31 	.word	0x08004e31
 8004d64:	08004e31 	.word	0x08004e31
 8004d68:	08004e31 	.word	0x08004e31
 8004d6c:	08004e31 	.word	0x08004e31
 8004d70:	08004e31 	.word	0x08004e31
 8004d74:	08004e31 	.word	0x08004e31
 8004d78:	08004e31 	.word	0x08004e31
 8004d7c:	08004e09 	.word	0x08004e09
 8004d80:	08004e31 	.word	0x08004e31
 8004d84:	08004e31 	.word	0x08004e31
 8004d88:	08004e31 	.word	0x08004e31
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e11 	.word	0x08004e11
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e31 	.word	0x08004e31
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e31 	.word	0x08004e31
 8004db4:	08004e31 	.word	0x08004e31
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e19 	.word	0x08004e19
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004e31 	.word	0x08004e31
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e31 	.word	0x08004e31
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004e31 	.word	0x08004e31
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e06:	e050      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0e:	e04c      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e16:	e048      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1e:	e044      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e20:	2320      	movs	r3, #32
 8004e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e26:	e040      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e2e:	e03c      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e36:	e038      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a71      	ldr	r2, [pc, #452]	; (8005004 <UART_SetConfig+0x904>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d130      	bne.n	8004ea4 <UART_SetConfig+0x7a4>
 8004e42:	4b6f      	ldr	r3, [pc, #444]	; (8005000 <UART_SetConfig+0x900>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d826      	bhi.n	8004e9c <UART_SetConfig+0x79c>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0x754>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e6d 	.word	0x08004e6d
 8004e58:	08004e75 	.word	0x08004e75
 8004e5c:	08004e7d 	.word	0x08004e7d
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e72:	e01a      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e74:	2304      	movs	r3, #4
 8004e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e7a:	e016      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e82:	e012      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e84:	2310      	movs	r3, #16
 8004e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e8a:	e00e      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e92:	e00a      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e9a:	e006      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea2:	e002      	b.n	8004eaa <UART_SetConfig+0x7aa>
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a55      	ldr	r2, [pc, #340]	; (8005004 <UART_SetConfig+0x904>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	f040 80f0 	bne.w	8005096 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	dc46      	bgt.n	8004f4c <UART_SetConfig+0x84c>
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	db75      	blt.n	8004fae <UART_SetConfig+0x8ae>
 8004ec2:	3b02      	subs	r3, #2
 8004ec4:	2b1e      	cmp	r3, #30
 8004ec6:	d872      	bhi.n	8004fae <UART_SetConfig+0x8ae>
 8004ec8:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <UART_SetConfig+0x7d0>)
 8004eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ece:	bf00      	nop
 8004ed0:	08004f53 	.word	0x08004f53
 8004ed4:	08004faf 	.word	0x08004faf
 8004ed8:	08004f5b 	.word	0x08004f5b
 8004edc:	08004faf 	.word	0x08004faf
 8004ee0:	08004faf 	.word	0x08004faf
 8004ee4:	08004faf 	.word	0x08004faf
 8004ee8:	08004f6b 	.word	0x08004f6b
 8004eec:	08004faf 	.word	0x08004faf
 8004ef0:	08004faf 	.word	0x08004faf
 8004ef4:	08004faf 	.word	0x08004faf
 8004ef8:	08004faf 	.word	0x08004faf
 8004efc:	08004faf 	.word	0x08004faf
 8004f00:	08004faf 	.word	0x08004faf
 8004f04:	08004faf 	.word	0x08004faf
 8004f08:	08004f7b 	.word	0x08004f7b
 8004f0c:	08004faf 	.word	0x08004faf
 8004f10:	08004faf 	.word	0x08004faf
 8004f14:	08004faf 	.word	0x08004faf
 8004f18:	08004faf 	.word	0x08004faf
 8004f1c:	08004faf 	.word	0x08004faf
 8004f20:	08004faf 	.word	0x08004faf
 8004f24:	08004faf 	.word	0x08004faf
 8004f28:	08004faf 	.word	0x08004faf
 8004f2c:	08004faf 	.word	0x08004faf
 8004f30:	08004faf 	.word	0x08004faf
 8004f34:	08004faf 	.word	0x08004faf
 8004f38:	08004faf 	.word	0x08004faf
 8004f3c:	08004faf 	.word	0x08004faf
 8004f40:	08004faf 	.word	0x08004faf
 8004f44:	08004faf 	.word	0x08004faf
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d02a      	beq.n	8004fa6 <UART_SetConfig+0x8a6>
 8004f50:	e02d      	b.n	8004fae <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f52:	f7fe fb1f 	bl	8003594 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f58:	e02f      	b.n	8004fba <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fb2e 	bl	80035c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f68:	e027      	b.n	8004fba <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fc7a 	bl	8003868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f78:	e01f      	b.n	8004fba <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f7a:	4b21      	ldr	r3, [pc, #132]	; (8005000 <UART_SetConfig+0x900>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f86:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <UART_SetConfig+0x900>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	08db      	lsrs	r3, r3, #3
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <UART_SetConfig+0x908>)
 8004f92:	fa22 f303 	lsr.w	r3, r2, r3
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f98:	e00f      	b.n	8004fba <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <UART_SetConfig+0x908>)
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f9e:	e00c      	b.n	8004fba <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	; (800500c <UART_SetConfig+0x90c>)
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fa4:	e009      	b.n	8004fba <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fac:	e005      	b.n	8004fba <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 81e6 	beq.w	800538e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <UART_SetConfig+0x910>)
 8004fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d305      	bcc.n	8004ff2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d910      	bls.n	8005014 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ff8:	e1c9      	b.n	800538e <UART_SetConfig+0xc8e>
 8004ffa:	bf00      	nop
 8004ffc:	40011c00 	.word	0x40011c00
 8005000:	58024400 	.word	0x58024400
 8005004:	58000c00 	.word	0x58000c00
 8005008:	03d09000 	.word	0x03d09000
 800500c:	003d0900 	.word	0x003d0900
 8005010:	080094e0 	.word	0x080094e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	4618      	mov	r0, r3
 8005018:	f04f 0100 	mov.w	r1, #0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	4ac1      	ldr	r2, [pc, #772]	; (8005328 <UART_SetConfig+0xc28>)
 8005022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005026:	b29a      	uxth	r2, r3
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	f7fb f9b0 	bl	8000390 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	020b      	lsls	r3, r1, #8
 8005042:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005046:	0202      	lsls	r2, r0, #8
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	6849      	ldr	r1, [r1, #4]
 800504c:	0849      	lsrs	r1, r1, #1
 800504e:	4608      	mov	r0, r1
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	1814      	adds	r4, r2, r0
 8005056:	eb43 0501 	adc.w	r5, r3, r1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	461a      	mov	r2, r3
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	f7fb f992 	bl	8000390 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507a:	d308      	bcc.n	800508e <UART_SetConfig+0x98e>
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005082:	d204      	bcs.n	800508e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800508a:	60da      	str	r2, [r3, #12]
 800508c:	e17f      	b.n	800538e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005094:	e17b      	b.n	800538e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509e:	f040 80bd 	bne.w	800521c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80050a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	dc48      	bgt.n	800513c <UART_SetConfig+0xa3c>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	db7b      	blt.n	80051a6 <UART_SetConfig+0xaa6>
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d879      	bhi.n	80051a6 <UART_SetConfig+0xaa6>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x9b8>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	08005143 	.word	0x08005143
 80050bc:	0800514b 	.word	0x0800514b
 80050c0:	080051a7 	.word	0x080051a7
 80050c4:	080051a7 	.word	0x080051a7
 80050c8:	08005153 	.word	0x08005153
 80050cc:	080051a7 	.word	0x080051a7
 80050d0:	080051a7 	.word	0x080051a7
 80050d4:	080051a7 	.word	0x080051a7
 80050d8:	08005163 	.word	0x08005163
 80050dc:	080051a7 	.word	0x080051a7
 80050e0:	080051a7 	.word	0x080051a7
 80050e4:	080051a7 	.word	0x080051a7
 80050e8:	080051a7 	.word	0x080051a7
 80050ec:	080051a7 	.word	0x080051a7
 80050f0:	080051a7 	.word	0x080051a7
 80050f4:	080051a7 	.word	0x080051a7
 80050f8:	08005173 	.word	0x08005173
 80050fc:	080051a7 	.word	0x080051a7
 8005100:	080051a7 	.word	0x080051a7
 8005104:	080051a7 	.word	0x080051a7
 8005108:	080051a7 	.word	0x080051a7
 800510c:	080051a7 	.word	0x080051a7
 8005110:	080051a7 	.word	0x080051a7
 8005114:	080051a7 	.word	0x080051a7
 8005118:	080051a7 	.word	0x080051a7
 800511c:	080051a7 	.word	0x080051a7
 8005120:	080051a7 	.word	0x080051a7
 8005124:	080051a7 	.word	0x080051a7
 8005128:	080051a7 	.word	0x080051a7
 800512c:	080051a7 	.word	0x080051a7
 8005130:	080051a7 	.word	0x080051a7
 8005134:	080051a7 	.word	0x080051a7
 8005138:	08005199 	.word	0x08005199
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d02e      	beq.n	800519e <UART_SetConfig+0xa9e>
 8005140:	e031      	b.n	80051a6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005142:	f7fd faad 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 8005146:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005148:	e033      	b.n	80051b2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800514a:	f7fd fabf 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 800514e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005150:	e02f      	b.n	80051b2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	4618      	mov	r0, r3
 8005158:	f7fe fa32 	bl	80035c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005160:	e027      	b.n	80051b2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fb7e 	bl	8003868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005170:	e01f      	b.n	80051b2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005172:	4b6e      	ldr	r3, [pc, #440]	; (800532c <UART_SetConfig+0xc2c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800517e:	4b6b      	ldr	r3, [pc, #428]	; (800532c <UART_SetConfig+0xc2c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	08db      	lsrs	r3, r3, #3
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	4a69      	ldr	r2, [pc, #420]	; (8005330 <UART_SetConfig+0xc30>)
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005190:	e00f      	b.n	80051b2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005192:	4b67      	ldr	r3, [pc, #412]	; (8005330 <UART_SetConfig+0xc30>)
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005196:	e00c      	b.n	80051b2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005198:	4b66      	ldr	r3, [pc, #408]	; (8005334 <UART_SetConfig+0xc34>)
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800519c:	e009      	b.n	80051b2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051a4:	e005      	b.n	80051b2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80051b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80ea 	beq.w	800538e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	4a5a      	ldr	r2, [pc, #360]	; (8005328 <UART_SetConfig+0xc28>)
 80051c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051cc:	005a      	lsls	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	2b0f      	cmp	r3, #15
 80051e4:	d916      	bls.n	8005214 <UART_SetConfig+0xb14>
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ec:	d212      	bcs.n	8005214 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f023 030f 	bic.w	r3, r3, #15
 80051f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	b29a      	uxth	r2, r3
 8005204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005206:	4313      	orrs	r3, r2
 8005208:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	e0bc      	b.n	800538e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800521a:	e0b8      	b.n	800538e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800521c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005220:	2b20      	cmp	r3, #32
 8005222:	dc4b      	bgt.n	80052bc <UART_SetConfig+0xbbc>
 8005224:	2b00      	cmp	r3, #0
 8005226:	f2c0 8087 	blt.w	8005338 <UART_SetConfig+0xc38>
 800522a:	2b20      	cmp	r3, #32
 800522c:	f200 8084 	bhi.w	8005338 <UART_SetConfig+0xc38>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <UART_SetConfig+0xb38>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	080052c3 	.word	0x080052c3
 800523c:	080052cb 	.word	0x080052cb
 8005240:	08005339 	.word	0x08005339
 8005244:	08005339 	.word	0x08005339
 8005248:	080052d3 	.word	0x080052d3
 800524c:	08005339 	.word	0x08005339
 8005250:	08005339 	.word	0x08005339
 8005254:	08005339 	.word	0x08005339
 8005258:	080052e3 	.word	0x080052e3
 800525c:	08005339 	.word	0x08005339
 8005260:	08005339 	.word	0x08005339
 8005264:	08005339 	.word	0x08005339
 8005268:	08005339 	.word	0x08005339
 800526c:	08005339 	.word	0x08005339
 8005270:	08005339 	.word	0x08005339
 8005274:	08005339 	.word	0x08005339
 8005278:	080052f3 	.word	0x080052f3
 800527c:	08005339 	.word	0x08005339
 8005280:	08005339 	.word	0x08005339
 8005284:	08005339 	.word	0x08005339
 8005288:	08005339 	.word	0x08005339
 800528c:	08005339 	.word	0x08005339
 8005290:	08005339 	.word	0x08005339
 8005294:	08005339 	.word	0x08005339
 8005298:	08005339 	.word	0x08005339
 800529c:	08005339 	.word	0x08005339
 80052a0:	08005339 	.word	0x08005339
 80052a4:	08005339 	.word	0x08005339
 80052a8:	08005339 	.word	0x08005339
 80052ac:	08005339 	.word	0x08005339
 80052b0:	08005339 	.word	0x08005339
 80052b4:	08005339 	.word	0x08005339
 80052b8:	08005319 	.word	0x08005319
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d02e      	beq.n	800531e <UART_SetConfig+0xc1e>
 80052c0:	e03a      	b.n	8005338 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c2:	f7fd f9ed 	bl	80026a0 <HAL_RCC_GetPCLK1Freq>
 80052c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052c8:	e03c      	b.n	8005344 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ca:	f7fd f9ff 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 80052ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052d0:	e038      	b.n	8005344 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052d2:	f107 0314 	add.w	r3, r7, #20
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe f972 	bl	80035c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e0:	e030      	b.n	8005344 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fabe 	bl	8003868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052f0:	e028      	b.n	8005344 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f2:	4b0e      	ldr	r3, [pc, #56]	; (800532c <UART_SetConfig+0xc2c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <UART_SetConfig+0xc2c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	08db      	lsrs	r3, r3, #3
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	4a09      	ldr	r2, [pc, #36]	; (8005330 <UART_SetConfig+0xc30>)
 800530a:	fa22 f303 	lsr.w	r3, r2, r3
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005310:	e018      	b.n	8005344 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <UART_SetConfig+0xc30>)
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005316:	e015      	b.n	8005344 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <UART_SetConfig+0xc34>)
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800531c:	e012      	b.n	8005344 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005324:	e00e      	b.n	8005344 <UART_SetConfig+0xc44>
 8005326:	bf00      	nop
 8005328:	080094e0 	.word	0x080094e0
 800532c:	58024400 	.word	0x58024400
 8005330:	03d09000 	.word	0x03d09000
 8005334:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005342:	bf00      	nop
    }

    if (pclk != 0U)
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d021      	beq.n	800538e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <UART_SetConfig+0xcb8>)
 8005350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005354:	461a      	mov	r2, r3
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	fbb3 f2f2 	udiv	r2, r3, r2
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b0f      	cmp	r3, #15
 8005372:	d909      	bls.n	8005388 <UART_SetConfig+0xc88>
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537a:	d205      	bcs.n	8005388 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	e002      	b.n	800538e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3738      	adds	r7, #56	; 0x38
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bdb0      	pop	{r4, r5, r7, pc}
 80053b6:	bf00      	nop
 80053b8:	080094e0 	.word	0x080094e0

080053bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ba:	d10a      	bne.n	80054d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005510:	f7fb fe38 	bl	8001184 <HAL_GetTick>
 8005514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d10e      	bne.n	8005542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f82f 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e025      	b.n	800558e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b04      	cmp	r3, #4
 800554e:	d10e      	bne.n	800556e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f819 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e00f      	b.n	800558e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b09c      	sub	sp, #112	; 0x70
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	4613      	mov	r3, r2
 80055a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a6:	e0a9      	b.n	80056fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ae:	f000 80a5 	beq.w	80056fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b2:	f7fb fde7 	bl	8001184 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055be:	429a      	cmp	r2, r3
 80055c0:	d302      	bcc.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80055c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d140      	bne.n	800564a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055dc:	667b      	str	r3, [r7, #100]	; 0x64
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e6      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	663b      	str	r3, [r7, #96]	; 0x60
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800561a:	64ba      	str	r2, [r7, #72]	; 0x48
 800561c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e069      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d051      	beq.n	80056fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005666:	d149      	bne.n	80056fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005670:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
 8005692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e6      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	613b      	str	r3, [r7, #16]
   return(result);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056c4:	623a      	str	r2, [r7, #32]
 80056c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e010      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	429a      	cmp	r2, r3
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	429a      	cmp	r2, r3
 8005718:	f43f af46 	beq.w	80055a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3770      	adds	r7, #112	; 0x70
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_UARTEx_DisableFifoMode+0x16>
 8005738:	2302      	movs	r3, #2
 800573a:	e027      	b.n	800578c <HAL_UARTEx_DisableFifoMode+0x66>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2224      	movs	r2, #36	; 0x24
 8005748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800576a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e02d      	b.n	800580c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	; 0x24
 80057bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0201 	bic.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f84f 	bl	8005890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005828:	2302      	movs	r3, #2
 800582a:	e02d      	b.n	8005888 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	; 0x24
 8005838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0201 	bic.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f811 	bl	8005890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058b0:	e031      	b.n	8005916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058b2:	2310      	movs	r3, #16
 80058b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058b6:	2310      	movs	r3, #16
 80058b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	0e5b      	lsrs	r3, r3, #25
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	0f5b      	lsrs	r3, r3, #29
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	7b3a      	ldrb	r2, [r7, #12]
 80058de:	4911      	ldr	r1, [pc, #68]	; (8005924 <UARTEx_SetNbDataToProcess+0x94>)
 80058e0:	5c8a      	ldrb	r2, [r1, r2]
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058e6:	7b3a      	ldrb	r2, [r7, #12]
 80058e8:	490f      	ldr	r1, [pc, #60]	; (8005928 <UARTEx_SetNbDataToProcess+0x98>)
 80058ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	7b7a      	ldrb	r2, [r7, #13]
 80058fc:	4909      	ldr	r1, [pc, #36]	; (8005924 <UARTEx_SetNbDataToProcess+0x94>)
 80058fe:	5c8a      	ldrb	r2, [r1, r2]
 8005900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005904:	7b7a      	ldrb	r2, [r7, #13]
 8005906:	4908      	ldr	r1, [pc, #32]	; (8005928 <UARTEx_SetNbDataToProcess+0x98>)
 8005908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800590a:	fb93 f3f2 	sdiv	r3, r3, r2
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	080094f8 	.word	0x080094f8
 8005928:	08009500 	.word	0x08009500

0800592c <__NVIC_SetPriority>:
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800593c:	2b00      	cmp	r3, #0
 800593e:	db0a      	blt.n	8005956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	b2da      	uxtb	r2, r3
 8005944:	490c      	ldr	r1, [pc, #48]	; (8005978 <__NVIC_SetPriority+0x4c>)
 8005946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800594a:	0112      	lsls	r2, r2, #4
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	440b      	add	r3, r1
 8005950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005954:	e00a      	b.n	800596c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4908      	ldr	r1, [pc, #32]	; (800597c <__NVIC_SetPriority+0x50>)
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	3b04      	subs	r3, #4
 8005964:	0112      	lsls	r2, r2, #4
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	440b      	add	r3, r1
 800596a:	761a      	strb	r2, [r3, #24]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	e000e100 	.word	0xe000e100
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <SysTick_Handler+0x1c>)
 8005986:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005988:	f001 ff12 	bl	80077b0 <xTaskGetSchedulerState>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d001      	beq.n	8005996 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005992:	f002 fcf9 	bl	8008388 <xPortSysTickHandler>
  }
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	e000e010 	.word	0xe000e010

080059a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059a4:	2100      	movs	r1, #0
 80059a6:	f06f 0004 	mvn.w	r0, #4
 80059aa:	f7ff ffbf 	bl	800592c <__NVIC_SetPriority>
#endif
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ba:	f3ef 8305 	mrs	r3, IPSR
 80059be:	603b      	str	r3, [r7, #0]
  return(result);
 80059c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80059c6:	f06f 0305 	mvn.w	r3, #5
 80059ca:	607b      	str	r3, [r7, #4]
 80059cc:	e00c      	b.n	80059e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <osKernelInitialize+0x44>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <osKernelInitialize+0x44>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059dc:	2300      	movs	r3, #0
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	e002      	b.n	80059e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059e8:	687b      	ldr	r3, [r7, #4]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	24000098 	.word	0x24000098

080059fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a02:	f3ef 8305 	mrs	r3, IPSR
 8005a06:	603b      	str	r3, [r7, #0]
  return(result);
 8005a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a0e:	f06f 0305 	mvn.w	r3, #5
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	e010      	b.n	8005a38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <osKernelStart+0x48>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d109      	bne.n	8005a32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a1e:	f7ff ffbf 	bl	80059a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <osKernelStart+0x48>)
 8005a24:	2202      	movs	r2, #2
 8005a26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a28:	f001 fa66 	bl	8006ef8 <vTaskStartScheduler>
      stat = osOK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	e002      	b.n	8005a38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a38:	687b      	ldr	r3, [r7, #4]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	24000098 	.word	0x24000098

08005a48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08e      	sub	sp, #56	; 0x38
 8005a4c:	af04      	add	r7, sp, #16
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a58:	f3ef 8305 	mrs	r3, IPSR
 8005a5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d17e      	bne.n	8005b62 <osThreadNew+0x11a>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d07b      	beq.n	8005b62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a6a:	2380      	movs	r3, #128	; 0x80
 8005a6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a6e:	2318      	movs	r3, #24
 8005a70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d045      	beq.n	8005b0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <osThreadNew+0x48>
        name = attr->name;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <osThreadNew+0x6e>
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b38      	cmp	r3, #56	; 0x38
 8005aa8:	d805      	bhi.n	8005ab6 <osThreadNew+0x6e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <osThreadNew+0x72>
        return (NULL);
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e054      	b.n	8005b64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	089b      	lsrs	r3, r3, #2
 8005ac8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <osThreadNew+0xa8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2bbb      	cmp	r3, #187	; 0xbb
 8005ad8:	d90a      	bls.n	8005af0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d006      	beq.n	8005af0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <osThreadNew+0xa8>
        mem = 1;
 8005aea:	2301      	movs	r3, #1
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e010      	b.n	8005b12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10c      	bne.n	8005b12 <osThreadNew+0xca>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <osThreadNew+0xca>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <osThreadNew+0xca>
          mem = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e001      	b.n	8005b12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d110      	bne.n	8005b3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b20:	9202      	str	r2, [sp, #8]
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fff6 	bl	8006b20 <xTaskCreateStatic>
 8005b34:	4603      	mov	r3, r0
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	e013      	b.n	8005b62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d110      	bne.n	8005b62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f107 0310 	add.w	r3, r7, #16
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f001 f841 	bl	8006bda <xTaskCreate>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d001      	beq.n	8005b62 <osThreadNew+0x11a>
            hTask = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b62:	693b      	ldr	r3, [r7, #16]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3728      	adds	r7, #40	; 0x28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b74:	f3ef 8305 	mrs	r3, IPSR
 8005b78:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <osDelay+0x1c>
    stat = osErrorISR;
 8005b80:	f06f 0305 	mvn.w	r3, #5
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e007      	b.n	8005b98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 f97c 	bl	8006e90 <vTaskDelay>
    }
  }

  return (stat);
 8005b98:	68fb      	ldr	r3, [r7, #12]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b08a      	sub	sp, #40	; 0x28
 8005ba6:	af02      	add	r7, sp, #8
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bb2:	f3ef 8305 	mrs	r3, IPSR
 8005bb6:	613b      	str	r3, [r7, #16]
  return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d15f      	bne.n	8005c7e <osMessageQueueNew+0xdc>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d05c      	beq.n	8005c7e <osMessageQueueNew+0xdc>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d059      	beq.n	8005c7e <osMessageQueueNew+0xdc>
    mem = -1;
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d029      	beq.n	8005c2a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d012      	beq.n	8005c04 <osMessageQueueNew+0x62>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b4f      	cmp	r3, #79	; 0x4f
 8005be4:	d90e      	bls.n	8005c04 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <osMessageQueueNew+0x62>
        mem = 1;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e014      	b.n	8005c2e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d110      	bne.n	8005c2e <osMessageQueueNew+0x8c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10c      	bne.n	8005c2e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d108      	bne.n	8005c2e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d104      	bne.n	8005c2e <osMessageQueueNew+0x8c>
          mem = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	e001      	b.n	8005c2e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d10b      	bne.n	8005c4c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	9100      	str	r1, [sp, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fa2e 	bl	80060a4 <xQueueGenericCreateStatic>
 8005c48:	61f8      	str	r0, [r7, #28]
 8005c4a:	e008      	b.n	8005c5e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005c52:	2200      	movs	r2, #0
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fa9c 	bl	8006194 <xQueueGenericCreate>
 8005c5c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e001      	b.n	8005c76 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c76:	6979      	ldr	r1, [r7, #20]
 8005c78:	69f8      	ldr	r0, [r7, #28]
 8005c7a:	f000 fef3 	bl	8006a64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c7e:	69fb      	ldr	r3, [r7, #28]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca0:	f3ef 8305 	mrs	r3, IPSR
 8005ca4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d028      	beq.n	8005cfe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <osMessageQueuePut+0x36>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <osMessageQueuePut+0x36>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005cbe:	f06f 0303 	mvn.w	r3, #3
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	e038      	b.n	8005d38 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005cca:	f107 0210 	add.w	r2, r7, #16
 8005cce:	2300      	movs	r3, #0
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	69b8      	ldr	r0, [r7, #24]
 8005cd4:	f000 fbba 	bl	800644c <xQueueGenericSendFromISR>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d003      	beq.n	8005ce6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005cde:	f06f 0302 	mvn.w	r3, #2
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e028      	b.n	8005d38 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d025      	beq.n	8005d38 <osMessageQueuePut+0xb0>
 8005cec:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <osMessageQueuePut+0xbc>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	e01c      	b.n	8005d38 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <osMessageQueuePut+0x82>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005d0a:	f06f 0303 	mvn.w	r3, #3
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	e012      	b.n	8005d38 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d12:	2300      	movs	r3, #0
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	69b8      	ldr	r0, [r7, #24]
 8005d1a:	f000 fa99 	bl	8006250 <xQueueGenericSend>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d009      	beq.n	8005d38 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005d2a:	f06f 0301 	mvn.w	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e002      	b.n	8005d38 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005d32:	f06f 0302 	mvn.w	r3, #2
 8005d36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d38:	69fb      	ldr	r3, [r7, #28]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5e:	f3ef 8305 	mrs	r3, IPSR
 8005d62:	617b      	str	r3, [r7, #20]
  return(result);
 8005d64:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d028      	beq.n	8005dbc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <osMessageQueueGet+0x34>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <osMessageQueueGet+0x34>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d7c:	f06f 0303 	mvn.w	r3, #3
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e037      	b.n	8005df4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	69b8      	ldr	r0, [r7, #24]
 8005d92:	f000 fcd7 	bl	8006744 <xQueueReceiveFromISR>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d003      	beq.n	8005da4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005d9c:	f06f 0302 	mvn.w	r3, #2
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	e027      	b.n	8005df4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d024      	beq.n	8005df4 <osMessageQueueGet+0xac>
 8005daa:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <osMessageQueueGet+0xb8>)
 8005dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	e01b      	b.n	8005df4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <osMessageQueueGet+0x80>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005dc8:	f06f 0303 	mvn.w	r3, #3
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	e011      	b.n	8005df4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	69b8      	ldr	r0, [r7, #24]
 8005dd6:	f000 fbd5 	bl	8006584 <xQueueReceive>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d009      	beq.n	8005df4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005de6:	f06f 0301 	mvn.w	r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	e002      	b.n	8005df4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005dee:	f06f 0302 	mvn.w	r3, #2
 8005df2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005df4:	69fb      	ldr	r3, [r7, #28]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4a06      	ldr	r2, [pc, #24]	; (8005e34 <vApplicationGetIdleTaskMemory+0x30>)
 8005e1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2280      	movs	r2, #128	; 0x80
 8005e20:	601a      	str	r2, [r3, #0]
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	2400009c 	.word	0x2400009c
 8005e34:	24000158 	.word	0x24000158

08005e38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4a06      	ldr	r2, [pc, #24]	; (8005e68 <vApplicationGetTimerTaskMemory+0x30>)
 8005e4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e56:	601a      	str	r2, [r3, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	24000358 	.word	0x24000358
 8005e68:	24000414 	.word	0x24000414

08005e6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f103 0208 	add.w	r2, r3, #8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f103 0208 	add.w	r2, r3, #8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f103 0208 	add.w	r2, r3, #8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f24:	d103      	bne.n	8005f2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e00c      	b.n	8005f48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3308      	adds	r3, #8
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e002      	b.n	8005f3c <vListInsert+0x2e>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d2f6      	bcs.n	8005f36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6892      	ldr	r2, [r2, #8]
 8005f96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6852      	ldr	r2, [r2, #4]
 8005fa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d103      	bne.n	8005fb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	1e5a      	subs	r2, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ffe:	f002 f931 	bl	8008264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	441a      	add	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	3b01      	subs	r3, #1
 8006030:	68f9      	ldr	r1, [r7, #12]
 8006032:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	441a      	add	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	22ff      	movs	r2, #255	; 0xff
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d114      	bne.n	800607e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01a      	beq.n	8006092 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3310      	adds	r3, #16
 8006060:	4618      	mov	r0, r3
 8006062:	f001 f9e3 	bl	800742c <xTaskRemoveFromEventList>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800606c:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <xQueueGenericReset+0xcc>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	e009      	b.n	8006092 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3310      	adds	r3, #16
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fef2 	bl	8005e6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3324      	adds	r3, #36	; 0x24
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff feed 	bl	8005e6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006092:	f002 f917 	bl	80082c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006096:	2301      	movs	r3, #1
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08e      	sub	sp, #56	; 0x38
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <xQueueGenericCreateStatic+0x52>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <xQueueGenericCreateStatic+0x56>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <xQueueGenericCreateStatic+0x58>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	623b      	str	r3, [r7, #32]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <xQueueGenericCreateStatic+0x7e>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <xQueueGenericCreateStatic+0x82>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <xQueueGenericCreateStatic+0x84>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61fb      	str	r3, [r7, #28]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006142:	2350      	movs	r3, #80	; 0x50
 8006144:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b50      	cmp	r3, #80	; 0x50
 800614a:	d00a      	beq.n	8006162 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	61bb      	str	r3, [r7, #24]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006162:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006176:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4613      	mov	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f83f 	bl	8006208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800618c:	4618      	mov	r0, r3
 800618e:	3730      	adds	r7, #48	; 0x30
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <xQueueGenericCreate+0x2a>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	613b      	str	r3, [r7, #16]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3350      	adds	r3, #80	; 0x50
 80061cc:	4618      	mov	r0, r3
 80061ce:	f002 f96b 	bl	80084a8 <pvPortMalloc>
 80061d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d011      	beq.n	80061fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	3350      	adds	r3, #80	; 0x50
 80061e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061ec:	79fa      	ldrb	r2, [r7, #7]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f805 	bl	8006208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e002      	b.n	800622a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006236:	2101      	movs	r1, #1
 8006238:	69b8      	ldr	r0, [r7, #24]
 800623a:	f7ff fecb 	bl	8005fd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	; 0x38
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xQueueGenericSend+0x32>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <xQueueGenericSend+0x40>
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <xQueueGenericSend+0x44>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <xQueueGenericSend+0x46>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <xQueueGenericSend+0x60>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d103      	bne.n	80062be <xQueueGenericSend+0x6e>
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <xQueueGenericSend+0x72>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueGenericSend+0x74>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericSend+0x8e>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	623b      	str	r3, [r7, #32]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062de:	f001 fa67 	bl	80077b0 <xTaskGetSchedulerState>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <xQueueGenericSend+0x9e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <xQueueGenericSend+0xa2>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueGenericSend+0xa4>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xQueueGenericSend+0xbe>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	61fb      	str	r3, [r7, #28]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800630e:	f001 ffa9 	bl	8008264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <xQueueGenericSend+0xd4>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d129      	bne.n	8006378 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800632a:	f000 fa8b 	bl	8006844 <prvCopyDataToQueue>
 800632e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	4618      	mov	r0, r3
 800633e:	f001 f875 	bl	800742c <xTaskRemoveFromEventList>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d013      	beq.n	8006370 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006348:	4b3f      	ldr	r3, [pc, #252]	; (8006448 <xQueueGenericSend+0x1f8>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	e00a      	b.n	8006370 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006360:	4b39      	ldr	r3, [pc, #228]	; (8006448 <xQueueGenericSend+0x1f8>)
 8006362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006370:	f001 ffa8 	bl	80082c4 <vPortExitCritical>
				return pdPASS;
 8006374:	2301      	movs	r3, #1
 8006376:	e063      	b.n	8006440 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800637e:	f001 ffa1 	bl	80082c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006382:	2300      	movs	r3, #0
 8006384:	e05c      	b.n	8006440 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800638c:	f107 0314 	add.w	r3, r7, #20
 8006390:	4618      	mov	r0, r3
 8006392:	f001 f8af 	bl	80074f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006396:	2301      	movs	r3, #1
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800639a:	f001 ff93 	bl	80082c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800639e:	f000 fe1b 	bl	8006fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063a2:	f001 ff5f 	bl	8008264 <vPortEnterCritical>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b2:	d103      	bne.n	80063bc <xQueueGenericSend+0x16c>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c2:	b25b      	sxtb	r3, r3
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c8:	d103      	bne.n	80063d2 <xQueueGenericSend+0x182>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d2:	f001 ff77 	bl	80082c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063d6:	1d3a      	adds	r2, r7, #4
 80063d8:	f107 0314 	add.w	r3, r7, #20
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f89e 	bl	8007520 <xTaskCheckForTimeOut>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d124      	bne.n	8006434 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ec:	f000 fb22 	bl	8006a34 <prvIsQueueFull>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	3310      	adds	r3, #16
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 ffc4 	bl	800738c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006406:	f000 faad 	bl	8006964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800640a:	f000 fdf3 	bl	8006ff4 <xTaskResumeAll>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	f47f af7c 	bne.w	800630e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <xQueueGenericSend+0x1f8>)
 8006418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	e772      	b.n	800630e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800642a:	f000 fa9b 	bl	8006964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800642e:	f000 fde1 	bl	8006ff4 <xTaskResumeAll>
 8006432:	e76c      	b.n	800630e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006436:	f000 fa95 	bl	8006964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800643a:	f000 fddb 	bl	8006ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800643e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006440:	4618      	mov	r0, r3
 8006442:	3738      	adds	r7, #56	; 0x38
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b090      	sub	sp, #64	; 0x40
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <xQueueGenericSendFromISR+0x3c>
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <xQueueGenericSendFromISR+0x40>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <xQueueGenericSendFromISR+0x42>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d103      	bne.n	80064b6 <xQueueGenericSendFromISR+0x6a>
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <xQueueGenericSendFromISR+0x6e>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <xQueueGenericSendFromISR+0x70>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	623b      	str	r3, [r7, #32]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064d6:	f001 ffa7 	bl	8008428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064da:	f3ef 8211 	mrs	r2, BASEPRI
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61fa      	str	r2, [r7, #28]
 80064f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <xQueueGenericSendFromISR+0xbc>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d12f      	bne.n	8006568 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800650e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800651e:	f000 f991 	bl	8006844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006522:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652a:	d112      	bne.n	8006552 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d016      	beq.n	8006562 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f000 ff77 	bl	800742c <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00e      	beq.n	8006562 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00b      	beq.n	8006562 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e007      	b.n	8006562 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006556:	3301      	adds	r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	b25a      	sxtb	r2, r3
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006562:	2301      	movs	r3, #1
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006566:	e001      	b.n	800656c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006568:	2300      	movs	r3, #0
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006576:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800657a:	4618      	mov	r0, r3
 800657c:	3740      	adds	r7, #64	; 0x40
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08c      	sub	sp, #48	; 0x30
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xQueueReceive+0x30>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	623b      	str	r3, [r7, #32]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <xQueueReceive+0x3e>
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueReceive+0x42>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueReceive+0x44>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueReceive+0x5e>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	61fb      	str	r3, [r7, #28]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065e2:	f001 f8e5 	bl	80077b0 <xTaskGetSchedulerState>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <xQueueReceive+0x6e>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <xQueueReceive+0x72>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <xQueueReceive+0x74>
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xQueueReceive+0x8e>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61bb      	str	r3, [r7, #24]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006612:	f001 fe27 	bl	8008264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01f      	beq.n	8006662 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006626:	f000 f977 	bl	8006918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1e5a      	subs	r2, r3, #1
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00f      	beq.n	800665a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	3310      	adds	r3, #16
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fef4 	bl	800742c <xTaskRemoveFromEventList>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800664a:	4b3d      	ldr	r3, [pc, #244]	; (8006740 <xQueueReceive+0x1bc>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800665a:	f001 fe33 	bl	80082c4 <vPortExitCritical>
				return pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	e069      	b.n	8006736 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006668:	f001 fe2c 	bl	80082c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800666c:	2300      	movs	r3, #0
 800666e:	e062      	b.n	8006736 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006676:	f107 0310 	add.w	r3, r7, #16
 800667a:	4618      	mov	r0, r3
 800667c:	f000 ff3a 	bl	80074f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006684:	f001 fe1e 	bl	80082c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006688:	f000 fca6 	bl	8006fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800668c:	f001 fdea 	bl	8008264 <vPortEnterCritical>
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006696:	b25b      	sxtb	r3, r3
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800669c:	d103      	bne.n	80066a6 <xQueueReceive+0x122>
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b2:	d103      	bne.n	80066bc <xQueueReceive+0x138>
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066bc:	f001 fe02 	bl	80082c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c0:	1d3a      	adds	r2, r7, #4
 80066c2:	f107 0310 	add.w	r3, r7, #16
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 ff29 	bl	8007520 <xTaskCheckForTimeOut>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d123      	bne.n	800671c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d6:	f000 f997 	bl	8006a08 <prvIsQueueEmpty>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d017      	beq.n	8006710 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	3324      	adds	r3, #36	; 0x24
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fe4f 	bl	800738c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f0:	f000 f938 	bl	8006964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066f4:	f000 fc7e 	bl	8006ff4 <xTaskResumeAll>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d189      	bne.n	8006612 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <xQueueReceive+0x1bc>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	e780      	b.n	8006612 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006712:	f000 f927 	bl	8006964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006716:	f000 fc6d 	bl	8006ff4 <xTaskResumeAll>
 800671a:	e77a      	b.n	8006612 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800671c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671e:	f000 f921 	bl	8006964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006722:	f000 fc67 	bl	8006ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006728:	f000 f96e 	bl	8006a08 <prvIsQueueEmpty>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f43f af6f 	beq.w	8006612 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006734:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006736:	4618      	mov	r0, r3
 8006738:	3730      	adds	r7, #48	; 0x30
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08e      	sub	sp, #56	; 0x38
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	623b      	str	r3, [r7, #32]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <xQueueReceiveFromISR+0x3a>
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueReceiveFromISR+0x3e>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueReceiveFromISR+0x40>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61fb      	str	r3, [r7, #28]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679e:	f001 fe43 	bl	8008428 <vPortValidateInterruptPriority>
	__asm volatile
 80067a2:	f3ef 8211 	mrs	r2, BASEPRI
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	61ba      	str	r2, [r7, #24]
 80067b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d02f      	beq.n	800682a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067d8:	f000 f89e 	bl	8006918 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	1e5a      	subs	r2, r3, #1
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ec:	d112      	bne.n	8006814 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d016      	beq.n	8006824 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	3310      	adds	r3, #16
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fe16 	bl	800742c <xTaskRemoveFromEventList>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	e007      	b.n	8006824 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006818:	3301      	adds	r3, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	b25a      	sxtb	r2, r3
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006824:	2301      	movs	r3, #1
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
 8006828:	e001      	b.n	800682e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800682a:	2300      	movs	r3, #0
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f383 8811 	msr	BASEPRI, r3
}
 8006838:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800683c:	4618      	mov	r0, r3
 800683e:	3738      	adds	r7, #56	; 0x38
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10d      	bne.n	800687e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d14d      	bne.n	8006906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 ffbc 	bl	80077ec <xTaskPriorityDisinherit>
 8006874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	e043      	b.n	8006906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d119      	bne.n	80068b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6858      	ldr	r0, [r3, #4]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	461a      	mov	r2, r3
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	f002 f82c 	bl	80088ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	441a      	add	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d32b      	bcc.n	8006906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]
 80068b6:	e026      	b.n	8006906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68d8      	ldr	r0, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	461a      	mov	r2, r3
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	f002 f812 	bl	80088ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	425b      	negs	r3, r3
 80068d2:	441a      	add	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d207      	bcs.n	80068f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	425b      	negs	r3, r3
 80068ee:	441a      	add	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d105      	bne.n	8006906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	3b01      	subs	r3, #1
 8006904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800690e:	697b      	ldr	r3, [r7, #20]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d018      	beq.n	800695c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	441a      	add	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d303      	bcc.n	800694c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68d9      	ldr	r1, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	461a      	mov	r2, r3
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f001 ffc8 	bl	80088ec <memcpy>
	}
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800696c:	f001 fc7a 	bl	8008264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006978:	e011      	b.n	800699e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d012      	beq.n	80069a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3324      	adds	r3, #36	; 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd50 	bl	800742c <xTaskRemoveFromEventList>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006992:	f000 fe27 	bl	80075e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	3b01      	subs	r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800699e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dce9      	bgt.n	800697a <prvUnlockQueue+0x16>
 80069a6:	e000      	b.n	80069aa <prvUnlockQueue+0x46>
					break;
 80069a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	22ff      	movs	r2, #255	; 0xff
 80069ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069b2:	f001 fc87 	bl	80082c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069b6:	f001 fc55 	bl	8008264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c2:	e011      	b.n	80069e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d012      	beq.n	80069f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3310      	adds	r3, #16
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fd2b 	bl	800742c <xTaskRemoveFromEventList>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069dc:	f000 fe02 	bl	80075e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	dce9      	bgt.n	80069c4 <prvUnlockQueue+0x60>
 80069f0:	e000      	b.n	80069f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069fc:	f001 fc62 	bl	80082c4 <vPortExitCritical>
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a10:	f001 fc28 	bl	8008264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e001      	b.n	8006a26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a26:	f001 fc4d 	bl	80082c4 <vPortExitCritical>

	return xReturn;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a3c:	f001 fc12 	bl	8008264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d102      	bne.n	8006a52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e001      	b.n	8006a56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 fc35 	bl	80082c4 <vPortExitCritical>

	return xReturn;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e014      	b.n	8006a9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a74:	4a0f      	ldr	r2, [pc, #60]	; (8006ab4 <vQueueAddToRegistry+0x50>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10b      	bne.n	8006a98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a80:	490c      	ldr	r1, [pc, #48]	; (8006ab4 <vQueueAddToRegistry+0x50>)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	; (8006ab4 <vQueueAddToRegistry+0x50>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a96:	e006      	b.n	8006aa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b07      	cmp	r3, #7
 8006aa2:	d9e7      	bls.n	8006a74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	24004bdc 	.word	0x24004bdc

08006ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ac8:	f001 fbcc 	bl	8008264 <vPortEnterCritical>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad8:	d103      	bne.n	8006ae2 <vQueueWaitForMessageRestricted+0x2a>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aee:	d103      	bne.n	8006af8 <vQueueWaitForMessageRestricted+0x40>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af8:	f001 fbe4 	bl	80082c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3324      	adds	r3, #36	; 0x24
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fc61 	bl	80073d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	f7ff ff26 	bl	8006964 <prvUnlockQueue>
	}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	; 0x38
 8006b24:	af04      	add	r7, sp, #16
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	61fb      	str	r3, [r7, #28]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b66:	23bc      	movs	r3, #188	; 0xbc
 8006b68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2bbc      	cmp	r3, #188	; 0xbc
 8006b6e:	d00a      	beq.n	8006b86 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	61bb      	str	r3, [r7, #24]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01e      	beq.n	8006bcc <xTaskCreateStatic+0xac>
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01b      	beq.n	8006bcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9303      	str	r3, [sp, #12]
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	9302      	str	r3, [sp, #8]
 8006bae:	f107 0314 	add.w	r3, r7, #20
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f850 	bl	8006c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bc6:	f000 f8f3 	bl	8006db0 <prvAddNewTaskToReadyList>
 8006bca:	e001      	b.n	8006bd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bd0:	697b      	ldr	r3, [r7, #20]
	}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b08c      	sub	sp, #48	; 0x30
 8006bde:	af04      	add	r7, sp, #16
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	4613      	mov	r3, r2
 8006be8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bea:	88fb      	ldrh	r3, [r7, #6]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fc5a 	bl	80084a8 <pvPortMalloc>
 8006bf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00e      	beq.n	8006c1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bfc:	20bc      	movs	r0, #188	; 0xbc
 8006bfe:	f001 fc53 	bl	80084a8 <pvPortMalloc>
 8006c02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c10:	e005      	b.n	8006c1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c12:	6978      	ldr	r0, [r7, #20]
 8006c14:	f001 fd14 	bl	8008640 <vPortFree>
 8006c18:	e001      	b.n	8006c1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d017      	beq.n	8006c54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c2c:	88fa      	ldrh	r2, [r7, #6]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9303      	str	r3, [sp, #12]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	9302      	str	r3, [sp, #8]
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f80e 	bl	8006c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c48:	69f8      	ldr	r0, [r7, #28]
 8006c4a:	f000 f8b1 	bl	8006db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	e002      	b.n	8006c5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	21a5      	movs	r1, #165	; 0xa5
 8006c7e:	f001 fe43 	bl	8008908 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006c8c:	440b      	add	r3, r1
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f023 0307 	bic.w	r3, r3, #7
 8006c9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	617b      	str	r3, [r7, #20]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d01f      	beq.n	8006d02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	e012      	b.n	8006cee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	7819      	ldrb	r1, [r3, #0]
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	3334      	adds	r3, #52	; 0x34
 8006cd8:	460a      	mov	r2, r1
 8006cda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d006      	beq.n	8006cf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	3301      	adds	r3, #1
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b0f      	cmp	r3, #15
 8006cf2:	d9e9      	bls.n	8006cc8 <prvInitialiseNewTask+0x64>
 8006cf4:	e000      	b.n	8006cf8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d00:	e003      	b.n	8006d0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	2b37      	cmp	r3, #55	; 0x37
 8006d0e:	d901      	bls.n	8006d14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d10:	2337      	movs	r3, #55	; 0x37
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2200      	movs	r2, #0
 8006d24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff f8be 	bl	8005eac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	3318      	adds	r3, #24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff f8b9 	bl	8005eac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	3354      	adds	r3, #84	; 0x54
 8006d64:	2260      	movs	r2, #96	; 0x60
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 fdcd 	bl	8008908 <memset>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	4a0c      	ldr	r2, [pc, #48]	; (8006da4 <prvInitialiseNewTask+0x140>)
 8006d72:	659a      	str	r2, [r3, #88]	; 0x58
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	4a0c      	ldr	r2, [pc, #48]	; (8006da8 <prvInitialiseNewTask+0x144>)
 8006d78:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	4a0b      	ldr	r2, [pc, #44]	; (8006dac <prvInitialiseNewTask+0x148>)
 8006d7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	69b8      	ldr	r0, [r7, #24]
 8006d86:	f001 f941 	bl	800800c <pxPortInitialiseStack>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d9c:	bf00      	nop
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	08009528 	.word	0x08009528
 8006da8:	08009548 	.word	0x08009548
 8006dac:	08009508 	.word	0x08009508

08006db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006db8:	f001 fa54 	bl	8008264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <prvAddNewTaskToReadyList+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4a2c      	ldr	r2, [pc, #176]	; (8006e74 <prvAddNewTaskToReadyList+0xc4>)
 8006dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dc6:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dce:	4a2a      	ldr	r2, [pc, #168]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dd4:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <prvAddNewTaskToReadyList+0xc4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d110      	bne.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ddc:	f000 fc26 	bl	800762c <prvInitialiseTaskLists>
 8006de0:	e00d      	b.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006de2:	4b26      	ldr	r3, [pc, #152]	; (8006e7c <prvAddNewTaskToReadyList+0xcc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d802      	bhi.n	8006dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006df8:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dfe:	4b20      	ldr	r3, [pc, #128]	; (8006e80 <prvAddNewTaskToReadyList+0xd0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <prvAddNewTaskToReadyList+0xd0>)
 8006e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e08:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <prvAddNewTaskToReadyList+0xd0>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <prvAddNewTaskToReadyList+0xd4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d903      	bls.n	8006e24 <prvAddNewTaskToReadyList+0x74>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <prvAddNewTaskToReadyList+0xd4>)
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <prvAddNewTaskToReadyList+0xd8>)
 8006e32:	441a      	add	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7ff f843 	bl	8005ec6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e40:	f001 fa40 	bl	80082c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e44:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <prvAddNewTaskToReadyList+0xcc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00e      	beq.n	8006e6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <prvAddNewTaskToReadyList+0xc8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d207      	bcs.n	8006e6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <prvAddNewTaskToReadyList+0xdc>)
 8006e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	24000ce8 	.word	0x24000ce8
 8006e78:	24000814 	.word	0x24000814
 8006e7c:	24000cf4 	.word	0x24000cf4
 8006e80:	24000d04 	.word	0x24000d04
 8006e84:	24000cf0 	.word	0x24000cf0
 8006e88:	24000818 	.word	0x24000818
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d017      	beq.n	8006ed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <vTaskDelay+0x60>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <vTaskDelay+0x30>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	60bb      	str	r3, [r7, #8]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ec0:	f000 f88a 	bl	8006fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fcfe 	bl	80078c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ecc:	f000 f892 	bl	8006ff4 <xTaskResumeAll>
 8006ed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d107      	bne.n	8006ee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <vTaskDelay+0x64>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	24000d10 	.word	0x24000d10
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f06:	463a      	mov	r2, r7
 8006f08:	1d39      	adds	r1, r7, #4
 8006f0a:	f107 0308 	add.w	r3, r7, #8
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe ff78 	bl	8005e04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	460a      	mov	r2, r1
 8006f26:	4924      	ldr	r1, [pc, #144]	; (8006fb8 <vTaskStartScheduler+0xc0>)
 8006f28:	4824      	ldr	r0, [pc, #144]	; (8006fbc <vTaskStartScheduler+0xc4>)
 8006f2a:	f7ff fdf9 	bl	8006b20 <xTaskCreateStatic>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <vTaskStartScheduler+0xc8>)
 8006f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f34:	4b22      	ldr	r3, [pc, #136]	; (8006fc0 <vTaskStartScheduler+0xc8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e001      	b.n	8006f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d102      	bne.n	8006f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f4c:	f000 fd10 	bl	8007970 <xTimerCreateTimerTask>
 8006f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11b      	bne.n	8006f90 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	613b      	str	r3, [r7, #16]
}
 8006f6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f6c:	4b15      	ldr	r3, [pc, #84]	; (8006fc4 <vTaskStartScheduler+0xcc>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3354      	adds	r3, #84	; 0x54
 8006f72:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <vTaskStartScheduler+0xd0>)
 8006f74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <vTaskStartScheduler+0xd4>)
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <vTaskStartScheduler+0xd8>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <vTaskStartScheduler+0xdc>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f8a:	f001 f8c9 	bl	8008120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f8e:	e00e      	b.n	8006fae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f96:	d10a      	bne.n	8006fae <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	60fb      	str	r3, [r7, #12]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <vTaskStartScheduler+0xb4>
}
 8006fae:	bf00      	nop
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	080093f8 	.word	0x080093f8
 8006fbc:	080075fd 	.word	0x080075fd
 8006fc0:	24000d0c 	.word	0x24000d0c
 8006fc4:	24000814 	.word	0x24000814
 8006fc8:	24000014 	.word	0x24000014
 8006fcc:	24000d08 	.word	0x24000d08
 8006fd0:	24000cf4 	.word	0x24000cf4
 8006fd4:	24000cec 	.word	0x24000cec

08006fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <vTaskSuspendAll+0x18>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a03      	ldr	r2, [pc, #12]	; (8006ff0 <vTaskSuspendAll+0x18>)
 8006fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fe6:	bf00      	nop
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	24000d10 	.word	0x24000d10

08006ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007002:	4b42      	ldr	r3, [pc, #264]	; (800710c <xTaskResumeAll+0x118>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <xTaskResumeAll+0x2c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	603b      	str	r3, [r7, #0]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007020:	f001 f920 	bl	8008264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007024:	4b39      	ldr	r3, [pc, #228]	; (800710c <xTaskResumeAll+0x118>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	4a38      	ldr	r2, [pc, #224]	; (800710c <xTaskResumeAll+0x118>)
 800702c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702e:	4b37      	ldr	r3, [pc, #220]	; (800710c <xTaskResumeAll+0x118>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d162      	bne.n	80070fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007036:	4b36      	ldr	r3, [pc, #216]	; (8007110 <xTaskResumeAll+0x11c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d05e      	beq.n	80070fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800703e:	e02f      	b.n	80070a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007040:	4b34      	ldr	r3, [pc, #208]	; (8007114 <xTaskResumeAll+0x120>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3318      	adds	r3, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe ff97 	bl	8005f80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe ff92 	bl	8005f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4b2d      	ldr	r3, [pc, #180]	; (8007118 <xTaskResumeAll+0x124>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d903      	bls.n	8007070 <xTaskResumeAll+0x7c>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <xTaskResumeAll+0x124>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a27      	ldr	r2, [pc, #156]	; (800711c <xTaskResumeAll+0x128>)
 800707e:	441a      	add	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe ff1d 	bl	8005ec6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4b23      	ldr	r3, [pc, #140]	; (8007120 <xTaskResumeAll+0x12c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <xTaskResumeAll+0x130>)
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070a0:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <xTaskResumeAll+0x120>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1cb      	bne.n	8007040 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070ae:	f000 fb5f 	bl	8007770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070b2:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <xTaskResumeAll+0x134>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d010      	beq.n	80070e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070be:	f000 f847 	bl	8007150 <xTaskIncrementTick>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070c8:	4b16      	ldr	r3, [pc, #88]	; (8007124 <xTaskResumeAll+0x130>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f1      	bne.n	80070be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <xTaskResumeAll+0x134>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070e0:	4b10      	ldr	r3, [pc, #64]	; (8007124 <xTaskResumeAll+0x130>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070e8:	2301      	movs	r3, #1
 80070ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070ec:	4b0f      	ldr	r3, [pc, #60]	; (800712c <xTaskResumeAll+0x138>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070fc:	f001 f8e2 	bl	80082c4 <vPortExitCritical>

	return xAlreadyYielded;
 8007100:	68bb      	ldr	r3, [r7, #8]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	24000d10 	.word	0x24000d10
 8007110:	24000ce8 	.word	0x24000ce8
 8007114:	24000ca8 	.word	0x24000ca8
 8007118:	24000cf0 	.word	0x24000cf0
 800711c:	24000818 	.word	0x24000818
 8007120:	24000814 	.word	0x24000814
 8007124:	24000cfc 	.word	0x24000cfc
 8007128:	24000cf8 	.word	0x24000cf8
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <xTaskGetTickCount+0x1c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800713c:	687b      	ldr	r3, [r7, #4]
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	24000cec 	.word	0x24000cec

08007150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715a:	4b4f      	ldr	r3, [pc, #316]	; (8007298 <xTaskIncrementTick+0x148>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f040 808f 	bne.w	8007282 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007164:	4b4d      	ldr	r3, [pc, #308]	; (800729c <xTaskIncrementTick+0x14c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800716c:	4a4b      	ldr	r2, [pc, #300]	; (800729c <xTaskIncrementTick+0x14c>)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d120      	bne.n	80071ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007178:	4b49      	ldr	r3, [pc, #292]	; (80072a0 <xTaskIncrementTick+0x150>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <xTaskIncrementTick+0x48>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	603b      	str	r3, [r7, #0]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <xTaskIncrementTick+0x46>
 8007198:	4b41      	ldr	r3, [pc, #260]	; (80072a0 <xTaskIncrementTick+0x150>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	4b41      	ldr	r3, [pc, #260]	; (80072a4 <xTaskIncrementTick+0x154>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a3f      	ldr	r2, [pc, #252]	; (80072a0 <xTaskIncrementTick+0x150>)
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	4a3f      	ldr	r2, [pc, #252]	; (80072a4 <xTaskIncrementTick+0x154>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	4b3e      	ldr	r3, [pc, #248]	; (80072a8 <xTaskIncrementTick+0x158>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3301      	adds	r3, #1
 80071b2:	4a3d      	ldr	r2, [pc, #244]	; (80072a8 <xTaskIncrementTick+0x158>)
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	f000 fadb 	bl	8007770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071ba:	4b3c      	ldr	r3, [pc, #240]	; (80072ac <xTaskIncrementTick+0x15c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d349      	bcc.n	8007258 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c4:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <xTaskIncrementTick+0x150>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ce:	4b37      	ldr	r3, [pc, #220]	; (80072ac <xTaskIncrementTick+0x15c>)
 80071d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071d4:	601a      	str	r2, [r3, #0]
					break;
 80071d6:	e03f      	b.n	8007258 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d8:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <xTaskIncrementTick+0x150>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d203      	bcs.n	80071f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071f0:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <xTaskIncrementTick+0x15c>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071f6:	e02f      	b.n	8007258 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe febf 	bl	8005f80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3318      	adds	r3, #24
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe feb6 	bl	8005f80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <xTaskIncrementTick+0x160>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d903      	bls.n	8007228 <xTaskIncrementTick+0xd8>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <xTaskIncrementTick+0x160>)
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <xTaskIncrementTick+0x164>)
 8007236:	441a      	add	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	3304      	adds	r3, #4
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f7fe fe41 	bl	8005ec6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007248:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <xTaskIncrementTick+0x168>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	429a      	cmp	r2, r3
 8007250:	d3b8      	bcc.n	80071c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007252:	2301      	movs	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007256:	e7b5      	b.n	80071c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007258:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <xTaskIncrementTick+0x168>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725e:	4915      	ldr	r1, [pc, #84]	; (80072b4 <xTaskIncrementTick+0x164>)
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d901      	bls.n	8007274 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007274:	4b11      	ldr	r3, [pc, #68]	; (80072bc <xTaskIncrementTick+0x16c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	e004      	b.n	800728c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <xTaskIncrementTick+0x170>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	4a0d      	ldr	r2, [pc, #52]	; (80072c0 <xTaskIncrementTick+0x170>)
 800728a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800728c:	697b      	ldr	r3, [r7, #20]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	24000d10 	.word	0x24000d10
 800729c:	24000cec 	.word	0x24000cec
 80072a0:	24000ca0 	.word	0x24000ca0
 80072a4:	24000ca4 	.word	0x24000ca4
 80072a8:	24000d00 	.word	0x24000d00
 80072ac:	24000d08 	.word	0x24000d08
 80072b0:	24000cf0 	.word	0x24000cf0
 80072b4:	24000818 	.word	0x24000818
 80072b8:	24000814 	.word	0x24000814
 80072bc:	24000cfc 	.word	0x24000cfc
 80072c0:	24000cf8 	.word	0x24000cf8

080072c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ca:	4b2a      	ldr	r3, [pc, #168]	; (8007374 <vTaskSwitchContext+0xb0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072d2:	4b29      	ldr	r3, [pc, #164]	; (8007378 <vTaskSwitchContext+0xb4>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072d8:	e046      	b.n	8007368 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80072da:	4b27      	ldr	r3, [pc, #156]	; (8007378 <vTaskSwitchContext+0xb4>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e0:	4b26      	ldr	r3, [pc, #152]	; (800737c <vTaskSwitchContext+0xb8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e010      	b.n	800730a <vTaskSwitchContext+0x46>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <vTaskSwitchContext+0x40>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <vTaskSwitchContext+0x3e>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3b01      	subs	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	491d      	ldr	r1, [pc, #116]	; (8007380 <vTaskSwitchContext+0xbc>)
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0e4      	beq.n	80072e8 <vTaskSwitchContext+0x24>
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <vTaskSwitchContext+0xbc>)
 800732a:	4413      	add	r3, r2
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	605a      	str	r2, [r3, #4]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	3308      	adds	r3, #8
 8007340:	429a      	cmp	r2, r3
 8007342:	d104      	bne.n	800734e <vTaskSwitchContext+0x8a>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	605a      	str	r2, [r3, #4]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4a0b      	ldr	r2, [pc, #44]	; (8007384 <vTaskSwitchContext+0xc0>)
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	4a08      	ldr	r2, [pc, #32]	; (800737c <vTaskSwitchContext+0xb8>)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <vTaskSwitchContext+0xc0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3354      	adds	r3, #84	; 0x54
 8007364:	4a08      	ldr	r2, [pc, #32]	; (8007388 <vTaskSwitchContext+0xc4>)
 8007366:	6013      	str	r3, [r2, #0]
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	24000d10 	.word	0x24000d10
 8007378:	24000cfc 	.word	0x24000cfc
 800737c:	24000cf0 	.word	0x24000cf0
 8007380:	24000818 	.word	0x24000818
 8007384:	24000814 	.word	0x24000814
 8007388:	24000014 	.word	0x24000014

0800738c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60fb      	str	r3, [r7, #12]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <vTaskPlaceOnEventList+0x44>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3318      	adds	r3, #24
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fe fda7 	bl	8005f0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073c0:	2101      	movs	r1, #1
 80073c2:	6838      	ldr	r0, [r7, #0]
 80073c4:	f000 fa80 	bl	80078c8 <prvAddCurrentTaskToDelayedList>
}
 80073c8:	bf00      	nop
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	24000814 	.word	0x24000814

080073d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	617b      	str	r3, [r7, #20]
}
 80073f8:	bf00      	nop
 80073fa:	e7fe      	b.n	80073fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <vTaskPlaceOnEventListRestricted+0x54>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3318      	adds	r3, #24
 8007402:	4619      	mov	r1, r3
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7fe fd5e 	bl	8005ec6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007414:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	68b8      	ldr	r0, [r7, #8]
 800741a:	f000 fa55 	bl	80078c8 <prvAddCurrentTaskToDelayedList>
	}
 800741e:	bf00      	nop
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	24000814 	.word	0x24000814

0800742c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	60fb      	str	r3, [r7, #12]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3318      	adds	r3, #24
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe fd8f 	bl	8005f80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007462:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <xTaskRemoveFromEventList+0xb0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d11d      	bne.n	80074a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	3304      	adds	r3, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fd86 	bl	8005f80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007478:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <xTaskRemoveFromEventList+0xb4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d903      	bls.n	8007488 <xTaskRemoveFromEventList+0x5c>
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <xTaskRemoveFromEventList+0xb4>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4a13      	ldr	r2, [pc, #76]	; (80074e4 <xTaskRemoveFromEventList+0xb8>)
 8007496:	441a      	add	r2, r3
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7fe fd11 	bl	8005ec6 <vListInsertEnd>
 80074a4:	e005      	b.n	80074b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	3318      	adds	r3, #24
 80074aa:	4619      	mov	r1, r3
 80074ac:	480e      	ldr	r0, [pc, #56]	; (80074e8 <xTaskRemoveFromEventList+0xbc>)
 80074ae:	f7fe fd0a 	bl	8005ec6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <xTaskRemoveFromEventList+0xc0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d905      	bls.n	80074cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <xTaskRemoveFromEventList+0xc4>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	e001      	b.n	80074d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074d0:	697b      	ldr	r3, [r7, #20]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	24000d10 	.word	0x24000d10
 80074e0:	24000cf0 	.word	0x24000cf0
 80074e4:	24000818 	.word	0x24000818
 80074e8:	24000ca8 	.word	0x24000ca8
 80074ec:	24000814 	.word	0x24000814
 80074f0:	24000cfc 	.word	0x24000cfc

080074f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <vTaskInternalSetTimeOutState+0x24>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <vTaskInternalSetTimeOutState+0x28>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	605a      	str	r2, [r3, #4]
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	24000d00 	.word	0x24000d00
 800751c:	24000cec 	.word	0x24000cec

08007520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	60fb      	str	r3, [r7, #12]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007562:	f000 fe7f 	bl	8008264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007566:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <xTaskCheckForTimeOut+0xbc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800757e:	d102      	bne.n	8007586 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e023      	b.n	80075ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <xTaskCheckForTimeOut+0xc0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d007      	beq.n	80075a2 <xTaskCheckForTimeOut+0x82>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	429a      	cmp	r2, r3
 800759a:	d302      	bcc.n	80075a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e015      	b.n	80075ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d20b      	bcs.n	80075c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff ff9b 	bl	80074f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	e004      	b.n	80075ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075ce:	f000 fe79 	bl	80082c4 <vPortExitCritical>

	return xReturn;
 80075d2:	69fb      	ldr	r3, [r7, #28]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	24000cec 	.word	0x24000cec
 80075e0:	24000d00 	.word	0x24000d00

080075e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075e8:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <vTaskMissedYield+0x14>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
}
 80075ee:	bf00      	nop
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	24000cfc 	.word	0x24000cfc

080075fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007604:	f000 f852 	bl	80076ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <prvIdleTask+0x28>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d9f9      	bls.n	8007604 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <prvIdleTask+0x2c>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007620:	e7f0      	b.n	8007604 <prvIdleTask+0x8>
 8007622:	bf00      	nop
 8007624:	24000818 	.word	0x24000818
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]
 8007636:	e00c      	b.n	8007652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a12      	ldr	r2, [pc, #72]	; (800768c <prvInitialiseTaskLists+0x60>)
 8007644:	4413      	add	r3, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fc10 	bl	8005e6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3301      	adds	r3, #1
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b37      	cmp	r3, #55	; 0x37
 8007656:	d9ef      	bls.n	8007638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007658:	480d      	ldr	r0, [pc, #52]	; (8007690 <prvInitialiseTaskLists+0x64>)
 800765a:	f7fe fc07 	bl	8005e6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800765e:	480d      	ldr	r0, [pc, #52]	; (8007694 <prvInitialiseTaskLists+0x68>)
 8007660:	f7fe fc04 	bl	8005e6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007664:	480c      	ldr	r0, [pc, #48]	; (8007698 <prvInitialiseTaskLists+0x6c>)
 8007666:	f7fe fc01 	bl	8005e6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800766a:	480c      	ldr	r0, [pc, #48]	; (800769c <prvInitialiseTaskLists+0x70>)
 800766c:	f7fe fbfe 	bl	8005e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007670:	480b      	ldr	r0, [pc, #44]	; (80076a0 <prvInitialiseTaskLists+0x74>)
 8007672:	f7fe fbfb 	bl	8005e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <prvInitialiseTaskLists+0x78>)
 8007678:	4a05      	ldr	r2, [pc, #20]	; (8007690 <prvInitialiseTaskLists+0x64>)
 800767a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <prvInitialiseTaskLists+0x7c>)
 800767e:	4a05      	ldr	r2, [pc, #20]	; (8007694 <prvInitialiseTaskLists+0x68>)
 8007680:	601a      	str	r2, [r3, #0]
}
 8007682:	bf00      	nop
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	24000818 	.word	0x24000818
 8007690:	24000c78 	.word	0x24000c78
 8007694:	24000c8c 	.word	0x24000c8c
 8007698:	24000ca8 	.word	0x24000ca8
 800769c:	24000cbc 	.word	0x24000cbc
 80076a0:	24000cd4 	.word	0x24000cd4
 80076a4:	24000ca0 	.word	0x24000ca0
 80076a8:	24000ca4 	.word	0x24000ca4

080076ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b2:	e019      	b.n	80076e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076b4:	f000 fdd6 	bl	8008264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b8:	4b10      	ldr	r3, [pc, #64]	; (80076fc <prvCheckTasksWaitingTermination+0x50>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe fc5b 	bl	8005f80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076ca:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <prvCheckTasksWaitingTermination+0x54>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	4a0b      	ldr	r2, [pc, #44]	; (8007700 <prvCheckTasksWaitingTermination+0x54>)
 80076d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076d4:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <prvCheckTasksWaitingTermination+0x58>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3b01      	subs	r3, #1
 80076da:	4a0a      	ldr	r2, [pc, #40]	; (8007704 <prvCheckTasksWaitingTermination+0x58>)
 80076dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076de:	f000 fdf1 	bl	80082c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f810 	bl	8007708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <prvCheckTasksWaitingTermination+0x58>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e1      	bne.n	80076b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	24000cbc 	.word	0x24000cbc
 8007700:	24000ce8 	.word	0x24000ce8
 8007704:	24000cd0 	.word	0x24000cd0

08007708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3354      	adds	r3, #84	; 0x54
 8007714:	4618      	mov	r0, r3
 8007716:	f001 f9b7 	bl	8008a88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	4618      	mov	r0, r3
 800772a:	f000 ff89 	bl	8008640 <vPortFree>
				vPortFree( pxTCB );
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 ff86 	bl	8008640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007734:	e018      	b.n	8007768 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800773c:	2b01      	cmp	r3, #1
 800773e:	d103      	bne.n	8007748 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 ff7d 	bl	8008640 <vPortFree>
	}
 8007746:	e00f      	b.n	8007768 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800774e:	2b02      	cmp	r3, #2
 8007750:	d00a      	beq.n	8007768 <prvDeleteTCB+0x60>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60fb      	str	r3, [r7, #12]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <prvDeleteTCB+0x5e>
	}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007776:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <prvResetNextTaskUnblockTime+0x38>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d104      	bne.n	800778a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007780:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <prvResetNextTaskUnblockTime+0x3c>)
 8007782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007788:	e008      	b.n	800779c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778a:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <prvResetNextTaskUnblockTime+0x38>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a04      	ldr	r2, [pc, #16]	; (80077ac <prvResetNextTaskUnblockTime+0x3c>)
 800779a:	6013      	str	r3, [r2, #0]
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	24000ca0 	.word	0x24000ca0
 80077ac:	24000d08 	.word	0x24000d08

080077b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <xTaskGetSchedulerState+0x34>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077be:	2301      	movs	r3, #1
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	e008      	b.n	80077d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <xTaskGetSchedulerState+0x38>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077cc:	2302      	movs	r3, #2
 80077ce:	607b      	str	r3, [r7, #4]
 80077d0:	e001      	b.n	80077d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077d2:	2300      	movs	r3, #0
 80077d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077d6:	687b      	ldr	r3, [r7, #4]
	}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	24000cf4 	.word	0x24000cf4
 80077e8:	24000d10 	.word	0x24000d10

080077ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d056      	beq.n	80078b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007802:	4b2e      	ldr	r3, [pc, #184]	; (80078bc <xTaskPriorityDisinherit+0xd0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	429a      	cmp	r2, r3
 800780a:	d00a      	beq.n	8007822 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	60bb      	str	r3, [r7, #8]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007852:	429a      	cmp	r2, r3
 8007854:	d02c      	beq.n	80078b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785a:	2b00      	cmp	r3, #0
 800785c:	d128      	bne.n	80078b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3304      	adds	r3, #4
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fb8c 	bl	8005f80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <xTaskPriorityDisinherit+0xd4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d903      	bls.n	8007890 <xTaskPriorityDisinherit+0xa4>
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788c:	4a0c      	ldr	r2, [pc, #48]	; (80078c0 <xTaskPriorityDisinherit+0xd4>)
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <xTaskPriorityDisinherit+0xd8>)
 800789e:	441a      	add	r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	3304      	adds	r3, #4
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f7fe fb0d 	bl	8005ec6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078ac:	2301      	movs	r3, #1
 80078ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078b0:	697b      	ldr	r3, [r7, #20]
	}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	24000814 	.word	0x24000814
 80078c0:	24000cf0 	.word	0x24000cf0
 80078c4:	24000818 	.word	0x24000818

080078c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078d2:	4b21      	ldr	r3, [pc, #132]	; (8007958 <prvAddCurrentTaskToDelayedList+0x90>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d8:	4b20      	ldr	r3, [pc, #128]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fb4e 	bl	8005f80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ea:	d10a      	bne.n	8007902 <prvAddCurrentTaskToDelayedList+0x3a>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078f2:	4b1a      	ldr	r3, [pc, #104]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4819      	ldr	r0, [pc, #100]	; (8007960 <prvAddCurrentTaskToDelayedList+0x98>)
 80078fc:	f7fe fae3 	bl	8005ec6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007900:	e026      	b.n	8007950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4413      	add	r3, r2
 8007908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800790a:	4b14      	ldr	r3, [pc, #80]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	429a      	cmp	r2, r3
 8007918:	d209      	bcs.n	800792e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fe faf1 	bl	8005f0e <vListInsert>
}
 800792c:	e010      	b.n	8007950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800792e:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <prvAddCurrentTaskToDelayedList+0x94>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3304      	adds	r3, #4
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f7fe fae7 	bl	8005f0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007940:	4b0a      	ldr	r3, [pc, #40]	; (800796c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	429a      	cmp	r2, r3
 8007948:	d202      	bcs.n	8007950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800794a:	4a08      	ldr	r2, [pc, #32]	; (800796c <prvAddCurrentTaskToDelayedList+0xa4>)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6013      	str	r3, [r2, #0]
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	24000cec 	.word	0x24000cec
 800795c:	24000814 	.word	0x24000814
 8007960:	24000cd4 	.word	0x24000cd4
 8007964:	24000ca4 	.word	0x24000ca4
 8007968:	24000ca0 	.word	0x24000ca0
 800796c:	24000d08 	.word	0x24000d08

08007970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800797a:	f000 fb07 	bl	8007f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800797e:	4b1c      	ldr	r3, [pc, #112]	; (80079f0 <xTimerCreateTimerTask+0x80>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d021      	beq.n	80079ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800798e:	1d3a      	adds	r2, r7, #4
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fa4d 	bl	8005e38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	9202      	str	r2, [sp, #8]
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	2302      	movs	r3, #2
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	2300      	movs	r3, #0
 80079ae:	460a      	mov	r2, r1
 80079b0:	4910      	ldr	r1, [pc, #64]	; (80079f4 <xTimerCreateTimerTask+0x84>)
 80079b2:	4811      	ldr	r0, [pc, #68]	; (80079f8 <xTimerCreateTimerTask+0x88>)
 80079b4:	f7ff f8b4 	bl	8006b20 <xTaskCreateStatic>
 80079b8:	4603      	mov	r3, r0
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <xTimerCreateTimerTask+0x8c>)
 80079bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <xTimerCreateTimerTask+0x8c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079c6:	2301      	movs	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	613b      	str	r3, [r7, #16]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079e6:	697b      	ldr	r3, [r7, #20]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	24000d44 	.word	0x24000d44
 80079f4:	08009400 	.word	0x08009400
 80079f8:	08007b35 	.word	0x08007b35
 80079fc:	24000d48 	.word	0x24000d48

08007a00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	623b      	str	r3, [r7, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02a      	beq.n	8007a8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	dc18      	bgt.n	8007a7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a48:	f7ff feb2 	bl	80077b0 <xTaskGetSchedulerState>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d109      	bne.n	8007a66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	f107 0110 	add.w	r1, r7, #16
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a5e:	f7fe fbf7 	bl	8006250 <xQueueGenericSend>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24
 8007a64:	e012      	b.n	8007a8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f107 0110 	add.w	r1, r7, #16
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2200      	movs	r2, #0
 8007a72:	f7fe fbed 	bl	8006250 <xQueueGenericSend>
 8007a76:	6278      	str	r0, [r7, #36]	; 0x24
 8007a78:	e008      	b.n	8007a8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <xTimerGenericCommand+0x98>)
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	f107 0110 	add.w	r1, r7, #16
 8007a82:	2300      	movs	r3, #0
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	f7fe fce1 	bl	800644c <xQueueGenericSendFromISR>
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3728      	adds	r7, #40	; 0x28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	24000d44 	.word	0x24000d44

08007a9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa6:	4b22      	ldr	r3, [pc, #136]	; (8007b30 <prvProcessExpiredTimer+0x94>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fe fa63 	bl	8005f80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d022      	beq.n	8007b0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	18d1      	adds	r1, r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	6978      	ldr	r0, [r7, #20]
 8007ad6:	f000 f8d1 	bl	8007c7c <prvInsertTimerInActiveList>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d01f      	beq.n	8007b20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	6978      	ldr	r0, [r7, #20]
 8007aec:	f7ff ff88 	bl	8007a00 <xTimerGenericCommand>
 8007af0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d113      	bne.n	8007b20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	60fb      	str	r3, [r7, #12]
}
 8007b0a:	bf00      	nop
 8007b0c:	e7fe      	b.n	8007b0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	6978      	ldr	r0, [r7, #20]
 8007b26:	4798      	blx	r3
}
 8007b28:	bf00      	nop
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	24000d3c 	.word	0x24000d3c

08007b34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b3c:	f107 0308 	add.w	r3, r7, #8
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f857 	bl	8007bf4 <prvGetNextExpireTime>
 8007b46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f803 	bl	8007b58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b52:	f000 f8d5 	bl	8007d00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b56:	e7f1      	b.n	8007b3c <prvTimerTask+0x8>

08007b58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b62:	f7ff fa39 	bl	8006fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b66:	f107 0308 	add.w	r3, r7, #8
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f866 	bl	8007c3c <prvSampleTimeNow>
 8007b70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d130      	bne.n	8007bda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <prvProcessTimerOrBlockTask+0x3c>
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d806      	bhi.n	8007b94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b86:	f7ff fa35 	bl	8006ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b8a:	68f9      	ldr	r1, [r7, #12]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff ff85 	bl	8007a9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b92:	e024      	b.n	8007bde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <prvProcessTimerOrBlockTask+0x90>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <prvProcessTimerOrBlockTask+0x50>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <prvProcessTimerOrBlockTask+0x52>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bac:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <prvProcessTimerOrBlockTask+0x94>)
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f7fe ff7d 	bl	8006ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bbe:	f7ff fa19 	bl	8006ff4 <xTaskResumeAll>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bc8:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <prvProcessTimerOrBlockTask+0x98>)
 8007bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
}
 8007bd8:	e001      	b.n	8007bde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bda:	f7ff fa0b 	bl	8006ff4 <xTaskResumeAll>
}
 8007bde:	bf00      	nop
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	24000d40 	.word	0x24000d40
 8007bec:	24000d44 	.word	0x24000d44
 8007bf0:	e000ed04 	.word	0xe000ed04

08007bf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <prvGetNextExpireTime+0x44>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <prvGetNextExpireTime+0x16>
 8007c06:	2201      	movs	r2, #1
 8007c08:	e000      	b.n	8007c0c <prvGetNextExpireTime+0x18>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d105      	bne.n	8007c24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c18:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <prvGetNextExpireTime+0x44>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	e001      	b.n	8007c28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c28:	68fb      	ldr	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	24000d3c 	.word	0x24000d3c

08007c3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c44:	f7ff fa74 	bl	8007130 <xTaskGetTickCount>
 8007c48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <prvSampleTimeNow+0x3c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d205      	bcs.n	8007c60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c54:	f000 f936 	bl	8007ec4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c66:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <prvSampleTimeNow+0x3c>)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	24000d4c 	.word	0x24000d4c

08007c7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d812      	bhi.n	8007cc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d302      	bcc.n	8007cb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	e01b      	b.n	8007cee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <prvInsertTimerInActiveList+0x7c>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	f7fe f924 	bl	8005f0e <vListInsert>
 8007cc6:	e012      	b.n	8007cee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d206      	bcs.n	8007cde <prvInsertTimerInActiveList+0x62>
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d302      	bcc.n	8007cde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	e007      	b.n	8007cee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cde:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <prvInsertTimerInActiveList+0x80>)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4610      	mov	r0, r2
 8007cea:	f7fe f910 	bl	8005f0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cee:	697b      	ldr	r3, [r7, #20]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	24000d40 	.word	0x24000d40
 8007cfc:	24000d3c 	.word	0x24000d3c

08007d00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08e      	sub	sp, #56	; 0x38
 8007d04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d06:	e0ca      	b.n	8007e9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da18      	bge.n	8007d40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d0e:	1d3b      	adds	r3, r7, #4
 8007d10:	3304      	adds	r3, #4
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	61fb      	str	r3, [r7, #28]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d36:	6850      	ldr	r0, [r2, #4]
 8007d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d3a:	6892      	ldr	r2, [r2, #8]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f2c0 80aa 	blt.w	8007e9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d004      	beq.n	8007d5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe f911 	bl	8005f80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d5e:	463b      	mov	r3, r7
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff ff6b 	bl	8007c3c <prvSampleTimeNow>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	f200 8097 	bhi.w	8007e9e <prvProcessReceivedCommands+0x19e>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <prvProcessReceivedCommands+0x78>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007da1 	.word	0x08007da1
 8007d7c:	08007da1 	.word	0x08007da1
 8007d80:	08007da1 	.word	0x08007da1
 8007d84:	08007e15 	.word	0x08007e15
 8007d88:	08007e29 	.word	0x08007e29
 8007d8c:	08007e73 	.word	0x08007e73
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007da1 	.word	0x08007da1
 8007d98:	08007e15 	.word	0x08007e15
 8007d9c:	08007e29 	.word	0x08007e29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da6:	f043 0301 	orr.w	r3, r3, #1
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	18d1      	adds	r1, r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc0:	f7ff ff5c 	bl	8007c7c <prvInsertTimerInActiveList>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d069      	beq.n	8007e9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d05e      	beq.n	8007e9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	441a      	add	r2, r3
 8007de8:	2300      	movs	r3, #0
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	2300      	movs	r3, #0
 8007dee:	2100      	movs	r1, #0
 8007df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df2:	f7ff fe05 	bl	8007a00 <xTimerGenericCommand>
 8007df6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d14f      	bne.n	8007e9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	61bb      	str	r3, [r7, #24]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e1a:	f023 0301 	bic.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e26:	e03a      	b.n	8007e9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	617b      	str	r3, [r7, #20]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	699a      	ldr	r2, [r3, #24]
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	18d1      	adds	r1, r2, r3
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6c:	f7ff ff06 	bl	8007c7c <prvInsertTimerInActiveList>
					break;
 8007e70:	e015      	b.n	8007e9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e82:	f000 fbdd 	bl	8008640 <vPortFree>
 8007e86:	e00a      	b.n	8007e9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e8e:	f023 0301 	bic.w	r3, r3, #1
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e9a:	e000      	b.n	8007e9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e9e:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <prvProcessReceivedCommands+0x1c0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	1d39      	adds	r1, r7, #4
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fb6c 	bl	8006584 <xQueueReceive>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f47f af2a 	bne.w	8007d08 <prvProcessReceivedCommands+0x8>
	}
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	3730      	adds	r7, #48	; 0x30
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	24000d44 	.word	0x24000d44

08007ec4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eca:	e048      	b.n	8007f5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	; (8007f84 <prvSwitchTimerLists+0xc0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed6:	4b2b      	ldr	r3, [pc, #172]	; (8007f84 <prvSwitchTimerLists+0xc0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe f84b 	bl	8005f80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d02e      	beq.n	8007f5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4413      	add	r3, r2
 8007f08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d90e      	bls.n	8007f30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f1e:	4b19      	ldr	r3, [pc, #100]	; (8007f84 <prvSwitchTimerLists+0xc0>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7fd fff0 	bl	8005f0e <vListInsert>
 8007f2e:	e016      	b.n	8007f5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	2100      	movs	r1, #0
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fd60 	bl	8007a00 <xTimerGenericCommand>
 8007f40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	603b      	str	r3, [r7, #0]
}
 8007f5a:	bf00      	nop
 8007f5c:	e7fe      	b.n	8007f5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <prvSwitchTimerLists+0xc0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1b1      	bne.n	8007ecc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <prvSwitchTimerLists+0xc0>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <prvSwitchTimerLists+0xc4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a04      	ldr	r2, [pc, #16]	; (8007f84 <prvSwitchTimerLists+0xc0>)
 8007f74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f76:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <prvSwitchTimerLists+0xc4>)
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	6013      	str	r3, [r2, #0]
}
 8007f7c:	bf00      	nop
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	24000d3c 	.word	0x24000d3c
 8007f88:	24000d40 	.word	0x24000d40

08007f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f92:	f000 f967 	bl	8008264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f96:	4b15      	ldr	r3, [pc, #84]	; (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d120      	bne.n	8007fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f9e:	4814      	ldr	r0, [pc, #80]	; (8007ff0 <prvCheckForValidListAndQueue+0x64>)
 8007fa0:	f7fd ff64 	bl	8005e6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fa4:	4813      	ldr	r0, [pc, #76]	; (8007ff4 <prvCheckForValidListAndQueue+0x68>)
 8007fa6:	f7fd ff61 	bl	8005e6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007faa:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <prvCheckForValidListAndQueue+0x6c>)
 8007fac:	4a10      	ldr	r2, [pc, #64]	; (8007ff0 <prvCheckForValidListAndQueue+0x64>)
 8007fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fb0:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <prvCheckForValidListAndQueue+0x70>)
 8007fb2:	4a10      	ldr	r2, [pc, #64]	; (8007ff4 <prvCheckForValidListAndQueue+0x68>)
 8007fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4b11      	ldr	r3, [pc, #68]	; (8008000 <prvCheckForValidListAndQueue+0x74>)
 8007fbc:	4a11      	ldr	r2, [pc, #68]	; (8008004 <prvCheckForValidListAndQueue+0x78>)
 8007fbe:	2110      	movs	r1, #16
 8007fc0:	200a      	movs	r0, #10
 8007fc2:	f7fe f86f 	bl	80060a4 <xQueueGenericCreateStatic>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4a08      	ldr	r2, [pc, #32]	; (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	490b      	ldr	r1, [pc, #44]	; (8008008 <prvCheckForValidListAndQueue+0x7c>)
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fd42 	bl	8006a64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fe0:	f000 f970 	bl	80082c4 <vPortExitCritical>
}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	24000d44 	.word	0x24000d44
 8007ff0:	24000d14 	.word	0x24000d14
 8007ff4:	24000d28 	.word	0x24000d28
 8007ff8:	24000d3c 	.word	0x24000d3c
 8007ffc:	24000d40 	.word	0x24000d40
 8008000:	24000df0 	.word	0x24000df0
 8008004:	24000d50 	.word	0x24000d50
 8008008:	08009408 	.word	0x08009408

0800800c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3b04      	subs	r3, #4
 800801c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b04      	subs	r3, #4
 800802a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f023 0201 	bic.w	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3b04      	subs	r3, #4
 800803a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800803c:	4a0c      	ldr	r2, [pc, #48]	; (8008070 <pxPortInitialiseStack+0x64>)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3b14      	subs	r3, #20
 8008046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b04      	subs	r3, #4
 8008052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f06f 0202 	mvn.w	r2, #2
 800805a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b20      	subs	r3, #32
 8008060:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008062:	68fb      	ldr	r3, [r7, #12]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	08008075 	.word	0x08008075

08008074 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800807e:	4b12      	ldr	r3, [pc, #72]	; (80080c8 <prvTaskExitError+0x54>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008086:	d00a      	beq.n	800809e <prvTaskExitError+0x2a>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	60fb      	str	r3, [r7, #12]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <prvTaskExitError+0x28>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	60bb      	str	r3, [r7, #8]
}
 80080b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080b2:	bf00      	nop
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0fc      	beq.n	80080b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	24000010 	.word	0x24000010
 80080cc:	00000000 	.word	0x00000000

080080d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <pxCurrentTCBConst2>)
 80080d2:	6819      	ldr	r1, [r3, #0]
 80080d4:	6808      	ldr	r0, [r1, #0]
 80080d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080da:	f380 8809 	msr	PSP, r0
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8811 	msr	BASEPRI, r0
 80080ea:	4770      	bx	lr
 80080ec:	f3af 8000 	nop.w

080080f0 <pxCurrentTCBConst2>:
 80080f0:	24000814 	.word	0x24000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop

080080f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080f8:	4808      	ldr	r0, [pc, #32]	; (800811c <prvPortStartFirstTask+0x24>)
 80080fa:	6800      	ldr	r0, [r0, #0]
 80080fc:	6800      	ldr	r0, [r0, #0]
 80080fe:	f380 8808 	msr	MSP, r0
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8814 	msr	CONTROL, r0
 800810a:	b662      	cpsie	i
 800810c:	b661      	cpsie	f
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	df00      	svc	0
 8008118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800811a:	bf00      	nop
 800811c:	e000ed08 	.word	0xe000ed08

08008120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008126:	4b46      	ldr	r3, [pc, #280]	; (8008240 <xPortStartScheduler+0x120>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a46      	ldr	r2, [pc, #280]	; (8008244 <xPortStartScheduler+0x124>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d10a      	bne.n	8008146 <xPortStartScheduler+0x26>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	613b      	str	r3, [r7, #16]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008146:	4b3e      	ldr	r3, [pc, #248]	; (8008240 <xPortStartScheduler+0x120>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a3f      	ldr	r2, [pc, #252]	; (8008248 <xPortStartScheduler+0x128>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d10a      	bne.n	8008166 <xPortStartScheduler+0x46>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	60fb      	str	r3, [r7, #12]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008166:	4b39      	ldr	r3, [pc, #228]	; (800824c <xPortStartScheduler+0x12c>)
 8008168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	b2db      	uxtb	r3, r3
 8008170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	22ff      	movs	r2, #255	; 0xff
 8008176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008188:	b2da      	uxtb	r2, r3
 800818a:	4b31      	ldr	r3, [pc, #196]	; (8008250 <xPortStartScheduler+0x130>)
 800818c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800818e:	4b31      	ldr	r3, [pc, #196]	; (8008254 <xPortStartScheduler+0x134>)
 8008190:	2207      	movs	r2, #7
 8008192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008194:	e009      	b.n	80081aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008196:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <xPortStartScheduler+0x134>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3b01      	subs	r3, #1
 800819c:	4a2d      	ldr	r2, [pc, #180]	; (8008254 <xPortStartScheduler+0x134>)
 800819e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	2b80      	cmp	r3, #128	; 0x80
 80081b4:	d0ef      	beq.n	8008196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081b6:	4b27      	ldr	r3, [pc, #156]	; (8008254 <xPortStartScheduler+0x134>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f1c3 0307 	rsb	r3, r3, #7
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d00a      	beq.n	80081d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60bb      	str	r3, [r7, #8]
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081d8:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <xPortStartScheduler+0x134>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <xPortStartScheduler+0x134>)
 80081e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <xPortStartScheduler+0x134>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <xPortStartScheduler+0x134>)
 80081ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081f6:	4b18      	ldr	r3, [pc, #96]	; (8008258 <xPortStartScheduler+0x138>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a17      	ldr	r2, [pc, #92]	; (8008258 <xPortStartScheduler+0x138>)
 80081fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008202:	4b15      	ldr	r3, [pc, #84]	; (8008258 <xPortStartScheduler+0x138>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a14      	ldr	r2, [pc, #80]	; (8008258 <xPortStartScheduler+0x138>)
 8008208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800820c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800820e:	f000 f8dd 	bl	80083cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <xPortStartScheduler+0x13c>)
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008218:	f000 f8fc 	bl	8008414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800821c:	4b10      	ldr	r3, [pc, #64]	; (8008260 <xPortStartScheduler+0x140>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0f      	ldr	r2, [pc, #60]	; (8008260 <xPortStartScheduler+0x140>)
 8008222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008228:	f7ff ff66 	bl	80080f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800822c:	f7ff f84a 	bl	80072c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008230:	f7ff ff20 	bl	8008074 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	e000ed00 	.word	0xe000ed00
 8008244:	410fc271 	.word	0x410fc271
 8008248:	410fc270 	.word	0x410fc270
 800824c:	e000e400 	.word	0xe000e400
 8008250:	24000e40 	.word	0x24000e40
 8008254:	24000e44 	.word	0x24000e44
 8008258:	e000ed20 	.word	0xe000ed20
 800825c:	24000010 	.word	0x24000010
 8008260:	e000ef34 	.word	0xe000ef34

08008264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	607b      	str	r3, [r7, #4]
}
 800827c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <vPortEnterCritical+0x58>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	4a0d      	ldr	r2, [pc, #52]	; (80082bc <vPortEnterCritical+0x58>)
 8008286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008288:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <vPortEnterCritical+0x58>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d10f      	bne.n	80082b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <vPortEnterCritical+0x5c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	603b      	str	r3, [r7, #0]
}
 80082ac:	bf00      	nop
 80082ae:	e7fe      	b.n	80082ae <vPortEnterCritical+0x4a>
	}
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	24000010 	.word	0x24000010
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082ca:	4b12      	ldr	r3, [pc, #72]	; (8008314 <vPortExitCritical+0x50>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <vPortExitCritical+0x24>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	607b      	str	r3, [r7, #4]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <vPortExitCritical+0x50>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4a09      	ldr	r2, [pc, #36]	; (8008314 <vPortExitCritical+0x50>)
 80082f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082f2:	4b08      	ldr	r3, [pc, #32]	; (8008314 <vPortExitCritical+0x50>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <vPortExitCritical+0x42>
 80082fa:	2300      	movs	r3, #0
 80082fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	f383 8811 	msr	BASEPRI, r3
}
 8008304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	24000010 	.word	0x24000010
	...

08008320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008320:	f3ef 8009 	mrs	r0, PSP
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4b15      	ldr	r3, [pc, #84]	; (8008380 <pxCurrentTCBConst>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	f01e 0f10 	tst.w	lr, #16
 8008330:	bf08      	it	eq
 8008332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833a:	6010      	str	r0, [r2, #0]
 800833c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008344:	f380 8811 	msr	BASEPRI, r0
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f7fe ffb8 	bl	80072c4 <vTaskSwitchContext>
 8008354:	f04f 0000 	mov.w	r0, #0
 8008358:	f380 8811 	msr	BASEPRI, r0
 800835c:	bc09      	pop	{r0, r3}
 800835e:	6819      	ldr	r1, [r3, #0]
 8008360:	6808      	ldr	r0, [r1, #0]
 8008362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008366:	f01e 0f10 	tst.w	lr, #16
 800836a:	bf08      	it	eq
 800836c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008370:	f380 8809 	msr	PSP, r0
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w

08008380 <pxCurrentTCBConst>:
 8008380:	24000814 	.word	0x24000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop

08008388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083a2:	f7fe fed5 	bl	8007150 <xTaskIncrementTick>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <xPortSysTickHandler+0x40>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f383 8811 	msr	BASEPRI, r3
}
 80083be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <vPortSetupTimerInterrupt+0x34>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083d6:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <vPortSetupTimerInterrupt+0x38>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083dc:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <vPortSetupTimerInterrupt+0x3c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a0a      	ldr	r2, [pc, #40]	; (800840c <vPortSetupTimerInterrupt+0x40>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	099b      	lsrs	r3, r3, #6
 80083e8:	4a09      	ldr	r2, [pc, #36]	; (8008410 <vPortSetupTimerInterrupt+0x44>)
 80083ea:	3b01      	subs	r3, #1
 80083ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ee:	4b04      	ldr	r3, [pc, #16]	; (8008400 <vPortSetupTimerInterrupt+0x34>)
 80083f0:	2207      	movs	r2, #7
 80083f2:	601a      	str	r2, [r3, #0]
}
 80083f4:	bf00      	nop
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	e000e010 	.word	0xe000e010
 8008404:	e000e018 	.word	0xe000e018
 8008408:	24000000 	.word	0x24000000
 800840c:	10624dd3 	.word	0x10624dd3
 8008410:	e000e014 	.word	0xe000e014

08008414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008424 <vPortEnableVFP+0x10>
 8008418:	6801      	ldr	r1, [r0, #0]
 800841a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800841e:	6001      	str	r1, [r0, #0]
 8008420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008422:	bf00      	nop
 8008424:	e000ed88 	.word	0xe000ed88

08008428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800842e:	f3ef 8305 	mrs	r3, IPSR
 8008432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b0f      	cmp	r3, #15
 8008438:	d914      	bls.n	8008464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <vPortValidateInterruptPriority+0x70>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008444:	4b15      	ldr	r3, [pc, #84]	; (800849c <vPortValidateInterruptPriority+0x74>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	7afa      	ldrb	r2, [r7, #11]
 800844a:	429a      	cmp	r2, r3
 800844c:	d20a      	bcs.n	8008464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <vPortValidateInterruptPriority+0x78>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800846c:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <vPortValidateInterruptPriority+0x7c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d90a      	bls.n	800848a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	603b      	str	r3, [r7, #0]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <vPortValidateInterruptPriority+0x60>
	}
 800848a:	bf00      	nop
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	e000e3f0 	.word	0xe000e3f0
 800849c:	24000e40 	.word	0x24000e40
 80084a0:	e000ed0c 	.word	0xe000ed0c
 80084a4:	24000e44 	.word	0x24000e44

080084a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084b4:	f7fe fd90 	bl	8006fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084b8:	4b5b      	ldr	r3, [pc, #364]	; (8008628 <pvPortMalloc+0x180>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084c0:	f000 f920 	bl	8008704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084c4:	4b59      	ldr	r3, [pc, #356]	; (800862c <pvPortMalloc+0x184>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 8093 	bne.w	80085f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01d      	beq.n	8008514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084d8:	2208      	movs	r2, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4413      	add	r3, r2
 80084de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d014      	beq.n	8008514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <pvPortMalloc+0x6c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	617b      	str	r3, [r7, #20]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d06e      	beq.n	80085f8 <pvPortMalloc+0x150>
 800851a:	4b45      	ldr	r3, [pc, #276]	; (8008630 <pvPortMalloc+0x188>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d869      	bhi.n	80085f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008524:	4b43      	ldr	r3, [pc, #268]	; (8008634 <pvPortMalloc+0x18c>)
 8008526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008528:	4b42      	ldr	r3, [pc, #264]	; (8008634 <pvPortMalloc+0x18c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852e:	e004      	b.n	800853a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <pvPortMalloc+0xa4>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f1      	bne.n	8008530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800854c:	4b36      	ldr	r3, [pc, #216]	; (8008628 <pvPortMalloc+0x180>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	429a      	cmp	r2, r3
 8008554:	d050      	beq.n	80085f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2208      	movs	r2, #8
 800855c:	4413      	add	r3, r2
 800855e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	2308      	movs	r3, #8
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	d91f      	bls.n	80085b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <pvPortMalloc+0xf8>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	613b      	str	r3, [r7, #16]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085b2:	69b8      	ldr	r0, [r7, #24]
 80085b4:	f000 f908 	bl	80087c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085b8:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <pvPortMalloc+0x188>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	4a1b      	ldr	r2, [pc, #108]	; (8008630 <pvPortMalloc+0x188>)
 80085c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <pvPortMalloc+0x188>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <pvPortMalloc+0x190>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085d2:	4b17      	ldr	r3, [pc, #92]	; (8008630 <pvPortMalloc+0x188>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a18      	ldr	r2, [pc, #96]	; (8008638 <pvPortMalloc+0x190>)
 80085d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <pvPortMalloc+0x184>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <pvPortMalloc+0x194>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a11      	ldr	r2, [pc, #68]	; (800863c <pvPortMalloc+0x194>)
 80085f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085f8:	f7fe fcfc 	bl	8006ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <pvPortMalloc+0x174>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60fb      	str	r3, [r7, #12]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <pvPortMalloc+0x172>
	return pvReturn;
 800861c:	69fb      	ldr	r3, [r7, #28]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3728      	adds	r7, #40	; 0x28
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	24004a50 	.word	0x24004a50
 800862c:	24004a64 	.word	0x24004a64
 8008630:	24004a54 	.word	0x24004a54
 8008634:	24004a48 	.word	0x24004a48
 8008638:	24004a58 	.word	0x24004a58
 800863c:	24004a5c 	.word	0x24004a5c

08008640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d04d      	beq.n	80086ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008652:	2308      	movs	r3, #8
 8008654:	425b      	negs	r3, r3
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <vPortFree+0xb8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <vPortFree+0x44>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	60fb      	str	r3, [r7, #12]
}
 8008680:	bf00      	nop
 8008682:	e7fe      	b.n	8008682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <vPortFree+0x62>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60bb      	str	r3, [r7, #8]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <vPortFree+0xb8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01e      	beq.n	80086ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11a      	bne.n	80086ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <vPortFree+0xb8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	401a      	ands	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086c8:	f7fe fc86 	bl	8006fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <vPortFree+0xbc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <vPortFree+0xbc>)
 80086d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086da:	6938      	ldr	r0, [r7, #16]
 80086dc:	f000 f874 	bl	80087c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <vPortFree+0xc0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a06      	ldr	r2, [pc, #24]	; (8008700 <vPortFree+0xc0>)
 80086e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086ea:	f7fe fc83 	bl	8006ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ee:	bf00      	nop
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	24004a64 	.word	0x24004a64
 80086fc:	24004a54 	.word	0x24004a54
 8008700:	24004a60 	.word	0x24004a60

08008704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800870a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800870e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <prvHeapInit+0xac>)
 8008712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3307      	adds	r3, #7
 8008722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0307 	bic.w	r3, r3, #7
 800872a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <prvHeapInit+0xac>)
 8008734:	4413      	add	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800873c:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <prvHeapInit+0xb0>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <prvHeapInit+0xb0>)
 8008744:	2200      	movs	r2, #0
 8008746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008750:	2208      	movs	r2, #8
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0307 	bic.w	r3, r3, #7
 800875e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <prvHeapInit+0xb4>)
 8008764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <prvHeapInit+0xb4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800876e:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <prvHeapInit+0xb4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <prvHeapInit+0xb4>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <prvHeapInit+0xb8>)
 8008792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <prvHeapInit+0xbc>)
 800879a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800879c:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <prvHeapInit+0xc0>)
 800879e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087a2:	601a      	str	r2, [r3, #0]
}
 80087a4:	bf00      	nop
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	24000e48 	.word	0x24000e48
 80087b4:	24004a48 	.word	0x24004a48
 80087b8:	24004a50 	.word	0x24004a50
 80087bc:	24004a58 	.word	0x24004a58
 80087c0:	24004a54 	.word	0x24004a54
 80087c4:	24004a64 	.word	0x24004a64

080087c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087d0:	4b28      	ldr	r3, [pc, #160]	; (8008874 <prvInsertBlockIntoFreeList+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	e002      	b.n	80087dc <prvInsertBlockIntoFreeList+0x14>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d8f7      	bhi.n	80087d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d108      	bne.n	800880a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	441a      	add	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d118      	bne.n	8008850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d00d      	beq.n	8008846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	441a      	add	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	e008      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvInsertBlockIntoFreeList+0xb0>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e003      	b.n	8008858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d002      	beq.n	8008866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	24004a48 	.word	0x24004a48
 8008878:	24004a50 	.word	0x24004a50

0800887c <atoi>:
 800887c:	220a      	movs	r2, #10
 800887e:	2100      	movs	r1, #0
 8008880:	f000 ba2a 	b.w	8008cd8 <strtol>

08008884 <__errno>:
 8008884:	4b01      	ldr	r3, [pc, #4]	; (800888c <__errno+0x8>)
 8008886:	6818      	ldr	r0, [r3, #0]
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	24000014 	.word	0x24000014

08008890 <__libc_init_array>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	4d0d      	ldr	r5, [pc, #52]	; (80088c8 <__libc_init_array+0x38>)
 8008894:	4c0d      	ldr	r4, [pc, #52]	; (80088cc <__libc_init_array+0x3c>)
 8008896:	1b64      	subs	r4, r4, r5
 8008898:	10a4      	asrs	r4, r4, #2
 800889a:	2600      	movs	r6, #0
 800889c:	42a6      	cmp	r6, r4
 800889e:	d109      	bne.n	80088b4 <__libc_init_array+0x24>
 80088a0:	4d0b      	ldr	r5, [pc, #44]	; (80088d0 <__libc_init_array+0x40>)
 80088a2:	4c0c      	ldr	r4, [pc, #48]	; (80088d4 <__libc_init_array+0x44>)
 80088a4:	f000 fd66 	bl	8009374 <_init>
 80088a8:	1b64      	subs	r4, r4, r5
 80088aa:	10a4      	asrs	r4, r4, #2
 80088ac:	2600      	movs	r6, #0
 80088ae:	42a6      	cmp	r6, r4
 80088b0:	d105      	bne.n	80088be <__libc_init_array+0x2e>
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b8:	4798      	blx	r3
 80088ba:	3601      	adds	r6, #1
 80088bc:	e7ee      	b.n	800889c <__libc_init_array+0xc>
 80088be:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c2:	4798      	blx	r3
 80088c4:	3601      	adds	r6, #1
 80088c6:	e7f2      	b.n	80088ae <__libc_init_array+0x1e>
 80088c8:	080096a4 	.word	0x080096a4
 80088cc:	080096a4 	.word	0x080096a4
 80088d0:	080096a4 	.word	0x080096a4
 80088d4:	080096a8 	.word	0x080096a8

080088d8 <__retarget_lock_acquire_recursive>:
 80088d8:	4770      	bx	lr

080088da <__retarget_lock_release_recursive>:
 80088da:	4770      	bx	lr

080088dc <free>:
 80088dc:	4b02      	ldr	r3, [pc, #8]	; (80088e8 <free+0xc>)
 80088de:	4601      	mov	r1, r0
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	f000 b819 	b.w	8008918 <_free_r>
 80088e6:	bf00      	nop
 80088e8:	24000014 	.word	0x24000014

080088ec <memcpy>:
 80088ec:	440a      	add	r2, r1
 80088ee:	4291      	cmp	r1, r2
 80088f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088f4:	d100      	bne.n	80088f8 <memcpy+0xc>
 80088f6:	4770      	bx	lr
 80088f8:	b510      	push	{r4, lr}
 80088fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008902:	4291      	cmp	r1, r2
 8008904:	d1f9      	bne.n	80088fa <memcpy+0xe>
 8008906:	bd10      	pop	{r4, pc}

08008908 <memset>:
 8008908:	4402      	add	r2, r0
 800890a:	4603      	mov	r3, r0
 800890c:	4293      	cmp	r3, r2
 800890e:	d100      	bne.n	8008912 <memset+0xa>
 8008910:	4770      	bx	lr
 8008912:	f803 1b01 	strb.w	r1, [r3], #1
 8008916:	e7f9      	b.n	800890c <memset+0x4>

08008918 <_free_r>:
 8008918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800891a:	2900      	cmp	r1, #0
 800891c:	d048      	beq.n	80089b0 <_free_r+0x98>
 800891e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008922:	9001      	str	r0, [sp, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f1a1 0404 	sub.w	r4, r1, #4
 800892a:	bfb8      	it	lt
 800892c:	18e4      	addlt	r4, r4, r3
 800892e:	f000 f9dd 	bl	8008cec <__malloc_lock>
 8008932:	4a20      	ldr	r2, [pc, #128]	; (80089b4 <_free_r+0x9c>)
 8008934:	9801      	ldr	r0, [sp, #4]
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	4615      	mov	r5, r2
 800893a:	b933      	cbnz	r3, 800894a <_free_r+0x32>
 800893c:	6063      	str	r3, [r4, #4]
 800893e:	6014      	str	r4, [r2, #0]
 8008940:	b003      	add	sp, #12
 8008942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008946:	f000 b9d7 	b.w	8008cf8 <__malloc_unlock>
 800894a:	42a3      	cmp	r3, r4
 800894c:	d90b      	bls.n	8008966 <_free_r+0x4e>
 800894e:	6821      	ldr	r1, [r4, #0]
 8008950:	1862      	adds	r2, r4, r1
 8008952:	4293      	cmp	r3, r2
 8008954:	bf04      	itt	eq
 8008956:	681a      	ldreq	r2, [r3, #0]
 8008958:	685b      	ldreq	r3, [r3, #4]
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	bf04      	itt	eq
 800895e:	1852      	addeq	r2, r2, r1
 8008960:	6022      	streq	r2, [r4, #0]
 8008962:	602c      	str	r4, [r5, #0]
 8008964:	e7ec      	b.n	8008940 <_free_r+0x28>
 8008966:	461a      	mov	r2, r3
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	b10b      	cbz	r3, 8008970 <_free_r+0x58>
 800896c:	42a3      	cmp	r3, r4
 800896e:	d9fa      	bls.n	8008966 <_free_r+0x4e>
 8008970:	6811      	ldr	r1, [r2, #0]
 8008972:	1855      	adds	r5, r2, r1
 8008974:	42a5      	cmp	r5, r4
 8008976:	d10b      	bne.n	8008990 <_free_r+0x78>
 8008978:	6824      	ldr	r4, [r4, #0]
 800897a:	4421      	add	r1, r4
 800897c:	1854      	adds	r4, r2, r1
 800897e:	42a3      	cmp	r3, r4
 8008980:	6011      	str	r1, [r2, #0]
 8008982:	d1dd      	bne.n	8008940 <_free_r+0x28>
 8008984:	681c      	ldr	r4, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	6053      	str	r3, [r2, #4]
 800898a:	4421      	add	r1, r4
 800898c:	6011      	str	r1, [r2, #0]
 800898e:	e7d7      	b.n	8008940 <_free_r+0x28>
 8008990:	d902      	bls.n	8008998 <_free_r+0x80>
 8008992:	230c      	movs	r3, #12
 8008994:	6003      	str	r3, [r0, #0]
 8008996:	e7d3      	b.n	8008940 <_free_r+0x28>
 8008998:	6825      	ldr	r5, [r4, #0]
 800899a:	1961      	adds	r1, r4, r5
 800899c:	428b      	cmp	r3, r1
 800899e:	bf04      	itt	eq
 80089a0:	6819      	ldreq	r1, [r3, #0]
 80089a2:	685b      	ldreq	r3, [r3, #4]
 80089a4:	6063      	str	r3, [r4, #4]
 80089a6:	bf04      	itt	eq
 80089a8:	1949      	addeq	r1, r1, r5
 80089aa:	6021      	streq	r1, [r4, #0]
 80089ac:	6054      	str	r4, [r2, #4]
 80089ae:	e7c7      	b.n	8008940 <_free_r+0x28>
 80089b0:	b003      	add	sp, #12
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	24004a68 	.word	0x24004a68

080089b8 <_malloc_r>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	1ccd      	adds	r5, r1, #3
 80089bc:	f025 0503 	bic.w	r5, r5, #3
 80089c0:	3508      	adds	r5, #8
 80089c2:	2d0c      	cmp	r5, #12
 80089c4:	bf38      	it	cc
 80089c6:	250c      	movcc	r5, #12
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	db01      	blt.n	80089d2 <_malloc_r+0x1a>
 80089ce:	42a9      	cmp	r1, r5
 80089d0:	d903      	bls.n	80089da <_malloc_r+0x22>
 80089d2:	230c      	movs	r3, #12
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	2000      	movs	r0, #0
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089da:	f000 f987 	bl	8008cec <__malloc_lock>
 80089de:	4921      	ldr	r1, [pc, #132]	; (8008a64 <_malloc_r+0xac>)
 80089e0:	680a      	ldr	r2, [r1, #0]
 80089e2:	4614      	mov	r4, r2
 80089e4:	b99c      	cbnz	r4, 8008a0e <_malloc_r+0x56>
 80089e6:	4f20      	ldr	r7, [pc, #128]	; (8008a68 <_malloc_r+0xb0>)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	b923      	cbnz	r3, 80089f6 <_malloc_r+0x3e>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4630      	mov	r0, r6
 80089f0:	f000 f8a6 	bl	8008b40 <_sbrk_r>
 80089f4:	6038      	str	r0, [r7, #0]
 80089f6:	4629      	mov	r1, r5
 80089f8:	4630      	mov	r0, r6
 80089fa:	f000 f8a1 	bl	8008b40 <_sbrk_r>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d123      	bne.n	8008a4a <_malloc_r+0x92>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6033      	str	r3, [r6, #0]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f976 	bl	8008cf8 <__malloc_unlock>
 8008a0c:	e7e3      	b.n	80089d6 <_malloc_r+0x1e>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	1b5b      	subs	r3, r3, r5
 8008a12:	d417      	bmi.n	8008a44 <_malloc_r+0x8c>
 8008a14:	2b0b      	cmp	r3, #11
 8008a16:	d903      	bls.n	8008a20 <_malloc_r+0x68>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	441c      	add	r4, r3
 8008a1c:	6025      	str	r5, [r4, #0]
 8008a1e:	e004      	b.n	8008a2a <_malloc_r+0x72>
 8008a20:	6863      	ldr	r3, [r4, #4]
 8008a22:	42a2      	cmp	r2, r4
 8008a24:	bf0c      	ite	eq
 8008a26:	600b      	streq	r3, [r1, #0]
 8008a28:	6053      	strne	r3, [r2, #4]
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f000 f964 	bl	8008cf8 <__malloc_unlock>
 8008a30:	f104 000b 	add.w	r0, r4, #11
 8008a34:	1d23      	adds	r3, r4, #4
 8008a36:	f020 0007 	bic.w	r0, r0, #7
 8008a3a:	1ac2      	subs	r2, r0, r3
 8008a3c:	d0cc      	beq.n	80089d8 <_malloc_r+0x20>
 8008a3e:	1a1b      	subs	r3, r3, r0
 8008a40:	50a3      	str	r3, [r4, r2]
 8008a42:	e7c9      	b.n	80089d8 <_malloc_r+0x20>
 8008a44:	4622      	mov	r2, r4
 8008a46:	6864      	ldr	r4, [r4, #4]
 8008a48:	e7cc      	b.n	80089e4 <_malloc_r+0x2c>
 8008a4a:	1cc4      	adds	r4, r0, #3
 8008a4c:	f024 0403 	bic.w	r4, r4, #3
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d0e3      	beq.n	8008a1c <_malloc_r+0x64>
 8008a54:	1a21      	subs	r1, r4, r0
 8008a56:	4630      	mov	r0, r6
 8008a58:	f000 f872 	bl	8008b40 <_sbrk_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d1dd      	bne.n	8008a1c <_malloc_r+0x64>
 8008a60:	e7cf      	b.n	8008a02 <_malloc_r+0x4a>
 8008a62:	bf00      	nop
 8008a64:	24004a68 	.word	0x24004a68
 8008a68:	24004a6c 	.word	0x24004a6c

08008a6c <cleanup_glue>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	460c      	mov	r4, r1
 8008a70:	6809      	ldr	r1, [r1, #0]
 8008a72:	4605      	mov	r5, r0
 8008a74:	b109      	cbz	r1, 8008a7a <cleanup_glue+0xe>
 8008a76:	f7ff fff9 	bl	8008a6c <cleanup_glue>
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a82:	f7ff bf49 	b.w	8008918 <_free_r>
	...

08008a88 <_reclaim_reent>:
 8008a88:	4b2c      	ldr	r3, [pc, #176]	; (8008b3c <_reclaim_reent+0xb4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4283      	cmp	r3, r0
 8008a8e:	b570      	push	{r4, r5, r6, lr}
 8008a90:	4604      	mov	r4, r0
 8008a92:	d051      	beq.n	8008b38 <_reclaim_reent+0xb0>
 8008a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a96:	b143      	cbz	r3, 8008aaa <_reclaim_reent+0x22>
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d14a      	bne.n	8008b34 <_reclaim_reent+0xac>
 8008a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aa0:	6819      	ldr	r1, [r3, #0]
 8008aa2:	b111      	cbz	r1, 8008aaa <_reclaim_reent+0x22>
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff ff37 	bl	8008918 <_free_r>
 8008aaa:	6961      	ldr	r1, [r4, #20]
 8008aac:	b111      	cbz	r1, 8008ab4 <_reclaim_reent+0x2c>
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f7ff ff32 	bl	8008918 <_free_r>
 8008ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ab6:	b111      	cbz	r1, 8008abe <_reclaim_reent+0x36>
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7ff ff2d 	bl	8008918 <_free_r>
 8008abe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ac0:	b111      	cbz	r1, 8008ac8 <_reclaim_reent+0x40>
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f7ff ff28 	bl	8008918 <_free_r>
 8008ac8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008aca:	b111      	cbz	r1, 8008ad2 <_reclaim_reent+0x4a>
 8008acc:	4620      	mov	r0, r4
 8008ace:	f7ff ff23 	bl	8008918 <_free_r>
 8008ad2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008ad4:	b111      	cbz	r1, 8008adc <_reclaim_reent+0x54>
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7ff ff1e 	bl	8008918 <_free_r>
 8008adc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ade:	b111      	cbz	r1, 8008ae6 <_reclaim_reent+0x5e>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7ff ff19 	bl	8008918 <_free_r>
 8008ae6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ae8:	b111      	cbz	r1, 8008af0 <_reclaim_reent+0x68>
 8008aea:	4620      	mov	r0, r4
 8008aec:	f7ff ff14 	bl	8008918 <_free_r>
 8008af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af2:	b111      	cbz	r1, 8008afa <_reclaim_reent+0x72>
 8008af4:	4620      	mov	r0, r4
 8008af6:	f7ff ff0f 	bl	8008918 <_free_r>
 8008afa:	69a3      	ldr	r3, [r4, #24]
 8008afc:	b1e3      	cbz	r3, 8008b38 <_reclaim_reent+0xb0>
 8008afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b00:	4620      	mov	r0, r4
 8008b02:	4798      	blx	r3
 8008b04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b06:	b1b9      	cbz	r1, 8008b38 <_reclaim_reent+0xb0>
 8008b08:	4620      	mov	r0, r4
 8008b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b0e:	f7ff bfad 	b.w	8008a6c <cleanup_glue>
 8008b12:	5949      	ldr	r1, [r1, r5]
 8008b14:	b941      	cbnz	r1, 8008b28 <_reclaim_reent+0xa0>
 8008b16:	3504      	adds	r5, #4
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	2d80      	cmp	r5, #128	; 0x80
 8008b1c:	68d9      	ldr	r1, [r3, #12]
 8008b1e:	d1f8      	bne.n	8008b12 <_reclaim_reent+0x8a>
 8008b20:	4620      	mov	r0, r4
 8008b22:	f7ff fef9 	bl	8008918 <_free_r>
 8008b26:	e7ba      	b.n	8008a9e <_reclaim_reent+0x16>
 8008b28:	680e      	ldr	r6, [r1, #0]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f7ff fef4 	bl	8008918 <_free_r>
 8008b30:	4631      	mov	r1, r6
 8008b32:	e7ef      	b.n	8008b14 <_reclaim_reent+0x8c>
 8008b34:	2500      	movs	r5, #0
 8008b36:	e7ef      	b.n	8008b18 <_reclaim_reent+0x90>
 8008b38:	bd70      	pop	{r4, r5, r6, pc}
 8008b3a:	bf00      	nop
 8008b3c:	24000014 	.word	0x24000014

08008b40 <_sbrk_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d06      	ldr	r5, [pc, #24]	; (8008b5c <_sbrk_r+0x1c>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7f8 f938 	bl	8000dc0 <_sbrk>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_sbrk_r+0x1a>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_sbrk_r+0x1a>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	24004c28 	.word	0x24004c28

08008b60 <siprintf>:
 8008b60:	b40e      	push	{r1, r2, r3}
 8008b62:	b500      	push	{lr}
 8008b64:	b09c      	sub	sp, #112	; 0x70
 8008b66:	ab1d      	add	r3, sp, #116	; 0x74
 8008b68:	9002      	str	r0, [sp, #8]
 8008b6a:	9006      	str	r0, [sp, #24]
 8008b6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b70:	4809      	ldr	r0, [pc, #36]	; (8008b98 <siprintf+0x38>)
 8008b72:	9107      	str	r1, [sp, #28]
 8008b74:	9104      	str	r1, [sp, #16]
 8008b76:	4909      	ldr	r1, [pc, #36]	; (8008b9c <siprintf+0x3c>)
 8008b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7c:	9105      	str	r1, [sp, #20]
 8008b7e:	6800      	ldr	r0, [r0, #0]
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	a902      	add	r1, sp, #8
 8008b84:	f000 f91a 	bl	8008dbc <_svfiprintf_r>
 8008b88:	9b02      	ldr	r3, [sp, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	b01c      	add	sp, #112	; 0x70
 8008b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b94:	b003      	add	sp, #12
 8008b96:	4770      	bx	lr
 8008b98:	24000014 	.word	0x24000014
 8008b9c:	ffff0208 	.word	0xffff0208

08008ba0 <strstr>:
 8008ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba2:	780c      	ldrb	r4, [r1, #0]
 8008ba4:	b164      	cbz	r4, 8008bc0 <strstr+0x20>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	781a      	ldrb	r2, [r3, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	1c5e      	adds	r6, r3, #1
 8008bae:	b90a      	cbnz	r2, 8008bb4 <strstr+0x14>
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	e005      	b.n	8008bc0 <strstr+0x20>
 8008bb4:	4294      	cmp	r4, r2
 8008bb6:	d108      	bne.n	8008bca <strstr+0x2a>
 8008bb8:	460d      	mov	r5, r1
 8008bba:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008bbe:	b902      	cbnz	r2, 8008bc2 <strstr+0x22>
 8008bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008bc6:	4297      	cmp	r7, r2
 8008bc8:	d0f7      	beq.n	8008bba <strstr+0x1a>
 8008bca:	4633      	mov	r3, r6
 8008bcc:	e7ec      	b.n	8008ba8 <strstr+0x8>
	...

08008bd0 <_strtol_l.isra.0>:
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd6:	d001      	beq.n	8008bdc <_strtol_l.isra.0+0xc>
 8008bd8:	2b24      	cmp	r3, #36	; 0x24
 8008bda:	d906      	bls.n	8008bea <_strtol_l.isra.0+0x1a>
 8008bdc:	f7ff fe52 	bl	8008884 <__errno>
 8008be0:	2316      	movs	r3, #22
 8008be2:	6003      	str	r3, [r0, #0]
 8008be4:	2000      	movs	r0, #0
 8008be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bea:	4f3a      	ldr	r7, [pc, #232]	; (8008cd4 <_strtol_l.isra.0+0x104>)
 8008bec:	468e      	mov	lr, r1
 8008bee:	4676      	mov	r6, lr
 8008bf0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008bf4:	5de5      	ldrb	r5, [r4, r7]
 8008bf6:	f015 0508 	ands.w	r5, r5, #8
 8008bfa:	d1f8      	bne.n	8008bee <_strtol_l.isra.0+0x1e>
 8008bfc:	2c2d      	cmp	r4, #45	; 0x2d
 8008bfe:	d134      	bne.n	8008c6a <_strtol_l.isra.0+0x9a>
 8008c00:	f89e 4000 	ldrb.w	r4, [lr]
 8008c04:	f04f 0801 	mov.w	r8, #1
 8008c08:	f106 0e02 	add.w	lr, r6, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d05c      	beq.n	8008cca <_strtol_l.isra.0+0xfa>
 8008c10:	2b10      	cmp	r3, #16
 8008c12:	d10c      	bne.n	8008c2e <_strtol_l.isra.0+0x5e>
 8008c14:	2c30      	cmp	r4, #48	; 0x30
 8008c16:	d10a      	bne.n	8008c2e <_strtol_l.isra.0+0x5e>
 8008c18:	f89e 4000 	ldrb.w	r4, [lr]
 8008c1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c20:	2c58      	cmp	r4, #88	; 0x58
 8008c22:	d14d      	bne.n	8008cc0 <_strtol_l.isra.0+0xf0>
 8008c24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f10e 0e02 	add.w	lr, lr, #2
 8008c2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008c32:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008c36:	2600      	movs	r6, #0
 8008c38:	fbbc f9f3 	udiv	r9, ip, r3
 8008c3c:	4635      	mov	r5, r6
 8008c3e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c46:	2f09      	cmp	r7, #9
 8008c48:	d818      	bhi.n	8008c7c <_strtol_l.isra.0+0xac>
 8008c4a:	463c      	mov	r4, r7
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	dd24      	ble.n	8008c9a <_strtol_l.isra.0+0xca>
 8008c50:	2e00      	cmp	r6, #0
 8008c52:	db1f      	blt.n	8008c94 <_strtol_l.isra.0+0xc4>
 8008c54:	45a9      	cmp	r9, r5
 8008c56:	d31d      	bcc.n	8008c94 <_strtol_l.isra.0+0xc4>
 8008c58:	d101      	bne.n	8008c5e <_strtol_l.isra.0+0x8e>
 8008c5a:	45a2      	cmp	sl, r4
 8008c5c:	db1a      	blt.n	8008c94 <_strtol_l.isra.0+0xc4>
 8008c5e:	fb05 4503 	mla	r5, r5, r3, r4
 8008c62:	2601      	movs	r6, #1
 8008c64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c68:	e7eb      	b.n	8008c42 <_strtol_l.isra.0+0x72>
 8008c6a:	2c2b      	cmp	r4, #43	; 0x2b
 8008c6c:	bf08      	it	eq
 8008c6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008c72:	46a8      	mov	r8, r5
 8008c74:	bf08      	it	eq
 8008c76:	f106 0e02 	addeq.w	lr, r6, #2
 8008c7a:	e7c7      	b.n	8008c0c <_strtol_l.isra.0+0x3c>
 8008c7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008c80:	2f19      	cmp	r7, #25
 8008c82:	d801      	bhi.n	8008c88 <_strtol_l.isra.0+0xb8>
 8008c84:	3c37      	subs	r4, #55	; 0x37
 8008c86:	e7e1      	b.n	8008c4c <_strtol_l.isra.0+0x7c>
 8008c88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008c8c:	2f19      	cmp	r7, #25
 8008c8e:	d804      	bhi.n	8008c9a <_strtol_l.isra.0+0xca>
 8008c90:	3c57      	subs	r4, #87	; 0x57
 8008c92:	e7db      	b.n	8008c4c <_strtol_l.isra.0+0x7c>
 8008c94:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008c98:	e7e4      	b.n	8008c64 <_strtol_l.isra.0+0x94>
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	da05      	bge.n	8008caa <_strtol_l.isra.0+0xda>
 8008c9e:	2322      	movs	r3, #34	; 0x22
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	4665      	mov	r5, ip
 8008ca4:	b942      	cbnz	r2, 8008cb8 <_strtol_l.isra.0+0xe8>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	e79d      	b.n	8008be6 <_strtol_l.isra.0+0x16>
 8008caa:	f1b8 0f00 	cmp.w	r8, #0
 8008cae:	d000      	beq.n	8008cb2 <_strtol_l.isra.0+0xe2>
 8008cb0:	426d      	negs	r5, r5
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	d0f7      	beq.n	8008ca6 <_strtol_l.isra.0+0xd6>
 8008cb6:	b10e      	cbz	r6, 8008cbc <_strtol_l.isra.0+0xec>
 8008cb8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008cbc:	6011      	str	r1, [r2, #0]
 8008cbe:	e7f2      	b.n	8008ca6 <_strtol_l.isra.0+0xd6>
 8008cc0:	2430      	movs	r4, #48	; 0x30
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1b3      	bne.n	8008c2e <_strtol_l.isra.0+0x5e>
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	e7b1      	b.n	8008c2e <_strtol_l.isra.0+0x5e>
 8008cca:	2c30      	cmp	r4, #48	; 0x30
 8008ccc:	d0a4      	beq.n	8008c18 <_strtol_l.isra.0+0x48>
 8008cce:	230a      	movs	r3, #10
 8008cd0:	e7ad      	b.n	8008c2e <_strtol_l.isra.0+0x5e>
 8008cd2:	bf00      	nop
 8008cd4:	08009569 	.word	0x08009569

08008cd8 <strtol>:
 8008cd8:	4613      	mov	r3, r2
 8008cda:	460a      	mov	r2, r1
 8008cdc:	4601      	mov	r1, r0
 8008cde:	4802      	ldr	r0, [pc, #8]	; (8008ce8 <strtol+0x10>)
 8008ce0:	6800      	ldr	r0, [r0, #0]
 8008ce2:	f7ff bf75 	b.w	8008bd0 <_strtol_l.isra.0>
 8008ce6:	bf00      	nop
 8008ce8:	24000014 	.word	0x24000014

08008cec <__malloc_lock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_lock+0x8>)
 8008cee:	f7ff bdf3 	b.w	80088d8 <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	24004c20 	.word	0x24004c20

08008cf8 <__malloc_unlock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_unlock+0x8>)
 8008cfa:	f7ff bdee 	b.w	80088da <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	24004c20 	.word	0x24004c20

08008d04 <__ssputs_r>:
 8008d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	688e      	ldr	r6, [r1, #8]
 8008d0a:	429e      	cmp	r6, r3
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	4690      	mov	r8, r2
 8008d12:	461f      	mov	r7, r3
 8008d14:	d838      	bhi.n	8008d88 <__ssputs_r+0x84>
 8008d16:	898a      	ldrh	r2, [r1, #12]
 8008d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d1c:	d032      	beq.n	8008d84 <__ssputs_r+0x80>
 8008d1e:	6825      	ldr	r5, [r4, #0]
 8008d20:	6909      	ldr	r1, [r1, #16]
 8008d22:	eba5 0901 	sub.w	r9, r5, r1
 8008d26:	6965      	ldr	r5, [r4, #20]
 8008d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d30:	3301      	adds	r3, #1
 8008d32:	444b      	add	r3, r9
 8008d34:	106d      	asrs	r5, r5, #1
 8008d36:	429d      	cmp	r5, r3
 8008d38:	bf38      	it	cc
 8008d3a:	461d      	movcc	r5, r3
 8008d3c:	0553      	lsls	r3, r2, #21
 8008d3e:	d531      	bpl.n	8008da4 <__ssputs_r+0xa0>
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7ff fe39 	bl	80089b8 <_malloc_r>
 8008d46:	4606      	mov	r6, r0
 8008d48:	b950      	cbnz	r0, 8008d60 <__ssputs_r+0x5c>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	f8ca 3000 	str.w	r3, [sl]
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	6921      	ldr	r1, [r4, #16]
 8008d62:	464a      	mov	r2, r9
 8008d64:	f7ff fdc2 	bl	80088ec <memcpy>
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	6126      	str	r6, [r4, #16]
 8008d76:	6165      	str	r5, [r4, #20]
 8008d78:	444e      	add	r6, r9
 8008d7a:	eba5 0509 	sub.w	r5, r5, r9
 8008d7e:	6026      	str	r6, [r4, #0]
 8008d80:	60a5      	str	r5, [r4, #8]
 8008d82:	463e      	mov	r6, r7
 8008d84:	42be      	cmp	r6, r7
 8008d86:	d900      	bls.n	8008d8a <__ssputs_r+0x86>
 8008d88:	463e      	mov	r6, r7
 8008d8a:	4632      	mov	r2, r6
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	4641      	mov	r1, r8
 8008d90:	f000 faa8 	bl	80092e4 <memmove>
 8008d94:	68a3      	ldr	r3, [r4, #8]
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	1b9b      	subs	r3, r3, r6
 8008d9a:	4432      	add	r2, r6
 8008d9c:	60a3      	str	r3, [r4, #8]
 8008d9e:	6022      	str	r2, [r4, #0]
 8008da0:	2000      	movs	r0, #0
 8008da2:	e7db      	b.n	8008d5c <__ssputs_r+0x58>
 8008da4:	462a      	mov	r2, r5
 8008da6:	f000 fab7 	bl	8009318 <_realloc_r>
 8008daa:	4606      	mov	r6, r0
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1e1      	bne.n	8008d74 <__ssputs_r+0x70>
 8008db0:	6921      	ldr	r1, [r4, #16]
 8008db2:	4650      	mov	r0, sl
 8008db4:	f7ff fdb0 	bl	8008918 <_free_r>
 8008db8:	e7c7      	b.n	8008d4a <__ssputs_r+0x46>
	...

08008dbc <_svfiprintf_r>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	4698      	mov	r8, r3
 8008dc2:	898b      	ldrh	r3, [r1, #12]
 8008dc4:	061b      	lsls	r3, r3, #24
 8008dc6:	b09d      	sub	sp, #116	; 0x74
 8008dc8:	4607      	mov	r7, r0
 8008dca:	460d      	mov	r5, r1
 8008dcc:	4614      	mov	r4, r2
 8008dce:	d50e      	bpl.n	8008dee <_svfiprintf_r+0x32>
 8008dd0:	690b      	ldr	r3, [r1, #16]
 8008dd2:	b963      	cbnz	r3, 8008dee <_svfiprintf_r+0x32>
 8008dd4:	2140      	movs	r1, #64	; 0x40
 8008dd6:	f7ff fdef 	bl	80089b8 <_malloc_r>
 8008dda:	6028      	str	r0, [r5, #0]
 8008ddc:	6128      	str	r0, [r5, #16]
 8008dde:	b920      	cbnz	r0, 8008dea <_svfiprintf_r+0x2e>
 8008de0:	230c      	movs	r3, #12
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008de8:	e0d1      	b.n	8008f8e <_svfiprintf_r+0x1d2>
 8008dea:	2340      	movs	r3, #64	; 0x40
 8008dec:	616b      	str	r3, [r5, #20]
 8008dee:	2300      	movs	r3, #0
 8008df0:	9309      	str	r3, [sp, #36]	; 0x24
 8008df2:	2320      	movs	r3, #32
 8008df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dfc:	2330      	movs	r3, #48	; 0x30
 8008dfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fa8 <_svfiprintf_r+0x1ec>
 8008e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e06:	f04f 0901 	mov.w	r9, #1
 8008e0a:	4623      	mov	r3, r4
 8008e0c:	469a      	mov	sl, r3
 8008e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e12:	b10a      	cbz	r2, 8008e18 <_svfiprintf_r+0x5c>
 8008e14:	2a25      	cmp	r2, #37	; 0x25
 8008e16:	d1f9      	bne.n	8008e0c <_svfiprintf_r+0x50>
 8008e18:	ebba 0b04 	subs.w	fp, sl, r4
 8008e1c:	d00b      	beq.n	8008e36 <_svfiprintf_r+0x7a>
 8008e1e:	465b      	mov	r3, fp
 8008e20:	4622      	mov	r2, r4
 8008e22:	4629      	mov	r1, r5
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff ff6d 	bl	8008d04 <__ssputs_r>
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f000 80aa 	beq.w	8008f84 <_svfiprintf_r+0x1c8>
 8008e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e32:	445a      	add	r2, fp
 8008e34:	9209      	str	r2, [sp, #36]	; 0x24
 8008e36:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 80a2 	beq.w	8008f84 <_svfiprintf_r+0x1c8>
 8008e40:	2300      	movs	r3, #0
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e4a:	f10a 0a01 	add.w	sl, sl, #1
 8008e4e:	9304      	str	r3, [sp, #16]
 8008e50:	9307      	str	r3, [sp, #28]
 8008e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e56:	931a      	str	r3, [sp, #104]	; 0x68
 8008e58:	4654      	mov	r4, sl
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e60:	4851      	ldr	r0, [pc, #324]	; (8008fa8 <_svfiprintf_r+0x1ec>)
 8008e62:	f7f7 fa45 	bl	80002f0 <memchr>
 8008e66:	9a04      	ldr	r2, [sp, #16]
 8008e68:	b9d8      	cbnz	r0, 8008ea2 <_svfiprintf_r+0xe6>
 8008e6a:	06d0      	lsls	r0, r2, #27
 8008e6c:	bf44      	itt	mi
 8008e6e:	2320      	movmi	r3, #32
 8008e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e74:	0711      	lsls	r1, r2, #28
 8008e76:	bf44      	itt	mi
 8008e78:	232b      	movmi	r3, #43	; 0x2b
 8008e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e82:	2b2a      	cmp	r3, #42	; 0x2a
 8008e84:	d015      	beq.n	8008eb2 <_svfiprintf_r+0xf6>
 8008e86:	9a07      	ldr	r2, [sp, #28]
 8008e88:	4654      	mov	r4, sl
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	f04f 0c0a 	mov.w	ip, #10
 8008e90:	4621      	mov	r1, r4
 8008e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e96:	3b30      	subs	r3, #48	; 0x30
 8008e98:	2b09      	cmp	r3, #9
 8008e9a:	d94e      	bls.n	8008f3a <_svfiprintf_r+0x17e>
 8008e9c:	b1b0      	cbz	r0, 8008ecc <_svfiprintf_r+0x110>
 8008e9e:	9207      	str	r2, [sp, #28]
 8008ea0:	e014      	b.n	8008ecc <_svfiprintf_r+0x110>
 8008ea2:	eba0 0308 	sub.w	r3, r0, r8
 8008ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	9304      	str	r3, [sp, #16]
 8008eae:	46a2      	mov	sl, r4
 8008eb0:	e7d2      	b.n	8008e58 <_svfiprintf_r+0x9c>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	1d19      	adds	r1, r3, #4
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	9103      	str	r1, [sp, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	bfbb      	ittet	lt
 8008ebe:	425b      	neglt	r3, r3
 8008ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ec4:	9307      	strge	r3, [sp, #28]
 8008ec6:	9307      	strlt	r3, [sp, #28]
 8008ec8:	bfb8      	it	lt
 8008eca:	9204      	strlt	r2, [sp, #16]
 8008ecc:	7823      	ldrb	r3, [r4, #0]
 8008ece:	2b2e      	cmp	r3, #46	; 0x2e
 8008ed0:	d10c      	bne.n	8008eec <_svfiprintf_r+0x130>
 8008ed2:	7863      	ldrb	r3, [r4, #1]
 8008ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed6:	d135      	bne.n	8008f44 <_svfiprintf_r+0x188>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	1d1a      	adds	r2, r3, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	9203      	str	r2, [sp, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bfb8      	it	lt
 8008ee4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ee8:	3402      	adds	r4, #2
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fb8 <_svfiprintf_r+0x1fc>
 8008ef0:	7821      	ldrb	r1, [r4, #0]
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	4650      	mov	r0, sl
 8008ef6:	f7f7 f9fb 	bl	80002f0 <memchr>
 8008efa:	b140      	cbz	r0, 8008f0e <_svfiprintf_r+0x152>
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	eba0 000a 	sub.w	r0, r0, sl
 8008f02:	fa03 f000 	lsl.w	r0, r3, r0
 8008f06:	9b04      	ldr	r3, [sp, #16]
 8008f08:	4303      	orrs	r3, r0
 8008f0a:	3401      	adds	r4, #1
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f12:	4826      	ldr	r0, [pc, #152]	; (8008fac <_svfiprintf_r+0x1f0>)
 8008f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f18:	2206      	movs	r2, #6
 8008f1a:	f7f7 f9e9 	bl	80002f0 <memchr>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d038      	beq.n	8008f94 <_svfiprintf_r+0x1d8>
 8008f22:	4b23      	ldr	r3, [pc, #140]	; (8008fb0 <_svfiprintf_r+0x1f4>)
 8008f24:	bb1b      	cbnz	r3, 8008f6e <_svfiprintf_r+0x1b2>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	3307      	adds	r3, #7
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	3308      	adds	r3, #8
 8008f30:	9303      	str	r3, [sp, #12]
 8008f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f34:	4433      	add	r3, r6
 8008f36:	9309      	str	r3, [sp, #36]	; 0x24
 8008f38:	e767      	b.n	8008e0a <_svfiprintf_r+0x4e>
 8008f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f3e:	460c      	mov	r4, r1
 8008f40:	2001      	movs	r0, #1
 8008f42:	e7a5      	b.n	8008e90 <_svfiprintf_r+0xd4>
 8008f44:	2300      	movs	r3, #0
 8008f46:	3401      	adds	r4, #1
 8008f48:	9305      	str	r3, [sp, #20]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	f04f 0c0a 	mov.w	ip, #10
 8008f50:	4620      	mov	r0, r4
 8008f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f56:	3a30      	subs	r2, #48	; 0x30
 8008f58:	2a09      	cmp	r2, #9
 8008f5a:	d903      	bls.n	8008f64 <_svfiprintf_r+0x1a8>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0c5      	beq.n	8008eec <_svfiprintf_r+0x130>
 8008f60:	9105      	str	r1, [sp, #20]
 8008f62:	e7c3      	b.n	8008eec <_svfiprintf_r+0x130>
 8008f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f68:	4604      	mov	r4, r0
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7f0      	b.n	8008f50 <_svfiprintf_r+0x194>
 8008f6e:	ab03      	add	r3, sp, #12
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	462a      	mov	r2, r5
 8008f74:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <_svfiprintf_r+0x1f8>)
 8008f76:	a904      	add	r1, sp, #16
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f3af 8000 	nop.w
 8008f7e:	1c42      	adds	r2, r0, #1
 8008f80:	4606      	mov	r6, r0
 8008f82:	d1d6      	bne.n	8008f32 <_svfiprintf_r+0x176>
 8008f84:	89ab      	ldrh	r3, [r5, #12]
 8008f86:	065b      	lsls	r3, r3, #25
 8008f88:	f53f af2c 	bmi.w	8008de4 <_svfiprintf_r+0x28>
 8008f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f8e:	b01d      	add	sp, #116	; 0x74
 8008f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	ab03      	add	r3, sp, #12
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	462a      	mov	r2, r5
 8008f9a:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <_svfiprintf_r+0x1f8>)
 8008f9c:	a904      	add	r1, sp, #16
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f000 f87a 	bl	8009098 <_printf_i>
 8008fa4:	e7eb      	b.n	8008f7e <_svfiprintf_r+0x1c2>
 8008fa6:	bf00      	nop
 8008fa8:	08009669 	.word	0x08009669
 8008fac:	08009673 	.word	0x08009673
 8008fb0:	00000000 	.word	0x00000000
 8008fb4:	08008d05 	.word	0x08008d05
 8008fb8:	0800966f 	.word	0x0800966f

08008fbc <_printf_common>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	4699      	mov	r9, r3
 8008fc4:	688a      	ldr	r2, [r1, #8]
 8008fc6:	690b      	ldr	r3, [r1, #16]
 8008fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bfb8      	it	lt
 8008fd0:	4613      	movlt	r3, r2
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b10a      	cbz	r2, 8008fe2 <_printf_common+0x26>
 8008fde:	3301      	adds	r3, #1
 8008fe0:	6033      	str	r3, [r6, #0]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	0699      	lsls	r1, r3, #26
 8008fe6:	bf42      	ittt	mi
 8008fe8:	6833      	ldrmi	r3, [r6, #0]
 8008fea:	3302      	addmi	r3, #2
 8008fec:	6033      	strmi	r3, [r6, #0]
 8008fee:	6825      	ldr	r5, [r4, #0]
 8008ff0:	f015 0506 	ands.w	r5, r5, #6
 8008ff4:	d106      	bne.n	8009004 <_printf_common+0x48>
 8008ff6:	f104 0a19 	add.w	sl, r4, #25
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	6832      	ldr	r2, [r6, #0]
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc26      	bgt.n	8009052 <_printf_common+0x96>
 8009004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009008:	1e13      	subs	r3, r2, #0
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	bf18      	it	ne
 800900e:	2301      	movne	r3, #1
 8009010:	0692      	lsls	r2, r2, #26
 8009012:	d42b      	bmi.n	800906c <_printf_common+0xb0>
 8009014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009018:	4649      	mov	r1, r9
 800901a:	4638      	mov	r0, r7
 800901c:	47c0      	blx	r8
 800901e:	3001      	adds	r0, #1
 8009020:	d01e      	beq.n	8009060 <_printf_common+0xa4>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	68e5      	ldr	r5, [r4, #12]
 8009026:	6832      	ldr	r2, [r6, #0]
 8009028:	f003 0306 	and.w	r3, r3, #6
 800902c:	2b04      	cmp	r3, #4
 800902e:	bf08      	it	eq
 8009030:	1aad      	subeq	r5, r5, r2
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	bf0c      	ite	eq
 8009038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800903c:	2500      	movne	r5, #0
 800903e:	4293      	cmp	r3, r2
 8009040:	bfc4      	itt	gt
 8009042:	1a9b      	subgt	r3, r3, r2
 8009044:	18ed      	addgt	r5, r5, r3
 8009046:	2600      	movs	r6, #0
 8009048:	341a      	adds	r4, #26
 800904a:	42b5      	cmp	r5, r6
 800904c:	d11a      	bne.n	8009084 <_printf_common+0xc8>
 800904e:	2000      	movs	r0, #0
 8009050:	e008      	b.n	8009064 <_printf_common+0xa8>
 8009052:	2301      	movs	r3, #1
 8009054:	4652      	mov	r2, sl
 8009056:	4649      	mov	r1, r9
 8009058:	4638      	mov	r0, r7
 800905a:	47c0      	blx	r8
 800905c:	3001      	adds	r0, #1
 800905e:	d103      	bne.n	8009068 <_printf_common+0xac>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	3501      	adds	r5, #1
 800906a:	e7c6      	b.n	8008ffa <_printf_common+0x3e>
 800906c:	18e1      	adds	r1, r4, r3
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	2030      	movs	r0, #48	; 0x30
 8009072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009076:	4422      	add	r2, r4
 8009078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800907c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009080:	3302      	adds	r3, #2
 8009082:	e7c7      	b.n	8009014 <_printf_common+0x58>
 8009084:	2301      	movs	r3, #1
 8009086:	4622      	mov	r2, r4
 8009088:	4649      	mov	r1, r9
 800908a:	4638      	mov	r0, r7
 800908c:	47c0      	blx	r8
 800908e:	3001      	adds	r0, #1
 8009090:	d0e6      	beq.n	8009060 <_printf_common+0xa4>
 8009092:	3601      	adds	r6, #1
 8009094:	e7d9      	b.n	800904a <_printf_common+0x8e>
	...

08009098 <_printf_i>:
 8009098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	460c      	mov	r4, r1
 800909e:	4691      	mov	r9, r2
 80090a0:	7e27      	ldrb	r7, [r4, #24]
 80090a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090a4:	2f78      	cmp	r7, #120	; 0x78
 80090a6:	4680      	mov	r8, r0
 80090a8:	469a      	mov	sl, r3
 80090aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090ae:	d807      	bhi.n	80090c0 <_printf_i+0x28>
 80090b0:	2f62      	cmp	r7, #98	; 0x62
 80090b2:	d80a      	bhi.n	80090ca <_printf_i+0x32>
 80090b4:	2f00      	cmp	r7, #0
 80090b6:	f000 80d8 	beq.w	800926a <_printf_i+0x1d2>
 80090ba:	2f58      	cmp	r7, #88	; 0x58
 80090bc:	f000 80a3 	beq.w	8009206 <_printf_i+0x16e>
 80090c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090c8:	e03a      	b.n	8009140 <_printf_i+0xa8>
 80090ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ce:	2b15      	cmp	r3, #21
 80090d0:	d8f6      	bhi.n	80090c0 <_printf_i+0x28>
 80090d2:	a001      	add	r0, pc, #4	; (adr r0, 80090d8 <_printf_i+0x40>)
 80090d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009145 	.word	0x08009145
 80090e0:	080090c1 	.word	0x080090c1
 80090e4:	080090c1 	.word	0x080090c1
 80090e8:	080090c1 	.word	0x080090c1
 80090ec:	080090c1 	.word	0x080090c1
 80090f0:	08009145 	.word	0x08009145
 80090f4:	080090c1 	.word	0x080090c1
 80090f8:	080090c1 	.word	0x080090c1
 80090fc:	080090c1 	.word	0x080090c1
 8009100:	080090c1 	.word	0x080090c1
 8009104:	08009251 	.word	0x08009251
 8009108:	08009175 	.word	0x08009175
 800910c:	08009233 	.word	0x08009233
 8009110:	080090c1 	.word	0x080090c1
 8009114:	080090c1 	.word	0x080090c1
 8009118:	08009273 	.word	0x08009273
 800911c:	080090c1 	.word	0x080090c1
 8009120:	08009175 	.word	0x08009175
 8009124:	080090c1 	.word	0x080090c1
 8009128:	080090c1 	.word	0x080090c1
 800912c:	0800923b 	.word	0x0800923b
 8009130:	680b      	ldr	r3, [r1, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	600a      	str	r2, [r1, #0]
 8009138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800913c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009140:	2301      	movs	r3, #1
 8009142:	e0a3      	b.n	800928c <_printf_i+0x1f4>
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	6808      	ldr	r0, [r1, #0]
 8009148:	062e      	lsls	r6, r5, #24
 800914a:	f100 0304 	add.w	r3, r0, #4
 800914e:	d50a      	bpl.n	8009166 <_printf_i+0xce>
 8009150:	6805      	ldr	r5, [r0, #0]
 8009152:	600b      	str	r3, [r1, #0]
 8009154:	2d00      	cmp	r5, #0
 8009156:	da03      	bge.n	8009160 <_printf_i+0xc8>
 8009158:	232d      	movs	r3, #45	; 0x2d
 800915a:	426d      	negs	r5, r5
 800915c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009160:	485e      	ldr	r0, [pc, #376]	; (80092dc <_printf_i+0x244>)
 8009162:	230a      	movs	r3, #10
 8009164:	e019      	b.n	800919a <_printf_i+0x102>
 8009166:	f015 0f40 	tst.w	r5, #64	; 0x40
 800916a:	6805      	ldr	r5, [r0, #0]
 800916c:	600b      	str	r3, [r1, #0]
 800916e:	bf18      	it	ne
 8009170:	b22d      	sxthne	r5, r5
 8009172:	e7ef      	b.n	8009154 <_printf_i+0xbc>
 8009174:	680b      	ldr	r3, [r1, #0]
 8009176:	6825      	ldr	r5, [r4, #0]
 8009178:	1d18      	adds	r0, r3, #4
 800917a:	6008      	str	r0, [r1, #0]
 800917c:	0628      	lsls	r0, r5, #24
 800917e:	d501      	bpl.n	8009184 <_printf_i+0xec>
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	e002      	b.n	800918a <_printf_i+0xf2>
 8009184:	0669      	lsls	r1, r5, #25
 8009186:	d5fb      	bpl.n	8009180 <_printf_i+0xe8>
 8009188:	881d      	ldrh	r5, [r3, #0]
 800918a:	4854      	ldr	r0, [pc, #336]	; (80092dc <_printf_i+0x244>)
 800918c:	2f6f      	cmp	r7, #111	; 0x6f
 800918e:	bf0c      	ite	eq
 8009190:	2308      	moveq	r3, #8
 8009192:	230a      	movne	r3, #10
 8009194:	2100      	movs	r1, #0
 8009196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800919a:	6866      	ldr	r6, [r4, #4]
 800919c:	60a6      	str	r6, [r4, #8]
 800919e:	2e00      	cmp	r6, #0
 80091a0:	bfa2      	ittt	ge
 80091a2:	6821      	ldrge	r1, [r4, #0]
 80091a4:	f021 0104 	bicge.w	r1, r1, #4
 80091a8:	6021      	strge	r1, [r4, #0]
 80091aa:	b90d      	cbnz	r5, 80091b0 <_printf_i+0x118>
 80091ac:	2e00      	cmp	r6, #0
 80091ae:	d04d      	beq.n	800924c <_printf_i+0x1b4>
 80091b0:	4616      	mov	r6, r2
 80091b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80091b6:	fb03 5711 	mls	r7, r3, r1, r5
 80091ba:	5dc7      	ldrb	r7, [r0, r7]
 80091bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091c0:	462f      	mov	r7, r5
 80091c2:	42bb      	cmp	r3, r7
 80091c4:	460d      	mov	r5, r1
 80091c6:	d9f4      	bls.n	80091b2 <_printf_i+0x11a>
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d10b      	bne.n	80091e4 <_printf_i+0x14c>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	07df      	lsls	r7, r3, #31
 80091d0:	d508      	bpl.n	80091e4 <_printf_i+0x14c>
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	6861      	ldr	r1, [r4, #4]
 80091d6:	4299      	cmp	r1, r3
 80091d8:	bfde      	ittt	le
 80091da:	2330      	movle	r3, #48	; 0x30
 80091dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091e0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80091e4:	1b92      	subs	r2, r2, r6
 80091e6:	6122      	str	r2, [r4, #16]
 80091e8:	f8cd a000 	str.w	sl, [sp]
 80091ec:	464b      	mov	r3, r9
 80091ee:	aa03      	add	r2, sp, #12
 80091f0:	4621      	mov	r1, r4
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7ff fee2 	bl	8008fbc <_printf_common>
 80091f8:	3001      	adds	r0, #1
 80091fa:	d14c      	bne.n	8009296 <_printf_i+0x1fe>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009200:	b004      	add	sp, #16
 8009202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009206:	4835      	ldr	r0, [pc, #212]	; (80092dc <_printf_i+0x244>)
 8009208:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	680e      	ldr	r6, [r1, #0]
 8009210:	061f      	lsls	r7, r3, #24
 8009212:	f856 5b04 	ldr.w	r5, [r6], #4
 8009216:	600e      	str	r6, [r1, #0]
 8009218:	d514      	bpl.n	8009244 <_printf_i+0x1ac>
 800921a:	07d9      	lsls	r1, r3, #31
 800921c:	bf44      	itt	mi
 800921e:	f043 0320 	orrmi.w	r3, r3, #32
 8009222:	6023      	strmi	r3, [r4, #0]
 8009224:	b91d      	cbnz	r5, 800922e <_printf_i+0x196>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	f023 0320 	bic.w	r3, r3, #32
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	2310      	movs	r3, #16
 8009230:	e7b0      	b.n	8009194 <_printf_i+0xfc>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	f043 0320 	orr.w	r3, r3, #32
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	2378      	movs	r3, #120	; 0x78
 800923c:	4828      	ldr	r0, [pc, #160]	; (80092e0 <_printf_i+0x248>)
 800923e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009242:	e7e3      	b.n	800920c <_printf_i+0x174>
 8009244:	065e      	lsls	r6, r3, #25
 8009246:	bf48      	it	mi
 8009248:	b2ad      	uxthmi	r5, r5
 800924a:	e7e6      	b.n	800921a <_printf_i+0x182>
 800924c:	4616      	mov	r6, r2
 800924e:	e7bb      	b.n	80091c8 <_printf_i+0x130>
 8009250:	680b      	ldr	r3, [r1, #0]
 8009252:	6826      	ldr	r6, [r4, #0]
 8009254:	6960      	ldr	r0, [r4, #20]
 8009256:	1d1d      	adds	r5, r3, #4
 8009258:	600d      	str	r5, [r1, #0]
 800925a:	0635      	lsls	r5, r6, #24
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	d501      	bpl.n	8009264 <_printf_i+0x1cc>
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	e002      	b.n	800926a <_printf_i+0x1d2>
 8009264:	0671      	lsls	r1, r6, #25
 8009266:	d5fb      	bpl.n	8009260 <_printf_i+0x1c8>
 8009268:	8018      	strh	r0, [r3, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	4616      	mov	r6, r2
 8009270:	e7ba      	b.n	80091e8 <_printf_i+0x150>
 8009272:	680b      	ldr	r3, [r1, #0]
 8009274:	1d1a      	adds	r2, r3, #4
 8009276:	600a      	str	r2, [r1, #0]
 8009278:	681e      	ldr	r6, [r3, #0]
 800927a:	6862      	ldr	r2, [r4, #4]
 800927c:	2100      	movs	r1, #0
 800927e:	4630      	mov	r0, r6
 8009280:	f7f7 f836 	bl	80002f0 <memchr>
 8009284:	b108      	cbz	r0, 800928a <_printf_i+0x1f2>
 8009286:	1b80      	subs	r0, r0, r6
 8009288:	6060      	str	r0, [r4, #4]
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	6123      	str	r3, [r4, #16]
 800928e:	2300      	movs	r3, #0
 8009290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009294:	e7a8      	b.n	80091e8 <_printf_i+0x150>
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	4632      	mov	r2, r6
 800929a:	4649      	mov	r1, r9
 800929c:	4640      	mov	r0, r8
 800929e:	47d0      	blx	sl
 80092a0:	3001      	adds	r0, #1
 80092a2:	d0ab      	beq.n	80091fc <_printf_i+0x164>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	079b      	lsls	r3, r3, #30
 80092a8:	d413      	bmi.n	80092d2 <_printf_i+0x23a>
 80092aa:	68e0      	ldr	r0, [r4, #12]
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	4298      	cmp	r0, r3
 80092b0:	bfb8      	it	lt
 80092b2:	4618      	movlt	r0, r3
 80092b4:	e7a4      	b.n	8009200 <_printf_i+0x168>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4632      	mov	r2, r6
 80092ba:	4649      	mov	r1, r9
 80092bc:	4640      	mov	r0, r8
 80092be:	47d0      	blx	sl
 80092c0:	3001      	adds	r0, #1
 80092c2:	d09b      	beq.n	80091fc <_printf_i+0x164>
 80092c4:	3501      	adds	r5, #1
 80092c6:	68e3      	ldr	r3, [r4, #12]
 80092c8:	9903      	ldr	r1, [sp, #12]
 80092ca:	1a5b      	subs	r3, r3, r1
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	dcf2      	bgt.n	80092b6 <_printf_i+0x21e>
 80092d0:	e7eb      	b.n	80092aa <_printf_i+0x212>
 80092d2:	2500      	movs	r5, #0
 80092d4:	f104 0619 	add.w	r6, r4, #25
 80092d8:	e7f5      	b.n	80092c6 <_printf_i+0x22e>
 80092da:	bf00      	nop
 80092dc:	0800967a 	.word	0x0800967a
 80092e0:	0800968b 	.word	0x0800968b

080092e4 <memmove>:
 80092e4:	4288      	cmp	r0, r1
 80092e6:	b510      	push	{r4, lr}
 80092e8:	eb01 0402 	add.w	r4, r1, r2
 80092ec:	d902      	bls.n	80092f4 <memmove+0x10>
 80092ee:	4284      	cmp	r4, r0
 80092f0:	4623      	mov	r3, r4
 80092f2:	d807      	bhi.n	8009304 <memmove+0x20>
 80092f4:	1e43      	subs	r3, r0, #1
 80092f6:	42a1      	cmp	r1, r4
 80092f8:	d008      	beq.n	800930c <memmove+0x28>
 80092fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009302:	e7f8      	b.n	80092f6 <memmove+0x12>
 8009304:	4402      	add	r2, r0
 8009306:	4601      	mov	r1, r0
 8009308:	428a      	cmp	r2, r1
 800930a:	d100      	bne.n	800930e <memmove+0x2a>
 800930c:	bd10      	pop	{r4, pc}
 800930e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009316:	e7f7      	b.n	8009308 <memmove+0x24>

08009318 <_realloc_r>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	4607      	mov	r7, r0
 800931c:	4614      	mov	r4, r2
 800931e:	460e      	mov	r6, r1
 8009320:	b921      	cbnz	r1, 800932c <_realloc_r+0x14>
 8009322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009326:	4611      	mov	r1, r2
 8009328:	f7ff bb46 	b.w	80089b8 <_malloc_r>
 800932c:	b922      	cbnz	r2, 8009338 <_realloc_r+0x20>
 800932e:	f7ff faf3 	bl	8008918 <_free_r>
 8009332:	4625      	mov	r5, r4
 8009334:	4628      	mov	r0, r5
 8009336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009338:	f000 f814 	bl	8009364 <_malloc_usable_size_r>
 800933c:	42a0      	cmp	r0, r4
 800933e:	d20f      	bcs.n	8009360 <_realloc_r+0x48>
 8009340:	4621      	mov	r1, r4
 8009342:	4638      	mov	r0, r7
 8009344:	f7ff fb38 	bl	80089b8 <_malloc_r>
 8009348:	4605      	mov	r5, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	d0f2      	beq.n	8009334 <_realloc_r+0x1c>
 800934e:	4631      	mov	r1, r6
 8009350:	4622      	mov	r2, r4
 8009352:	f7ff facb 	bl	80088ec <memcpy>
 8009356:	4631      	mov	r1, r6
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff fadd 	bl	8008918 <_free_r>
 800935e:	e7e9      	b.n	8009334 <_realloc_r+0x1c>
 8009360:	4635      	mov	r5, r6
 8009362:	e7e7      	b.n	8009334 <_realloc_r+0x1c>

08009364 <_malloc_usable_size_r>:
 8009364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009368:	1f18      	subs	r0, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfbc      	itt	lt
 800936e:	580b      	ldrlt	r3, [r1, r0]
 8009370:	18c0      	addlt	r0, r0, r3
 8009372:	4770      	bx	lr

08009374 <_init>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr

08009380 <_fini>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr
