
blinky-queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008488  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a04  08008a04  00018a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ba8  24000078  08008a8c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c20  08008a8c  00024c20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ff0b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004bcc  00000000  00000000  0004ffb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00054b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016f0  00000000  00000000  000563e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000330c5  00000000  00000000  00057ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e5ad  00000000  00000000  0008ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149bd5  00000000  00000000  000a914a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f2d1f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a2c  00000000  00000000  001f2d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008720 	.word	0x08008720

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08008720 	.word	0x08008720

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of CommandsToBlink */
	CommandsToBlinkHandle = osMessageQueueNew (16, sizeof(uint8_t), &CommandsToBlink_attributes);
 80005ec:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_FREERTOS_Init+0x68>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	2010      	movs	r0, #16
 80005f2:	f005 f9b2 	bl	800595a <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_FREERTOS_Init+0x6c>)
 80005fa:	6013      	str	r3, [r2, #0]

	/* creation of times_blinked */
	times_blinkedHandle = osMessageQueueNew (16, sizeof(uint8_t), &times_blinked_attributes);
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_FREERTOS_Init+0x70>)
 80005fe:	2101      	movs	r1, #1
 8000600:	2010      	movs	r0, #16
 8000602:	f005 f9aa 	bl	800595a <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_FREERTOS_Init+0x74>)
 800060a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of CommandLine */
	CommandLineHandle = osThreadNew(StartCommandLine, NULL, &CommandLine_attributes);
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_FREERTOS_Init+0x78>)
 800060e:	2100      	movs	r1, #0
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 8000612:	f005 f8f5 	bl	8005800 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_FREERTOS_Init+0x80>)
 800061a:	6013      	str	r3, [r2, #0]

	/* creation of Blinker1 */
	Blinker1Handle = osThreadNew(StartBlinker1, NULL, &Blinker1_attributes);
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_FREERTOS_Init+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_FREERTOS_Init+0x88>)
 8000622:	f005 f8ed 	bl	8005800 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

	/* creation of Blinker2 */
	Blinker2Handle = osThreadNew(StartBlinker2, NULL, &Blinker2_attributes);
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_FREERTOS_Init+0x94>)
 8000632:	f005 f8e5 	bl	8005800 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_FREERTOS_Init+0x98>)
 800063a:	6013      	str	r3, [r2, #0]

	/* creation of Blinker3 */
	Blinker3Handle = osThreadNew(StartBlinker3, NULL, &Blinker3_attributes);
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MX_FREERTOS_Init+0x9c>)
 800063e:	2100      	movs	r1, #0
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_FREERTOS_Init+0xa0>)
 8000642:	f005 f8dd 	bl	8005800 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_FREERTOS_Init+0xa4>)
 800064a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08008838 	.word	0x08008838
 8000654:	24004aec 	.word	0x24004aec
 8000658:	08008850 	.word	0x08008850
 800065c:	24004af0 	.word	0x24004af0
 8000660:	080087a8 	.word	0x080087a8
 8000664:	08000691 	.word	0x08000691
 8000668:	24004ad4 	.word	0x24004ad4
 800066c:	080087cc 	.word	0x080087cc
 8000670:	0800072d 	.word	0x0800072d
 8000674:	24004ad0 	.word	0x24004ad0
 8000678:	080087f0 	.word	0x080087f0
 800067c:	0800073d 	.word	0x0800073d
 8000680:	24004ae4 	.word	0x24004ae4
 8000684:	08008814 	.word	0x08008814
 8000688:	0800074d 	.word	0x0800074d
 800068c:	24004ae8 	.word	0x24004ae8

08000690 <StartCommandLine>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommandLine */
void StartCommandLine(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommandLine */
	uint8_t local_pointer = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	75fb      	strb	r3, [r7, #23]
	char* delay_ptr = NULL;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
	uint16_t delay_len = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	81fb      	strh	r3, [r7, #14]
	/* Infinite loop */
	for(;;)
	{
		HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3,(uint8_t*)rx_buffer ,1, 100);
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	491c      	ldr	r1, [pc, #112]	; (800071c <StartCommandLine+0x8c>)
 80006aa:	481d      	ldr	r0, [pc, #116]	; (8000720 <StartCommandLine+0x90>)
 80006ac:	f003 fe30 	bl	8004310 <HAL_UART_Receive>
 80006b0:	4603      	mov	r3, r0
 80006b2:	737b      	strb	r3, [r7, #13]
		if(ret == HAL_OK){
 80006b4:	7b7b      	ldrb	r3, [r7, #13]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d12c      	bne.n	8000714 <StartCommandLine+0x84>
			HAL_UART_Transmit(&huart3, (uint8_t*)rx_buffer, 1, 100);
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	2201      	movs	r2, #1
 80006be:	4917      	ldr	r1, [pc, #92]	; (800071c <StartCommandLine+0x8c>)
 80006c0:	4817      	ldr	r0, [pc, #92]	; (8000720 <StartCommandLine+0x90>)
 80006c2:	f003 fd8f 	bl	80041e4 <HAL_UART_Transmit>
			local_buffer[local_pointer] = rx_buffer[0];
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	4a14      	ldr	r2, [pc, #80]	; (800071c <StartCommandLine+0x8c>)
 80006ca:	7811      	ldrb	r1, [r2, #0]
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <StartCommandLine+0x94>)
 80006ce:	54d1      	strb	r1, [r2, r3]
			if(local_buffer[local_pointer] == '\n' || local_buffer[local_pointer] == '\r'){
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <StartCommandLine+0x94>)
 80006d4:	5cd3      	ldrb	r3, [r2, r3]
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d004      	beq.n	80006e4 <StartCommandLine+0x54>
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <StartCommandLine+0x94>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	2b0d      	cmp	r3, #13
 80006e2:	d10f      	bne.n	8000704 <StartCommandLine+0x74>
				delay_ptr = strstr(local_buffer, DELAY_TRIGGER_WORD);
 80006e4:	4910      	ldr	r1, [pc, #64]	; (8000728 <StartCommandLine+0x98>)
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <StartCommandLine+0x94>)
 80006e8:	f007 ff18 	bl	800851c <strstr>
 80006ec:	6138      	str	r0, [r7, #16]
				if (delay_ptr != NULL) {
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00f      	beq.n	8000714 <StartCommandLine+0x84>
					delay_len = atoi(delay_ptr + 5);
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	3305      	adds	r3, #5
 80006f8:	4618      	mov	r0, r3
 80006fa:	f007 fe5f 	bl	80083bc <atoi>
 80006fe:	4603      	mov	r3, r0
 8000700:	81fb      	strh	r3, [r7, #14]
				if (delay_ptr != NULL) {
 8000702:	e007      	b.n	8000714 <StartCommandLine+0x84>
				}
			}else{
				local_pointer++;
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	3301      	adds	r3, #1
 8000708:	75fb      	strb	r3, [r7, #23]
				if(local_pointer > RX_BUFFER_LENGTH){
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2b64      	cmp	r3, #100	; 0x64
 800070e:	d901      	bls.n	8000714 <StartCommandLine+0x84>
					local_pointer = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	75fb      	strb	r3, [r7, #23]
				}
			}
		}
		osDelay(10);
 8000714:	200a      	movs	r0, #10
 8000716:	f005 f905 	bl	8005924 <osDelay>
	{
 800071a:	e7c3      	b.n	80006a4 <StartCommandLine+0x14>
 800071c:	24004ad8 	.word	0x24004ad8
 8000720:	24004b40 	.word	0x24004b40
 8000724:	24004a68 	.word	0x24004a68
 8000728:	08008788 	.word	0x08008788

0800072c <StartBlinker1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker1 */
void StartBlinker1(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlinker1 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f005 f8f5 	bl	8005924 <osDelay>
 800073a:	e7fb      	b.n	8000734 <StartBlinker1+0x8>

0800073c <StartBlinker2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker2 */
void StartBlinker2(void *argument)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlinker2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f005 f8ed 	bl	8005924 <osDelay>
 800074a:	e7fb      	b.n	8000744 <StartBlinker2+0x8>

0800074c <StartBlinker3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinker3 */
void StartBlinker3(void *argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlinker3 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f005 f8e5 	bl	8005924 <osDelay>
 800075a:	e7fb      	b.n	8000754 <StartBlinker3+0x8>

0800075c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	; 0x38
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b80      	ldr	r3, [pc, #512]	; (8000974 <MX_GPIO_Init+0x218>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000778:	4a7e      	ldr	r2, [pc, #504]	; (8000974 <MX_GPIO_Init+0x218>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000782:	4b7c      	ldr	r3, [pc, #496]	; (8000974 <MX_GPIO_Init+0x218>)
 8000784:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	623b      	str	r3, [r7, #32]
 800078e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000790:	4b78      	ldr	r3, [pc, #480]	; (8000974 <MX_GPIO_Init+0x218>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000796:	4a77      	ldr	r2, [pc, #476]	; (8000974 <MX_GPIO_Init+0x218>)
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a0:	4b74      	ldr	r3, [pc, #464]	; (8000974 <MX_GPIO_Init+0x218>)
 80007a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a6:	f003 0320 	and.w	r3, r3, #32
 80007aa:	61fb      	str	r3, [r7, #28]
 80007ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	4b71      	ldr	r3, [pc, #452]	; (8000974 <MX_GPIO_Init+0x218>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b4:	4a6f      	ldr	r2, [pc, #444]	; (8000974 <MX_GPIO_Init+0x218>)
 80007b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007be:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <MX_GPIO_Init+0x218>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	4b69      	ldr	r3, [pc, #420]	; (8000974 <MX_GPIO_Init+0x218>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d2:	4a68      	ldr	r2, [pc, #416]	; (8000974 <MX_GPIO_Init+0x218>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007dc:	4b65      	ldr	r3, [pc, #404]	; (8000974 <MX_GPIO_Init+0x218>)
 80007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b62      	ldr	r3, [pc, #392]	; (8000974 <MX_GPIO_Init+0x218>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f0:	4a60      	ldr	r2, [pc, #384]	; (8000974 <MX_GPIO_Init+0x218>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <MX_GPIO_Init+0x218>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000808:	4b5a      	ldr	r3, [pc, #360]	; (8000974 <MX_GPIO_Init+0x218>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080e:	4a59      	ldr	r2, [pc, #356]	; (8000974 <MX_GPIO_Init+0x218>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000818:	4b56      	ldr	r3, [pc, #344]	; (8000974 <MX_GPIO_Init+0x218>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b53      	ldr	r3, [pc, #332]	; (8000974 <MX_GPIO_Init+0x218>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082c:	4a51      	ldr	r2, [pc, #324]	; (8000974 <MX_GPIO_Init+0x218>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000836:	4b4f      	ldr	r3, [pc, #316]	; (8000974 <MX_GPIO_Init+0x218>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <MX_GPIO_Init+0x218>)
 8000846:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084a:	4a4a      	ldr	r2, [pc, #296]	; (8000974 <MX_GPIO_Init+0x218>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000854:	4b47      	ldr	r3, [pc, #284]	; (8000974 <MX_GPIO_Init+0x218>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000868:	4843      	ldr	r0, [pc, #268]	; (8000978 <MX_GPIO_Init+0x21c>)
 800086a:	f000 fe1d 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0101 	movw	r1, #16385	; 0x4001
 8000874:	4841      	ldr	r0, [pc, #260]	; (800097c <MX_GPIO_Init+0x220>)
 8000876:	f000 fe17 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2102      	movs	r1, #2
 800087e:	4840      	ldr	r0, [pc, #256]	; (8000980 <MX_GPIO_Init+0x224>)
 8000880:	f000 fe12 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	483a      	ldr	r0, [pc, #232]	; (8000984 <MX_GPIO_Init+0x228>)
 800089a:	f000 fc55 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	4830      	ldr	r0, [pc, #192]	; (8000978 <MX_GPIO_Init+0x21c>)
 80008b8:	f000 fc46 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008bc:	f244 0301 	movw	r3, #16385	; 0x4001
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	4829      	ldr	r0, [pc, #164]	; (800097c <MX_GPIO_Init+0x220>)
 80008d6:	f000 fc37 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4826      	ldr	r0, [pc, #152]	; (8000988 <MX_GPIO_Init+0x22c>)
 80008f0:	f000 fc2a 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80008f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4820      	ldr	r0, [pc, #128]	; (800098c <MX_GPIO_Init+0x230>)
 800090a:	f000 fc1d 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000920:	230a      	movs	r3, #10
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_GPIO_Init+0x230>)
 800092c:	f000 fc0c 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000930:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	4810      	ldr	r0, [pc, #64]	; (800098c <MX_GPIO_Init+0x230>)
 800094a:	f000 fbfd 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094e:	2302      	movs	r3, #2
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_GPIO_Init+0x224>)
 8000966:	f000 fbef 	bl	8001148 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3738      	adds	r7, #56	; 0x38
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	58024400 	.word	0x58024400
 8000978:	58021400 	.word	0x58021400
 800097c:	58020400 	.word	0x58020400
 8000980:	58021000 	.word	0x58021000
 8000984:	58020800 	.word	0x58020800
 8000988:	58021800 	.word	0x58021800
 800098c:	58020000 	.word	0x58020000

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fa9c 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f80e 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f7ff fede 	bl	800075c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009a0:	f000 f9b2 	bl	8000d08 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009a4:	f000 fa62 	bl	8000e6c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009a8:	f004 fee0 	bl	800576c <osKernelInitialize>
  MX_FREERTOS_Init();
 80009ac:	f7ff fe1c 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009b0:	f004 ff00 	bl	80057b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x24>
	...

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09c      	sub	sp, #112	; 0x70
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	224c      	movs	r2, #76	; 0x4c
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 fd36 	bl	8008438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2220      	movs	r2, #32
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f007 fd30 	bl	8008438 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009d8:	2004      	movs	r0, #4
 80009da:	f000 fd7f 	bl	80014dc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <SystemClock_Config+0xd8>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <SystemClock_Config+0xd8>)
 80009e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemClock_Config+0xd8>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fa:	bf00      	nop
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <SystemClock_Config+0xd8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a08:	d1f8      	bne.n	80009fc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a0a:	2321      	movs	r3, #33	; 0x21
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a0e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a14:	2301      	movs	r3, #1
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a24:	2318      	movs	r3, #24
 8000a26:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a34:	230c      	movs	r3, #12
 8000a36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fda3 	bl	8001590 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a50:	f000 f832 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	233f      	movs	r3, #63	; 0x3f
 8000a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2102      	movs	r1, #2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 f98d 	bl	8001d98 <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a84:	f000 f818 	bl	8000ab8 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3770      	adds	r7, #112	; 0x70
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	58024800 	.word	0x58024800

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 fa4f 	bl	8000f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40001400 	.word	0x40001400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_MspInit+0x38>)
 8000acc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_MspInit+0x38>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x38>)
 8000adc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	210f      	movs	r1, #15
 8000aec:	f06f 0001 	mvn.w	r0, #1
 8000af0:	f000 fb02 	bl	80010f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	58024400 	.word	0x58024400

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d827      	bhi.n	8000b5e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	2037      	movs	r0, #55	; 0x37
 8000b14:	f000 faf0 	bl	80010f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b18:	2037      	movs	r0, #55	; 0x37
 8000b1a:	f000 fb07 	bl	800112c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b1e:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <HAL_InitTick+0xc4>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <HAL_InitTick+0xc8>)
 8000b26:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b2a:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <HAL_InitTick+0xc8>)
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_InitTick+0xc8>)
 8000b36:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b42:	f107 0210 	add.w	r2, r7, #16
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fcaf 	bl	80024b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <HAL_InitTick+0x6a>
 8000b5c:	e001      	b.n	8000b62 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e02b      	b.n	8000bba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b62:	f001 fc79 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8000b66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000b68:	e004      	b.n	8000b74 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b6a:	f001 fc75 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_InitTick+0xcc>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	0c9b      	lsrs	r3, r3, #18
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_InitTick+0xd0>)
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_InitTick+0xd4>)
 8000b86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_InitTick+0xd0>)
 8000b8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b8e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b90:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_InitTick+0xd0>)
 8000b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b94:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_InitTick+0xd0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_InitTick+0xd0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <HAL_InitTick+0xd0>)
 8000ba4:	f002 fff4 	bl	8003b90 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <HAL_InitTick+0xd0>)
 8000bb0:	f003 f850 	bl	8003c54 <HAL_TIM_Base_Start_IT>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	e000      	b.n	8000bba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3740      	adds	r7, #64	; 0x40
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	24000008 	.word	0x24000008
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	24004af4 	.word	0x24004af4
 8000bd4:	40001400 	.word	0x40001400

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <TIM7_IRQHandler+0x10>)
 8000c0a:	f003 f89b 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24004af4 	.word	0x24004af4

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <SystemInit+0xd0>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <SystemInit+0xd0>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <SystemInit+0xd4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d807      	bhi.n	8000c48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <SystemInit+0xd4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 030f 	bic.w	r3, r3, #15
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <SystemInit+0xd4>)
 8000c42:	f043 0303 	orr.w	r3, r3, #3
 8000c46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <SystemInit+0xd8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <SystemInit+0xd8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <SystemInit+0xd8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <SystemInit+0xd8>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4924      	ldr	r1, [pc, #144]	; (8000cf0 <SystemInit+0xd8>)
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <SystemInit+0xdc>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <SystemInit+0xd4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <SystemInit+0xd4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 030f 	bic.w	r3, r3, #15
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <SystemInit+0xd4>)
 8000c7c:	f043 0303 	orr.w	r3, r3, #3
 8000c80:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <SystemInit+0xd8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <SystemInit+0xd8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <SystemInit+0xd8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <SystemInit+0xd8>)
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <SystemInit+0xe0>)
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <SystemInit+0xd8>)
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <SystemInit+0xe4>)
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <SystemInit+0xd8>)
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <SystemInit+0xe8>)
 8000ca4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <SystemInit+0xd8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <SystemInit+0xd8>)
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <SystemInit+0xe8>)
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <SystemInit+0xd8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <SystemInit+0xd8>)
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <SystemInit+0xe8>)
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <SystemInit+0xd8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SystemInit+0xd8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <SystemInit+0xd8>)
 8000cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <SystemInit+0xd8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <SystemInit+0xec>)
 8000cd8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cdc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00
 8000cec:	52002000 	.word	0x52002000
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cf8:	02020200 	.word	0x02020200
 8000cfc:	01ff0000 	.word	0x01ff0000
 8000d00:	01010280 	.word	0x01010280
 8000d04:	52004000 	.word	0x52004000

08000d08 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <MX_USART3_UART_Init+0x94>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d50:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d52:	f003 f9f7 	bl	8004144 <HAL_UART_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f7ff feac 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d60:	2100      	movs	r1, #0
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d64:	f004 fbf4 	bl	8005550 <HAL_UARTEx_SetTxFifoThreshold>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6e:	f7ff fea3 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d76:	f004 fc29 	bl	80055cc <HAL_UARTEx_SetRxFifoThreshold>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d80:	f7ff fe9a 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d86:	f004 fbaa 	bl	80054de <HAL_UARTEx_DisableFifoMode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f7ff fe92 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24004b40 	.word	0x24004b40
 8000d9c:	40004800 	.word	0x40004800

08000da0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0b8      	sub	sp, #224	; 0xe0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	22b8      	movs	r2, #184	; 0xb8
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f007 fb39 	bl	8008438 <memset>
  if(uartHandle->Instance==USART3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <HAL_UART_MspInit+0xc0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d142      	bne.n	8000e56 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 fba8 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dea:	f7ff fe65 	bl	8000ab8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000df0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e00:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0xc4>)
 8000e1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_UART_MspInit+0xc8>)
 8000e52:	f000 f979 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e56:	bf00      	nop
 8000e58:	37e0      	adds	r7, #224	; 0xe0
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004800 	.word	0x40004800
 8000e64:	58024400 	.word	0x58024400
 8000e68:	58020c00 	.word	0x58020c00

08000e6c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e80:	f7ff feca 	bl	8000c18 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f007 fa91 	bl	80083d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fd6f 	bl	8000990 <main>
  bx  lr
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000eb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ebc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000ec0:	08008a14 	.word	0x08008a14
  ldr r2, =_sbss
 8000ec4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000ec8:	24004c20 	.word	0x24004c20

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f903 	bl	80010e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000edc:	f001 f912 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_Init+0x68>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	f003 030f 	and.w	r3, r3, #15
 8000eec:	4913      	ldr	r1, [pc, #76]	; (8000f3c <HAL_Init+0x6c>)
 8000eee:	5ccb      	ldrb	r3, [r1, r3]
 8000ef0:	f003 031f 	and.w	r3, r3, #31
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_Init+0x68>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_Init+0x6c>)
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_Init+0x70>)
 8000f12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f14:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <HAL_Init+0x74>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f7ff fdf0 	bl	8000b00 <HAL_InitTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e002      	b.n	8000f30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2a:	f7ff fdcb 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	08008868 	.word	0x08008868
 8000f40:	24000004 	.word	0x24000004
 8000f44:	24000000 	.word	0x24000000

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2400000c 	.word	0x2400000c
 8000f6c:	24004bd0 	.word	0x24004bd0

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	24004bd0 	.word	0x24004bd0

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	05fa0000 	.word	0x05fa0000

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <__NVIC_EnableIRQ+0x38>)
 8001006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff4c 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001106:	f7ff ff63 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 800110a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ffb3 	bl	800107c <NVIC_EncodePriority>
 8001116:	4602      	mov	r2, r0
 8001118:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff82 	bl	8001028 <__NVIC_SetPriority>
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff56 	bl	8000fec <__NVIC_EnableIRQ>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_GPIO_Init+0x234>)
 8001158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800115a:	e194      	b.n	8001486 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8186 	beq.w	8001480 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b01      	cmp	r3, #1
 800117e:	d005      	beq.n	800118c <HAL_GPIO_Init+0x44>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d130      	bne.n	80011ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 0201 	and.w	r2, r3, #1
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d017      	beq.n	800122a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d123      	bne.n	800127e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	69b9      	ldr	r1, [r7, #24]
 800127a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0203 	and.w	r2, r3, #3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80e0 	beq.w	8001480 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <HAL_GPIO_Init+0x238>)
 80012c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012c6:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HAL_GPIO_Init+0x238>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_GPIO_Init+0x238>)
 80012d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a29      	ldr	r2, [pc, #164]	; (8001384 <HAL_GPIO_Init+0x23c>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <HAL_GPIO_Init+0x240>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d052      	beq.n	80013b0 <HAL_GPIO_Init+0x268>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <HAL_GPIO_Init+0x244>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d031      	beq.n	8001376 <HAL_GPIO_Init+0x22e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_GPIO_Init+0x248>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x22a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x24c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x250>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_GPIO_Init+0x254>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_GPIO_Init+0x258>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_GPIO_Init+0x25c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x260>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_GPIO_Init+0x264>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x20e>
 8001352:	2309      	movs	r3, #9
 8001354:	e02d      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001356:	230a      	movs	r3, #10
 8001358:	e02b      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800135a:	2308      	movs	r3, #8
 800135c:	e029      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800135e:	2307      	movs	r3, #7
 8001360:	e027      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001362:	2306      	movs	r3, #6
 8001364:	e025      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001366:	2305      	movs	r3, #5
 8001368:	e023      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800136a:	2304      	movs	r3, #4
 800136c:	e021      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800136e:	2303      	movs	r3, #3
 8001370:	e01f      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001372:	2302      	movs	r3, #2
 8001374:	e01d      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001376:	2301      	movs	r3, #1
 8001378:	e01b      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800137a:	bf00      	nop
 800137c:	58000080 	.word	0x58000080
 8001380:	58024400 	.word	0x58024400
 8001384:	58000400 	.word	0x58000400
 8001388:	58020000 	.word	0x58020000
 800138c:	58020400 	.word	0x58020400
 8001390:	58020800 	.word	0x58020800
 8001394:	58020c00 	.word	0x58020c00
 8001398:	58021000 	.word	0x58021000
 800139c:	58021400 	.word	0x58021400
 80013a0:	58021800 	.word	0x58021800
 80013a4:	58021c00 	.word	0x58021c00
 80013a8:	58022000 	.word	0x58022000
 80013ac:	58022400 	.word	0x58022400
 80013b0:	2300      	movs	r3, #0
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	f002 0203 	and.w	r2, r2, #3
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	4093      	lsls	r3, r2
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c2:	4938      	ldr	r1, [pc, #224]	; (80014a4 <HAL_GPIO_Init+0x35c>)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3301      	adds	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	f47f ae63 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	58000400 	.word	0x58000400

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_PWREx_ConfigSupply+0xb0>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	2b06      	cmp	r3, #6
 80014ee:	d00a      	beq.n	8001506 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_PWREx_ConfigSupply+0xb0>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d001      	beq.n	8001502 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e040      	b.n	8001584 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e03e      	b.n	8001584 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_PWREx_ConfigSupply+0xb0>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800150e:	491f      	ldr	r1, [pc, #124]	; (800158c <HAL_PWREx_ConfigSupply+0xb0>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4313      	orrs	r3, r2
 8001514:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001516:	f7ff fd2b 	bl	8000f70 <HAL_GetTick>
 800151a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800151c:	e009      	b.n	8001532 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800151e:	f7ff fd27 	bl	8000f70 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152c:	d901      	bls.n	8001532 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e028      	b.n	8001584 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_PWREx_ConfigSupply+0xb0>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800153e:	d1ee      	bne.n	800151e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b1e      	cmp	r3, #30
 8001544:	d008      	beq.n	8001558 <HAL_PWREx_ConfigSupply+0x7c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b2e      	cmp	r3, #46	; 0x2e
 800154a:	d005      	beq.n	8001558 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b1d      	cmp	r3, #29
 8001550:	d002      	beq.n	8001558 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b2d      	cmp	r3, #45	; 0x2d
 8001556:	d114      	bne.n	8001582 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001558:	f7ff fd0a 	bl	8000f70 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800155e:	e009      	b.n	8001574 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001560:	f7ff fd06 	bl	8000f70 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156e:	d901      	bls.n	8001574 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e007      	b.n	8001584 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_PWREx_ConfigSupply+0xb0>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d1ee      	bne.n	8001560 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	58024800 	.word	0x58024800

08001590 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e3f3      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80b3 	beq.w	8001716 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b0:	4b9e      	ldr	r3, [pc, #632]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015ba:	4b9c      	ldr	r3, [pc, #624]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d007      	beq.n	80015d6 <HAL_RCC_OscConfig+0x46>
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	2b18      	cmp	r3, #24
 80015ca:	d112      	bne.n	80015f2 <HAL_RCC_OscConfig+0x62>
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d10d      	bne.n	80015f2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d6:	4b95      	ldr	r3, [pc, #596]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8098 	beq.w	8001714 <HAL_RCC_OscConfig+0x184>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 8093 	bne.w	8001714 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e3cb      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x7a>
 80015fc:	4b8b      	ldr	r3, [pc, #556]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a8a      	ldr	r2, [pc, #552]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e058      	b.n	80016bc <HAL_RCC_OscConfig+0x12c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d112      	bne.n	8001638 <HAL_RCC_OscConfig+0xa8>
 8001612:	4b86      	ldr	r3, [pc, #536]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a85      	ldr	r2, [pc, #532]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b83      	ldr	r3, [pc, #524]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a82      	ldr	r2, [pc, #520]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001624:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b80      	ldr	r3, [pc, #512]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7f      	ldr	r2, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e041      	b.n	80016bc <HAL_RCC_OscConfig+0x12c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d112      	bne.n	8001668 <HAL_RCC_OscConfig+0xd8>
 8001642:	4b7a      	ldr	r3, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a79      	ldr	r2, [pc, #484]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b77      	ldr	r3, [pc, #476]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a76      	ldr	r2, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001654:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b74      	ldr	r3, [pc, #464]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a73      	ldr	r2, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e029      	b.n	80016bc <HAL_RCC_OscConfig+0x12c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001670:	d112      	bne.n	8001698 <HAL_RCC_OscConfig+0x108>
 8001672:	4b6e      	ldr	r3, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6d      	ldr	r2, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6a      	ldr	r2, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a67      	ldr	r2, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e011      	b.n	80016bc <HAL_RCC_OscConfig+0x12c>
 8001698:	4b64      	ldr	r3, [pc, #400]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a63      	ldr	r2, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b61      	ldr	r3, [pc, #388]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a60      	ldr	r2, [pc, #384]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5d      	ldr	r2, [pc, #372]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80016b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc54 	bl	8000f70 <HAL_GetTick>
 80016c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fc50 	bl	8000f70 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e355      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016de:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x13c>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc40 	bl	8000f70 <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc3c 	bl	8000f70 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e341      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001706:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x164>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 808c 	beq.w	800183c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800172c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_RCC_OscConfig+0x1ba>
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	2b18      	cmp	r3, #24
 800173e:	d137      	bne.n	80017b0 <HAL_RCC_OscConfig+0x220>
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d132      	bne.n	80017b0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174a:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_RCC_OscConfig+0x1d2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e313      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 0219 	bic.w	r2, r3, #25
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	492f      	ldr	r1, [pc, #188]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001774:	f7ff fbfc 	bl	8000f70 <HAL_GetTick>
 8001778:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff fbf8 	bl	8000f70 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e2fd      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	061b      	lsls	r3, r3, #24
 80017a8:	4920      	ldr	r1, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ae:	e045      	b.n	800183c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d026      	beq.n	8001806 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 0219 	bic.w	r2, r3, #25
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4919      	ldr	r1, [pc, #100]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fbd1 	bl	8000f70 <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fbcd 	bl	8000f70 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e2d2      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	490b      	ldr	r1, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e01a      	b.n	800183c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_RCC_OscConfig+0x29c>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fbad 	bl	8000f70 <HAL_GetTick>
 8001816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fba9 	bl	8000f70 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d903      	bls.n	8001830 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e2ae      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
 800182c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001830:	4b99      	ldr	r3, [pc, #612]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ee      	bne.n	800181a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	d06a      	beq.n	800191e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001848:	4b93      	ldr	r3, [pc, #588]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001850:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001852:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b08      	cmp	r3, #8
 800185c:	d007      	beq.n	800186e <HAL_RCC_OscConfig+0x2de>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b18      	cmp	r3, #24
 8001862:	d11b      	bne.n	800189c <HAL_RCC_OscConfig+0x30c>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800186e:	4b8a      	ldr	r3, [pc, #552]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x2f6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b80      	cmp	r3, #128	; 0x80
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e281      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	4980      	ldr	r1, [pc, #512]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001896:	4313      	orrs	r3, r2
 8001898:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800189a:	e040      	b.n	800191e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d023      	beq.n	80018ec <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018a4:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb5e 	bl	8000f70 <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb5a 	bl	8000f70 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e25f      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018d6:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	061b      	lsls	r3, r3, #24
 80018e4:	496c      	ldr	r1, [pc, #432]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ec:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a69      	ldr	r2, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80018f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb3a 	bl	8000f70 <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001900:	f7ff fb36 	bl	8000f70 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e23b      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001912:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d036      	beq.n	8001998 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d019      	beq.n	8001966 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001936:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff fb17 	bl	8000f70 <HAL_GetTick>
 8001942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fb13 	bl	8000f70 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e218      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001958:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x3b6>
 8001964:	e018      	b.n	8001998 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196a:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fafd 	bl	8000f70 <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff faf9 	bl	8000f70 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1fe      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800198c:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d036      	beq.n	8001a12 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d019      	beq.n	80019e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ac:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a39      	ldr	r2, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80019b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019b8:	f7ff fada 	bl	8000f70 <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019c0:	f7ff fad6 	bl	8000f70 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1db      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019d2:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x430>
 80019de:	e018      	b.n	8001a12 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 80019e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019ec:	f7ff fac0 	bl	8000f70 <HAL_GetTick>
 80019f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019f4:	f7ff fabc 	bl	8000f70 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e1c1      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80af 	beq.w	8001b7e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_OscConfig+0x50c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_RCC_OscConfig+0x50c>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff faa0 	bl	8000f70 <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a34:	f7ff fa9c 	bl	8000f70 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1a1      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_RCC_OscConfig+0x50c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4d8>
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70
 8001a66:	e05b      	b.n	8001b20 <HAL_RCC_OscConfig+0x590>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d117      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x510>
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a02      	ldr	r2, [pc, #8]	; (8001a98 <HAL_RCC_OscConfig+0x508>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	e044      	b.n	8001b20 <HAL_RCC_OscConfig+0x590>
 8001a96:	bf00      	nop
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58024800 	.word	0x58024800
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d112      	bne.n	8001ace <HAL_RCC_OscConfig+0x53e>
 8001aa8:	4b95      	ldr	r3, [pc, #596]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a94      	ldr	r2, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a91      	ldr	r2, [pc, #580]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac0:	4b8f      	ldr	r3, [pc, #572]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a8e      	ldr	r2, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	e028      	b.n	8001b20 <HAL_RCC_OscConfig+0x590>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b85      	cmp	r3, #133	; 0x85
 8001ad4:	d112      	bne.n	8001afc <HAL_RCC_OscConfig+0x56c>
 8001ad6:	4b8a      	ldr	r3, [pc, #552]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	4a89      	ldr	r2, [pc, #548]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae2:	4b87      	ldr	r3, [pc, #540]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a86      	ldr	r2, [pc, #536]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b84      	ldr	r3, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a83      	ldr	r2, [pc, #524]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
 8001afa:	e011      	b.n	8001b20 <HAL_RCC_OscConfig+0x590>
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a7f      	ldr	r2, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a7c      	ldr	r2, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	4b7a      	ldr	r3, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a79      	ldr	r2, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d015      	beq.n	8001b54 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b28:	f7ff fa22 	bl	8000f70 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b30:	f7ff fa1e 	bl	8000f70 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e121      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0ee      	beq.n	8001b30 <HAL_RCC_OscConfig+0x5a0>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff fa0c 	bl	8000f70 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fa08 	bl	8000f70 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e10b      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ee      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8100 	beq.w	8001d88 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b88:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b90:	2b18      	cmp	r3, #24
 8001b92:	f000 80bb 	beq.w	8001d0c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	f040 8095 	bne.w	8001cca <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f9e0 	bl	8000f70 <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f9dc 	bl	8000f70 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0e1      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd2:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x774>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4946      	ldr	r1, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	628b      	str	r3, [r1, #40]	; 0x28
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	025b      	lsls	r3, r3, #9
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	3b01      	subs	r3, #1
 8001c16:	061b      	lsls	r3, r3, #24
 8001c18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c1c:	4938      	ldr	r1, [pc, #224]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	4a36      	ldr	r2, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c32:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <HAL_RCC_OscConfig+0x778>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c3a:	00d2      	lsls	r2, r2, #3
 8001c3c:	4930      	ldr	r1, [pc, #192]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f023 020c 	bic.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	492c      	ldr	r1, [pc, #176]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f023 0202 	bic.w	r2, r3, #2
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	4927      	ldr	r1, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f965 	bl	8000f70 <HAL_GetTick>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff f961 	bl	8000f70 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e066      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x71a>
 8001cc8:	e05e      	b.n	8001d88 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f94b 	bl	8000f70 <HAL_GetTick>
 8001cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f947 	bl	8000f70 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e04c      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_RCC_OscConfig+0x770>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x74e>
 8001cfc:	e044      	b.n	8001d88 <HAL_RCC_OscConfig+0x7f8>
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400
 8001d04:	fffffc0c 	.word	0xfffffc0c
 8001d08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x804>)
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_OscConfig+0x804>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d031      	beq.n	8001d84 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f003 0203 	and.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d12a      	bne.n	8001d84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d122      	bne.n	8001d84 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d11a      	bne.n	8001d84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0a5b      	lsrs	r3, r3, #9
 8001d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d111      	bne.n	8001d84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	0e1b      	lsrs	r3, r3, #24
 8001d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3730      	adds	r7, #48	; 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	58024400 	.word	0x58024400

08001d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e19c      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 020f 	bic.w	r2, r3, #15
 8001dc2:	4985      	ldr	r1, [pc, #532]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b83      	ldr	r3, [pc, #524]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e184      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d908      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df8:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4975      	ldr	r1, [pc, #468]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d908      	bls.n	8001e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	496a      	ldr	r1, [pc, #424]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d908      	bls.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e54:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	495e      	ldr	r1, [pc, #376]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d908      	bls.n	8001e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e82:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4953      	ldr	r1, [pc, #332]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d908      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f023 020f 	bic.w	r2, r3, #15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4947      	ldr	r1, [pc, #284]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d055      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ece:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4940      	ldr	r1, [pc, #256]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d121      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0f6      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d115      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ea      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0de      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f28:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d6      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f023 0207 	bic.w	r2, r3, #7
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4925      	ldr	r1, [pc, #148]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff f811 	bl	8000f70 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f52:	f7ff f80d 	bl	8000f70 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0be      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d1eb      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d010      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d208      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f023 020f 	bic.w	r2, r3, #15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d214      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 020f 	bic.w	r2, r3, #15
 8001fbe:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e086      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
 8001fd8:	52002000 	.word	0x52002000
 8001fdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d010      	beq.n	800200e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d208      	bcs.n	800200e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4939      	ldr	r1, [pc, #228]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800200a:	4313      	orrs	r3, r2
 800200c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002026:	429a      	cmp	r2, r3
 8002028:	d208      	bcs.n	800203c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	492e      	ldr	r1, [pc, #184]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002038:	4313      	orrs	r3, r2
 800203a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002054:	429a      	cmp	r2, r3
 8002056:	d208      	bcs.n	800206a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4922      	ldr	r1, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002066:	4313      	orrs	r3, r2
 8002068:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002082:	429a      	cmp	r2, r3
 8002084:	d208      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4917      	ldr	r1, [pc, #92]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002094:	4313      	orrs	r3, r2
 8002096:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002098:	f000 f834 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	4912      	ldr	r1, [pc, #72]	; (80020f4 <HAL_RCC_ClockConfig+0x35c>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x35c>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x360>)
 80020ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x364>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x368>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fd10 	bl	8000b00 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	58024400 	.word	0x58024400
 80020f4:	08008868 	.word	0x08008868
 80020f8:	24000004 	.word	0x24000004
 80020fc:	24000000 	.word	0x24000000
 8002100:	24000008 	.word	0x24000008

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210a:	4bb3      	ldr	r3, [pc, #716]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002112:	2b18      	cmp	r3, #24
 8002114:	f200 8155 	bhi.w	80023c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002118:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002185 	.word	0x08002185
 8002124:	080023c3 	.word	0x080023c3
 8002128:	080023c3 	.word	0x080023c3
 800212c:	080023c3 	.word	0x080023c3
 8002130:	080023c3 	.word	0x080023c3
 8002134:	080023c3 	.word	0x080023c3
 8002138:	080023c3 	.word	0x080023c3
 800213c:	080023c3 	.word	0x080023c3
 8002140:	080021ab 	.word	0x080021ab
 8002144:	080023c3 	.word	0x080023c3
 8002148:	080023c3 	.word	0x080023c3
 800214c:	080023c3 	.word	0x080023c3
 8002150:	080023c3 	.word	0x080023c3
 8002154:	080023c3 	.word	0x080023c3
 8002158:	080023c3 	.word	0x080023c3
 800215c:	080023c3 	.word	0x080023c3
 8002160:	080021b1 	.word	0x080021b1
 8002164:	080023c3 	.word	0x080023c3
 8002168:	080023c3 	.word	0x080023c3
 800216c:	080023c3 	.word	0x080023c3
 8002170:	080023c3 	.word	0x080023c3
 8002174:	080023c3 	.word	0x080023c3
 8002178:	080023c3 	.word	0x080023c3
 800217c:	080023c3 	.word	0x080023c3
 8002180:	080021b7 	.word	0x080021b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002184:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002190:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	4a90      	ldr	r2, [pc, #576]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80021a2:	e111      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021a4:	4b8d      	ldr	r3, [pc, #564]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021a6:	61bb      	str	r3, [r7, #24]
    break;
 80021a8:	e10e      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021aa:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021ac:	61bb      	str	r3, [r7, #24]
    break;
 80021ae:	e10b      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021b0:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021b2:	61bb      	str	r3, [r7, #24]
    break;
 80021b4:	e108      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021c0:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021cc:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021d6:	4b80      	ldr	r3, [pc, #512]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80e1 	beq.w	80023bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f000 8083 	beq.w	8002308 <HAL_RCC_GetSysClockFreq+0x204>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b02      	cmp	r3, #2
 8002206:	f200 80a1 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x248>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x114>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d056      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002216:	e099      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002218:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02d      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002224:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	4a6b      	ldr	r2, [pc, #428]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002262:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800226a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800227e:	e087      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800228e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022c2:	e065      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002306:	e043      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800234a:	e021      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800238e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	0a5b      	lsrs	r3, r3, #9
 8002396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80023ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b4:	ee17 3a90 	vmov	r3, s15
 80023b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    break;
 80023c0:	e002      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023c4:	61bb      	str	r3, [r7, #24]
    break;
 80023c6:	bf00      	nop
  }

  return sysclockfreq;
 80023c8:	69bb      	ldr	r3, [r7, #24]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400
 80023dc:	03d09000 	.word	0x03d09000
 80023e0:	003d0900 	.word	0x003d0900
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	46000000 	.word	0x46000000
 80023ec:	4c742400 	.word	0x4c742400
 80023f0:	4a742400 	.word	0x4a742400
 80023f4:	4af42400 	.word	0x4af42400

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80023fe:	f7ff fe81 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002402:	4602      	mov	r2, r0
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_RCC_GetHCLKFreq+0x50>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	490f      	ldr	r1, [pc, #60]	; (800244c <HAL_RCC_GetHCLKFreq+0x54>)
 8002410:	5ccb      	ldrb	r3, [r1, r3]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_GetHCLKFreq+0x50>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_RCC_GetHCLKFreq+0x54>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_RCC_GetHCLKFreq+0x58>)
 8002434:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002436:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_GetHCLKFreq+0x58>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	58024400 	.word	0x58024400
 800244c:	08008868 	.word	0x08008868
 8002450:	24000004 	.word	0x24000004
 8002454:	24000000 	.word	0x24000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800245c:	f7ff ffcc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	58024400 	.word	0x58024400
 8002480:	08008868 	.word	0x08008868

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002488:	f7ff ffb6 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	58024400 	.word	0x58024400
 80024ac:	08008868 	.word	0x08008868

080024b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	223f      	movs	r2, #63	; 0x3f
 80024be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCC_GetClockConfig+0x7c>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f003 0207 	and.w	r2, r3, #7
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_RCC_GetClockConfig+0x7c>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_RCC_GetClockConfig+0x7c>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 020f 	and.w	r2, r3, #15
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_GetClockConfig+0x7c>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_RCC_GetClockConfig+0x7c>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_GetClockConfig+0x7c>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_RCC_GetClockConfig+0x7c>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_GetClockConfig+0x80>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	58024400 	.word	0x58024400
 8002530:	52002000 	.word	0x52002000

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002540:	2300      	movs	r3, #0
 8002542:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d03f      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002558:	d02a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800255a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800255e:	d824      	bhi.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002564:	d018      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256a:	d81e      	bhi.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002574:	d007      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002576:	e018      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002578:	4ba6      	ldr	r3, [pc, #664]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	4aa5      	ldr	r2, [pc, #660]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800257e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002584:	e015      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f001 f99b 	bl	80038c8 <RCCEx_PLL2_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002596:	e00c      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	2102      	movs	r1, #2
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 fa44 	bl	8003a2c <RCCEx_PLL3_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025a8:	e003      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
      break;
 80025ae:	e000      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025b8:	4b96      	ldr	r3, [pc, #600]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c4:	4993      	ldr	r1, [pc, #588]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	650b      	str	r3, [r1, #80]	; 0x50
 80025ca:	e001      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d03d      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d826      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002601 	.word	0x08002601
 80025f0:	0800260f 	.word	0x0800260f
 80025f4:	08002621 	.word	0x08002621
 80025f8:	08002639 	.word	0x08002639
 80025fc:	08002639 	.word	0x08002639
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002600:	4b84      	ldr	r3, [pc, #528]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4a83      	ldr	r2, [pc, #524]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800260c:	e015      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f001 f957 	bl	80038c8 <RCCEx_PLL2_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800261e:	e00c      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3324      	adds	r3, #36	; 0x24
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fa00 	bl	8003a2c <RCCEx_PLL3_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002630:	e003      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
      break;
 8002636:	e000      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002640:	4b74      	ldr	r3, [pc, #464]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	f023 0207 	bic.w	r2, r3, #7
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	4971      	ldr	r1, [pc, #452]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	650b      	str	r3, [r1, #80]	; 0x50
 8002652:	e001      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002660:	2b00      	cmp	r3, #0
 8002662:	d04a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800266c:	d031      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800266e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002672:	d82b      	bhi.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002678:	d02d      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800267a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267e:	d825      	bhi.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002680:	2bc0      	cmp	r3, #192	; 0xc0
 8002682:	d02a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002684:	2bc0      	cmp	r3, #192	; 0xc0
 8002686:	d821      	bhi.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d016      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d81d      	bhi.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d007      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002698:	e018      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800269a:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	4a5d      	ldr	r2, [pc, #372]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80026a6:	e019      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f90a 	bl	80038c8 <RCCEx_PLL2_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80026b8:	e010      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3324      	adds	r3, #36	; 0x24
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 f9b3 	bl	8003a2c <RCCEx_PLL3_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80026ca:	e007      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	75fb      	strb	r3, [r7, #23]
      break;
 80026d0:	e004      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e002      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80026da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80026e2:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	4949      	ldr	r1, [pc, #292]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	650b      	str	r3, [r1, #80]	; 0x50
 80026f4:	e001      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d04f      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800270e:	d036      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002710:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002714:	d830      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800271a:	d032      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800271c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002720:	d82a      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002722:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002726:	d02e      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002728:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800272c:	d824      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d018      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002738:	d81e      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800273e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002742:	d007      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002744:	e018      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	4a32      	ldr	r2, [pc, #200]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002752:	e019      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f8b4 	bl	80038c8 <RCCEx_PLL2_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002764:	e010      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3324      	adds	r3, #36	; 0x24
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f001 f95d 	bl	8003a2c <RCCEx_PLL3_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002776:	e007      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	75fb      	strb	r3, [r7, #23]
      break;
 800277c:	e004      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	491e      	ldr	r1, [pc, #120]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	650b      	str	r3, [r1, #80]	; 0x50
 80027a0:	e001      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d034      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b6:	2b30      	cmp	r3, #48	; 0x30
 80027b8:	d01c      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80027ba:	2b30      	cmp	r3, #48	; 0x30
 80027bc:	d817      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d00c      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d813      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d10f      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80027da:	e00e      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	2102      	movs	r1, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 f870 	bl	80038c8 <RCCEx_PLL2_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80027ec:	e005      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
      break;
 80027f2:	e002      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80027f4:	bf00      	nop
 80027f6:	e000      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80027f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	4901      	ldr	r1, [pc, #4]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002812:	e003      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d047      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002830:	d030      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002836:	d82a      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800283c:	d02c      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800283e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002842:	d824      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002848:	d018      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	d81e      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002858:	d007      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800285a:	e018      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800285c:	4bb0      	ldr	r3, [pc, #704]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	4aaf      	ldr	r2, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002868:	e017      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f001 f829 	bl	80038c8 <RCCEx_PLL2_Config>
 8002876:	4603      	mov	r3, r0
 8002878:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800287a:	e00e      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3324      	adds	r3, #36	; 0x24
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f001 f8d2 	bl	8003a2c <RCCEx_PLL3_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800288c:	e005      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	75fb      	strb	r3, [r7, #23]
      break;
 8002892:	e002      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002894:	bf00      	nop
 8002896:	e000      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289a:	7dfb      	ldrb	r3, [r7, #23]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028a0:	4b9f      	ldr	r3, [pc, #636]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ac:	499c      	ldr	r1, [pc, #624]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	650b      	str	r3, [r1, #80]	; 0x50
 80028b2:	e001      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d049      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028cc:	d02e      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80028ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d2:	d828      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028d8:	d02a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80028da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028de:	d822      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028e4:	d026      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80028e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028ea:	d81c      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f0:	d010      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80028f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f6:	d816      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01d      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d111      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f000 ffdd 	bl	80038c8 <RCCEx_PLL2_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002912:	e012      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3324      	adds	r3, #36	; 0x24
 8002918:	2101      	movs	r1, #1
 800291a:	4618      	mov	r0, r3
 800291c:	f001 f886 	bl	8003a2c <RCCEx_PLL3_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002924:	e009      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
      break;
 800292a:	e006      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800292c:	bf00      	nop
 800292e:	e004      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002930:	bf00      	nop
 8002932:	e002      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002940:	4b77      	ldr	r3, [pc, #476]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002944:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294c:	4974      	ldr	r1, [pc, #464]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800294e:	4313      	orrs	r3, r2
 8002950:	650b      	str	r3, [r1, #80]	; 0x50
 8002952:	e001      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d053      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800296a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800296e:	d034      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002970:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002974:	d82e      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297a:	d030      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800297c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002980:	d828      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d02c      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d822      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800298e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002992:	d028      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002994:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002998:	d81c      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800299a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800299e:	d010      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80029a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a4:	d816      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01f      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80029aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ae:	d111      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	2101      	movs	r1, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 ff86 	bl	80038c8 <RCCEx_PLL2_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029c0:	e014      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3324      	adds	r3, #36	; 0x24
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 f82f 	bl	8003a2c <RCCEx_PLL3_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029d2:	e00b      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	75fb      	strb	r3, [r7, #23]
      break;
 80029d8:	e008      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029da:	bf00      	nop
 80029dc:	e006      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029de:	bf00      	nop
 80029e0:	e004      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029e2:	bf00      	nop
 80029e4:	e002      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029e6:	bf00      	nop
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80029ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029f2:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a00:	4947      	ldr	r1, [pc, #284]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	658b      	str	r3, [r1, #88]	; 0x58
 8002a06:	e001      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a20:	d00e      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a26:	d814      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	4a3a      	ldr	r2, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a3e:	e00c      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 ff3e 	bl	80038c8 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a50:	e003      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
      break;
 8002a56:	e000      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	650b      	str	r3, [r1, #80]	; 0x50
 8002a72:	e001      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d032      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d81b      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002acb 	.word	0x08002acb
 8002a98:	08002aa5 	.word	0x08002aa5
 8002a9c:	08002ab3 	.word	0x08002ab3
 8002aa0:	08002acb 	.word	0x08002acb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ab0:	e00c      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 ff05 	bl	80038c8 <RCCEx_PLL2_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ac2:	e003      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ae4:	e001      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 808a 	beq.w	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fa34 	bl	8000f70 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0a:	e00d      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fe fa30 	bl	8000f70 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d906      	bls.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	75fb      	strb	r3, [r7, #23]
        break;
 8002b1e:	e009      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002b20:	58024400 	.word	0x58024400
 8002b24:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b28:	4bba      	ldr	r3, [pc, #744]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0eb      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d166      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b3a:	4bb7      	ldr	r3, [pc, #732]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b44:	4053      	eors	r3, r2
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d013      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b4e:	4bb2      	ldr	r3, [pc, #712]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	4baf      	ldr	r3, [pc, #700]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4aae      	ldr	r2, [pc, #696]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b64:	4bac      	ldr	r3, [pc, #688]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4aab      	ldr	r2, [pc, #684]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b70:	4aa9      	ldr	r2, [pc, #676]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b80:	d115      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe f9f5 	bl	8000f70 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b88:	e00b      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe f9f1 	bl	8000f70 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d902      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8002ba0:	e005      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba2:	4b9d      	ldr	r3, [pc, #628]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ed      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d126      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bc2:	d10d      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002bc4:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bd2:	0919      	lsrs	r1, r3, #4
 8002bd4:	4b91      	ldr	r3, [pc, #580]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	498f      	ldr	r1, [pc, #572]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	610b      	str	r3, [r1, #16]
 8002bde:	e005      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002be0:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	4a8c      	ldr	r2, [pc, #560]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002be6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bea:	6113      	str	r3, [r2, #16]
 8002bec:	4b8a      	ldr	r3, [pc, #552]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfa:	4987      	ldr	r1, [pc, #540]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	670b      	str	r3, [r1, #112]	; 0x70
 8002c00:	e004      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	75bb      	strb	r3, [r7, #22]
 8002c06:	e001      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d07f      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1e:	2b28      	cmp	r3, #40	; 0x28
 8002c20:	d866      	bhi.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002cf7 	.word	0x08002cf7
 8002c2c:	08002cf1 	.word	0x08002cf1
 8002c30:	08002cf1 	.word	0x08002cf1
 8002c34:	08002cf1 	.word	0x08002cf1
 8002c38:	08002cf1 	.word	0x08002cf1
 8002c3c:	08002cf1 	.word	0x08002cf1
 8002c40:	08002cf1 	.word	0x08002cf1
 8002c44:	08002cf1 	.word	0x08002cf1
 8002c48:	08002ccd 	.word	0x08002ccd
 8002c4c:	08002cf1 	.word	0x08002cf1
 8002c50:	08002cf1 	.word	0x08002cf1
 8002c54:	08002cf1 	.word	0x08002cf1
 8002c58:	08002cf1 	.word	0x08002cf1
 8002c5c:	08002cf1 	.word	0x08002cf1
 8002c60:	08002cf1 	.word	0x08002cf1
 8002c64:	08002cf1 	.word	0x08002cf1
 8002c68:	08002cdf 	.word	0x08002cdf
 8002c6c:	08002cf1 	.word	0x08002cf1
 8002c70:	08002cf1 	.word	0x08002cf1
 8002c74:	08002cf1 	.word	0x08002cf1
 8002c78:	08002cf1 	.word	0x08002cf1
 8002c7c:	08002cf1 	.word	0x08002cf1
 8002c80:	08002cf1 	.word	0x08002cf1
 8002c84:	08002cf1 	.word	0x08002cf1
 8002c88:	08002cf7 	.word	0x08002cf7
 8002c8c:	08002cf1 	.word	0x08002cf1
 8002c90:	08002cf1 	.word	0x08002cf1
 8002c94:	08002cf1 	.word	0x08002cf1
 8002c98:	08002cf1 	.word	0x08002cf1
 8002c9c:	08002cf1 	.word	0x08002cf1
 8002ca0:	08002cf1 	.word	0x08002cf1
 8002ca4:	08002cf1 	.word	0x08002cf1
 8002ca8:	08002cf7 	.word	0x08002cf7
 8002cac:	08002cf1 	.word	0x08002cf1
 8002cb0:	08002cf1 	.word	0x08002cf1
 8002cb4:	08002cf1 	.word	0x08002cf1
 8002cb8:	08002cf1 	.word	0x08002cf1
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002cf1 	.word	0x08002cf1
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	08002cf7 	.word	0x08002cf7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fdf8 	bl	80038c8 <RCCEx_PLL2_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cdc:	e00c      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3324      	adds	r3, #36	; 0x24
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fea1 	bl	8003a2c <RCCEx_PLL3_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cee:	e003      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0c:	4942      	ldr	r1, [pc, #264]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	654b      	str	r3, [r1, #84]	; 0x54
 8002d12:	e001      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d038      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d821      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d77 	.word	0x08002d77
 8002d38:	08002d4d 	.word	0x08002d4d
 8002d3c:	08002d5f 	.word	0x08002d5f
 8002d40:	08002d77 	.word	0x08002d77
 8002d44:	08002d77 	.word	0x08002d77
 8002d48:	08002d77 	.word	0x08002d77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fdb8 	bl	80038c8 <RCCEx_PLL2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3324      	adds	r3, #36	; 0x24
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fe61 	bl	8003a2c <RCCEx_PLL3_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8a:	4923      	ldr	r1, [pc, #140]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	654b      	str	r3, [r1, #84]	; 0x54
 8002d90:	e001      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d040      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d821      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002df7 	.word	0x08002df7
 8002db8:	08002dcd 	.word	0x08002dcd
 8002dbc:	08002ddf 	.word	0x08002ddf
 8002dc0:	08002df7 	.word	0x08002df7
 8002dc4:	08002df7 	.word	0x08002df7
 8002dc8:	08002df7 	.word	0x08002df7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fd78 	bl	80038c8 <RCCEx_PLL2_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ddc:	e00c      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3324      	adds	r3, #36	; 0x24
 8002de2:	2101      	movs	r1, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fe21 	bl	8003a2c <RCCEx_PLL3_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002dee:	e003      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
      break;
 8002df4:	e000      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d110      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0c:	4902      	ldr	r1, [pc, #8]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	658b      	str	r3, [r1, #88]	; 0x58
 8002e12:	e007      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002e14:	58024800 	.word	0x58024800
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d04b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e3a:	d02e      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e40:	d828      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e46:	d02a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d822      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e52:	d026      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e58:	d81c      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e64:	d816      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01d      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e6e:	d111      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fd26 	bl	80038c8 <RCCEx_PLL2_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e80:	e012      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3324      	adds	r3, #36	; 0x24
 8002e86:	2102      	movs	r1, #2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fdcf 	bl	8003a2c <RCCEx_PLL3_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e92:	e009      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	75fb      	strb	r3, [r7, #23]
      break;
 8002e98:	e006      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e004      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eae:	4bb3      	ldr	r3, [pc, #716]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebc:	49af      	ldr	r1, [pc, #700]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	654b      	str	r3, [r1, #84]	; 0x54
 8002ec2:	e001      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d04b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ede:	d02e      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002ee0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ee4:	d828      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d02a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d822      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ef6:	d026      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002efc:	d81c      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	d010      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f08:	d816      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01d      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d111      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fcd4 	bl	80038c8 <RCCEx_PLL2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f24:	e012      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3324      	adds	r3, #36	; 0x24
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fd7d 	bl	8003a2c <RCCEx_PLL3_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f36:	e009      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3c:	e006      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e004      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f52:	4b8a      	ldr	r3, [pc, #552]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f60:	4986      	ldr	r1, [pc, #536]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	658b      	str	r3, [r1, #88]	; 0x58
 8002f66:	e001      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d04b      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f82:	d02e      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002f84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f88:	d828      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f8e:	d02a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f94:	d822      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f9a:	d026      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002f9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002fa0:	d81c      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa6:	d010      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fac:	d816      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01d      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	d111      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fc82 	bl	80038c8 <RCCEx_PLL2_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fc8:	e012      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3324      	adds	r3, #36	; 0x24
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fd2b 	bl	8003a2c <RCCEx_PLL3_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fda:	e009      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe0:	e006      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003004:	495d      	ldr	r1, [pc, #372]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003006:	4313      	orrs	r3, r2
 8003008:	658b      	str	r3, [r1, #88]	; 0x58
 800300a:	e001      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	d10a      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3324      	adds	r3, #36	; 0x24
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fcfc 	bl	8003a2c <RCCEx_PLL3_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800303e:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	494b      	ldr	r1, [pc, #300]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800304e:	4313      	orrs	r3, r2
 8003050:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003068:	d10a      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3324      	adds	r3, #36	; 0x24
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fcdb 	bl	8003a2c <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003080:	4b3e      	ldr	r3, [pc, #248]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800308e:	493b      	ldr	r1, [pc, #236]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003090:	4313      	orrs	r3, r2
 8003092:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d034      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030aa:	d01d      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80030ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b0:	d817      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030bc:	e011      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fbff 	bl	80038c8 <RCCEx_PLL2_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030ce:	e00c      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3324      	adds	r3, #36	; 0x24
 80030d4:	2102      	movs	r1, #2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fca8 	bl	8003a2c <RCCEx_PLL3_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
      break;
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80030e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030fe:	491f      	ldr	r1, [pc, #124]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003100:	4313      	orrs	r3, r2
 8003102:	658b      	str	r3, [r1, #88]	; 0x58
 8003104:	e001      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d036      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003120:	d01c      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003122:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003126:	d816      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312c:	d003      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800312e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003132:	d007      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003134:	e00f      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003142:	e00c      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3324      	adds	r3, #36	; 0x24
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fc6e 	bl	8003a2c <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003154:	e003      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
      break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800315c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10d      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003172:	4902      	ldr	r1, [pc, #8]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003174:	4313      	orrs	r3, r2
 8003176:	654b      	str	r3, [r1, #84]	; 0x54
 8003178:	e004      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800317a:	bf00      	nop
 800317c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d029      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d007      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800319e:	e00f      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a0:	4b69      	ldr	r3, [pc, #420]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a68      	ldr	r2, [pc, #416]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031ac:	e00b      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2102      	movs	r1, #2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fb87 	bl	80038c8 <RCCEx_PLL2_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031be:	e002      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
      break;
 80031c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031cc:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d8:	495b      	ldr	r1, [pc, #364]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031de:	e001      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fc18 	bl	8003a2c <RCCEx_PLL3_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d032      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800321c:	d017      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800321e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003222:	d811      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003228:	d013      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800322a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322e:	d80b      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003238:	d106      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	4a42      	ldr	r2, [pc, #264]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003246:	e007      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
      break;
 800324c:	e004      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800325e:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	4936      	ldr	r1, [pc, #216]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800326e:	4313      	orrs	r3, r2
 8003270:	654b      	str	r3, [r1, #84]	; 0x54
 8003272:	e001      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003290:	492d      	ldr	r1, [pc, #180]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003292:	4313      	orrs	r3, r2
 8003294:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ae:	4926      	ldr	r1, [pc, #152]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80032c0:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	491e      	ldr	r1, [pc, #120]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032e8:	6113      	str	r3, [r2, #16]
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032f4:	4914      	ldr	r1, [pc, #80]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da08      	bge.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003310:	4313      	orrs	r3, r2
 8003312:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4906      	ldr	r1, [pc, #24]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003330:	4313      	orrs	r3, r2
 8003332:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003334:	7dbb      	ldrb	r3, [r7, #22]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400

0800334c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003350:	f7ff f852 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4904      	ldr	r1, [pc, #16]	; (8003374 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	58024400 	.word	0x58024400
 8003374:	08008868 	.word	0x08008868

08003378 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003380:	4ba1      	ldr	r3, [pc, #644]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800338a:	4b9f      	ldr	r3, [pc, #636]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	0b1b      	lsrs	r3, r3, #12
 8003390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003394:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003396:	4b9c      	ldr	r3, [pc, #624]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80033a2:	4b99      	ldr	r3, [pc, #612]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	08db      	lsrs	r3, r3, #3
 80033a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8111 	beq.w	80035e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	f000 8083 	beq.w	80034d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f200 80a1 	bhi.w	8003518 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d056      	beq.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80033e2:	e099      	b.n	8003518 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033e4:	4b88      	ldr	r3, [pc, #544]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02d      	beq.n	800344c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033f0:	4b85      	ldr	r3, [pc, #532]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	08db      	lsrs	r3, r3, #3
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	4a84      	ldr	r2, [pc, #528]	; (800360c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003400:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341a:	4b7b      	ldr	r3, [pc, #492]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 6a03 	vldr	s12, [r7, #12]
 800342e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800344a:	e087      	b.n	800355c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003614 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800345a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800345e:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003472:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800347e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800348e:	e065      	b.n	800355c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800349e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a2:	4b59      	ldr	r3, [pc, #356]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80034b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034d2:	e043      	b.n	800355c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800361c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80034e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e6:	4b48      	ldr	r3, [pc, #288]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80034fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800350e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003516:	e021      	b.n	800355c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003522:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353a:	ed97 6a03 	vldr	s12, [r7, #12]
 800353e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003610 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800354e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800355a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	0a5b      	lsrs	r3, r3, #9
 8003562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003576:	edd7 6a07 	vldr	s13, [r7, #28]
 800357a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003582:	ee17 2a90 	vmov	r2, s15
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80035a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b0:	ee17 2a90 	vmov	r2, s15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	0e1b      	lsrs	r3, r3, #24
 80035be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035de:	ee17 2a90 	vmov	r2, s15
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80035e6:	e008      	b.n	80035fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
}
 80035fa:	bf00      	nop
 80035fc:	3724      	adds	r7, #36	; 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
 800360c:	03d09000 	.word	0x03d09000
 8003610:	46000000 	.word	0x46000000
 8003614:	4c742400 	.word	0x4c742400
 8003618:	4a742400 	.word	0x4a742400
 800361c:	4af42400 	.word	0x4af42400

08003620 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003628:	4ba1      	ldr	r3, [pc, #644]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003632:	4b9f      	ldr	r3, [pc, #636]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	0d1b      	lsrs	r3, r3, #20
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800363e:	4b9c      	ldr	r3, [pc, #624]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800364a:	4b99      	ldr	r3, [pc, #612]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	08db      	lsrs	r3, r3, #3
 8003650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8111 	beq.w	8003890 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b02      	cmp	r3, #2
 8003672:	f000 8083 	beq.w	800377c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b02      	cmp	r3, #2
 800367a:	f200 80a1 	bhi.w	80037c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d056      	beq.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800368a:	e099      	b.n	80037c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800368c:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d02d      	beq.n	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003698:	4b85      	ldr	r3, [pc, #532]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	08db      	lsrs	r3, r3, #3
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	4a84      	ldr	r2, [pc, #528]	; (80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c2:	4b7b      	ldr	r3, [pc, #492]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036f2:	e087      	b.n	8003804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003706:	4b6a      	ldr	r3, [pc, #424]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003716:	ed97 6a03 	vldr	s12, [r7, #12]
 800371a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800371e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003736:	e065      	b.n	8003804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375a:	ed97 6a03 	vldr	s12, [r7, #12]
 800375e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800377a:	e043      	b.n	8003804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	4b48      	ldr	r3, [pc, #288]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379e:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037be:	e021      	b.n	8003804 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003802:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	0a5b      	lsrs	r3, r3, #9
 800380a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800381a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800381e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382a:	ee17 2a90 	vmov	r2, s15
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003858:	ee17 2a90 	vmov	r2, s15
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	0e1b      	lsrs	r3, r3, #24
 8003866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800387a:	edd7 6a07 	vldr	s13, [r7, #28]
 800387e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003886:	ee17 2a90 	vmov	r2, s15
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800388e:	e008      	b.n	80038a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
}
 80038a2:	bf00      	nop
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	58024400 	.word	0x58024400
 80038b4:	03d09000 	.word	0x03d09000
 80038b8:	46000000 	.word	0x46000000
 80038bc:	4c742400 	.word	0x4c742400
 80038c0:	4a742400 	.word	0x4a742400
 80038c4:	4af42400 	.word	0x4af42400

080038c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038d6:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d101      	bne.n	80038e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e099      	b.n	8003a1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80038e6:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a4e      	ldr	r2, [pc, #312]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80038ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f2:	f7fd fb3d 	bl	8000f70 <HAL_GetTick>
 80038f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038f8:	e008      	b.n	800390c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038fa:	f7fd fb39 	bl	8000f70 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e086      	b.n	8003a1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800390c:	4b45      	ldr	r3, [pc, #276]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	031b      	lsls	r3, r3, #12
 8003926:	493f      	ldr	r1, [pc, #252]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	628b      	str	r3, [r1, #40]	; 0x28
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	3b01      	subs	r3, #1
 8003932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	025b      	lsls	r3, r3, #9
 800393e:	b29b      	uxth	r3, r3
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	3b01      	subs	r3, #1
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	3b01      	subs	r3, #1
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800395c:	4931      	ldr	r1, [pc, #196]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003962:	4b30      	ldr	r3, [pc, #192]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	492d      	ldr	r1, [pc, #180]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f023 0220 	bic.w	r2, r3, #32
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	4928      	ldr	r1, [pc, #160]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003986:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 800398c:	f023 0310 	bic.w	r3, r3, #16
 8003990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <RCCEx_PLL2_Config+0x160>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	69d2      	ldr	r2, [r2, #28]
 800399e:	00d2      	lsls	r2, r2, #3
 80039a0:	4920      	ldr	r1, [pc, #128]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039ac:	f043 0310 	orr.w	r3, r3, #16
 80039b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80039b8:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039c4:	e00f      	b.n	80039e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d106      	bne.n	80039da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039d8:	e005      	b.n	80039e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a0e      	ldr	r2, [pc, #56]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 80039ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f2:	f7fd fabd 	bl	8000f70 <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80039fa:	f7fd fab9 	bl	8000f70 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e006      	b.n	8003a1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <RCCEx_PLL2_Config+0x15c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	58024400 	.word	0x58024400
 8003a28:	ffff0007 	.word	0xffff0007

08003a2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a3a:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d101      	bne.n	8003a4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e099      	b.n	8003b7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4e      	ldr	r2, [pc, #312]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a56:	f7fd fa8b 	bl	8000f70 <HAL_GetTick>
 8003a5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a5e:	f7fd fa87 	bl	8000f70 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e086      	b.n	8003b7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a70:	4b45      	ldr	r3, [pc, #276]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003a7c:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	051b      	lsls	r3, r3, #20
 8003a8a:	493f      	ldr	r1, [pc, #252]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	025b      	lsls	r3, r3, #9
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	041b      	lsls	r3, r3, #16
 8003aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ac0:	4931      	ldr	r1, [pc, #196]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ac6:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	492d      	ldr	r1, [pc, #180]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	4928      	ldr	r1, [pc, #160]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003aea:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <RCCEx_PLL3_Config+0x160>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	69d2      	ldr	r2, [r2, #28]
 8003b02:	00d2      	lsls	r2, r2, #3
 8003b04:	4920      	ldr	r1, [pc, #128]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b0a:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b28:	e00f      	b.n	8003b4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d106      	bne.n	8003b3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b3c:	e005      	b.n	8003b4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b56:	f7fd fa0b 	bl	8000f70 <HAL_GetTick>
 8003b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b5c:	e008      	b.n	8003b70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b5e:	f7fd fa07 	bl	8000f70 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e006      	b.n	8003b7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <RCCEx_PLL3_Config+0x15c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	ffff0007 	.word	0xffff0007

08003b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e049      	b.n	8003c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f841 	bl	8003c3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f000 fa00 	bl	8003fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d001      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e054      	b.n	8003d16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d022      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d01d      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d018      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_TIM_Base_Start_IT+0xe0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d009      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x80>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_TIM_Base_Start_IT+0xe8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d115      	bne.n	8003d00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_TIM_Base_Start_IT+0xec>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d015      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0xbe>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d011      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	e008      	b.n	8003d12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e000      	b.n	8003d14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40010400 	.word	0x40010400
 8003d38:	40001800 	.word	0x40001800
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	00010007 	.word	0x00010007

08003d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d122      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d11b      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0202 	mvn.w	r2, #2
 8003d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f905 	bl	8003f96 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8f7 	bl	8003f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f908 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d122      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0204 	mvn.w	r2, #4
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8db 	bl	8003f96 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8cd 	bl	8003f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f8de 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0208 	mvn.w	r2, #8
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8b1 	bl	8003f96 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8a3 	bl	8003f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f8b4 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f887 	bl	8003f96 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f879 	bl	8003f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f88a 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0201 	mvn.w	r2, #1
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fde6 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f914 	bl	800411c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f907 	bl	8004130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f838 	bl	8003fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0220 	mvn.w	r2, #32
 8003f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8c7 	bl	8004108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a40      	ldr	r2, [pc, #256]	; (80040e8 <TIM_Base_SetConfig+0x114>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d00f      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3d      	ldr	r2, [pc, #244]	; (80040ec <TIM_Base_SetConfig+0x118>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3c      	ldr	r2, [pc, #240]	; (80040f0 <TIM_Base_SetConfig+0x11c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3b      	ldr	r2, [pc, #236]	; (80040f4 <TIM_Base_SetConfig+0x120>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a3a      	ldr	r2, [pc, #232]	; (80040f8 <TIM_Base_SetConfig+0x124>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2f      	ldr	r2, [pc, #188]	; (80040e8 <TIM_Base_SetConfig+0x114>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01f      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d01b      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <TIM_Base_SetConfig+0x118>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d017      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2b      	ldr	r2, [pc, #172]	; (80040f0 <TIM_Base_SetConfig+0x11c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <TIM_Base_SetConfig+0x120>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00f      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <TIM_Base_SetConfig+0x124>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00b      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a28      	ldr	r2, [pc, #160]	; (80040fc <TIM_Base_SetConfig+0x128>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a27      	ldr	r2, [pc, #156]	; (8004100 <TIM_Base_SetConfig+0x12c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_Base_SetConfig+0x9a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a26      	ldr	r2, [pc, #152]	; (8004104 <TIM_Base_SetConfig+0x130>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d108      	bne.n	8004080 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <TIM_Base_SetConfig+0x114>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00f      	beq.n	80040cc <TIM_Base_SetConfig+0xf8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <TIM_Base_SetConfig+0x124>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00b      	beq.n	80040cc <TIM_Base_SetConfig+0xf8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a11      	ldr	r2, [pc, #68]	; (80040fc <TIM_Base_SetConfig+0x128>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d007      	beq.n	80040cc <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a10      	ldr	r2, [pc, #64]	; (8004100 <TIM_Base_SetConfig+0x12c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_Base_SetConfig+0xf8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <TIM_Base_SetConfig+0x130>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d103      	bne.n	80040d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	615a      	str	r2, [r3, #20]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40010400 	.word	0x40010400
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800

08004108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e042      	b.n	80041dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7fc fe19 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2224      	movs	r2, #36	; 0x24
 8004172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f996 	bl	80044b8 <UART_SetConfig>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e022      	b.n	80041dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 ffe8 	bl	8005174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f001 f86f 	bl	80052b8 <UART_CheckIdleState>
 80041da:	4603      	mov	r3, r0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	f040 8083 	bne.w	8004306 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_UART_Transmit+0x28>
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e07b      	b.n	8004308 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_UART_Transmit+0x3a>
 800421a:	2302      	movs	r3, #2
 800421c:	e074      	b.n	8004308 <HAL_UART_Transmit+0x124>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2221      	movs	r2, #33	; 0x21
 8004232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004236:	f7fc fe9b 	bl	8000f70 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004254:	d108      	bne.n	8004268 <HAL_UART_Transmit+0x84>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	e003      	b.n	8004270 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004278:	e02c      	b.n	80042d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f001 f862 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e039      	b.n	8004308 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	3302      	adds	r3, #2
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	e007      	b.n	80042c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3301      	adds	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1cc      	bne.n	800427a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f001 f82f 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e006      	b.n	8004308 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e000      	b.n	8004308 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004306:	2302      	movs	r3, #2
  }
}
 8004308:	4618      	mov	r0, r3
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	2b20      	cmp	r3, #32
 8004328:	f040 80c0 	bne.w	80044ac <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_UART_Receive+0x28>
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b8      	b.n	80044ae <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_UART_Receive+0x3a>
 8004346:	2302      	movs	r3, #2
 8004348:	e0b1      	b.n	80044ae <HAL_UART_Receive+0x19e>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2222      	movs	r2, #34	; 0x22
 800435e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004368:	f7fc fe02 	bl	8000f70 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d10e      	bne.n	80043a6 <HAL_UART_Receive+0x96>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <HAL_UART_Receive+0x8c>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800439a:	e02d      	b.n	80043f8 <HAL_UART_Receive+0xe8>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043a4:	e028      	b.n	80043f8 <HAL_UART_Receive+0xe8>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_UART_Receive+0xba>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <HAL_UART_Receive+0xb0>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	22ff      	movs	r2, #255	; 0xff
 80043ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043be:	e01b      	b.n	80043f8 <HAL_UART_Receive+0xe8>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	227f      	movs	r2, #127	; 0x7f
 80043c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043c8:	e016      	b.n	80043f8 <HAL_UART_Receive+0xe8>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d2:	d10d      	bne.n	80043f0 <HAL_UART_Receive+0xe0>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_UART_Receive+0xd6>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	227f      	movs	r2, #127	; 0x7f
 80043e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043e4:	e008      	b.n	80043f8 <HAL_UART_Receive+0xe8>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	223f      	movs	r2, #63	; 0x3f
 80043ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043ee:	e003      	b.n	80043f8 <HAL_UART_Receive+0xe8>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004408:	d108      	bne.n	800441c <HAL_UART_Receive+0x10c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e003      	b.n	8004424 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800442c:	e032      	b.n	8004494 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2120      	movs	r1, #32
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 ff88 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e032      	b.n	80044ae <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10c      	bne.n	8004468 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	b29a      	uxth	r2, r3
 8004456:	8a7b      	ldrh	r3, [r7, #18]
 8004458:	4013      	ands	r3, r2
 800445a:	b29a      	uxth	r2, r3
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	3302      	adds	r3, #2
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e00c      	b.n	8004482 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	b2da      	uxtb	r2, r3
 8004470:	8a7b      	ldrh	r3, [r7, #18]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4013      	ands	r3, r2
 8004476:	b2da      	uxtb	r2, r3
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1c6      	bne.n	800442e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e000      	b.n	80044ae <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b5b0      	push	{r4, r5, r7, lr}
 80044ba:	b08e      	sub	sp, #56	; 0x38
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4bbf      	ldr	r3, [pc, #764]	; (80047e4 <UART_SetConfig+0x32c>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044ee:	430b      	orrs	r3, r1
 80044f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4ab5      	ldr	r2, [pc, #724]	; (80047e8 <UART_SetConfig+0x330>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800451e:	4313      	orrs	r3, r2
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4bb0      	ldr	r3, [pc, #704]	; (80047ec <UART_SetConfig+0x334>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004532:	430b      	orrs	r3, r1
 8004534:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	f023 010f 	bic.w	r1, r3, #15
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4aa7      	ldr	r2, [pc, #668]	; (80047f0 <UART_SetConfig+0x338>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d176      	bne.n	8004644 <UART_SetConfig+0x18c>
 8004556:	4ba7      	ldr	r3, [pc, #668]	; (80047f4 <UART_SetConfig+0x33c>)
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800455e:	2b28      	cmp	r3, #40	; 0x28
 8004560:	d86c      	bhi.n	800463c <UART_SetConfig+0x184>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0xb0>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	0800460d 	.word	0x0800460d
 800456c:	0800463d 	.word	0x0800463d
 8004570:	0800463d 	.word	0x0800463d
 8004574:	0800463d 	.word	0x0800463d
 8004578:	0800463d 	.word	0x0800463d
 800457c:	0800463d 	.word	0x0800463d
 8004580:	0800463d 	.word	0x0800463d
 8004584:	0800463d 	.word	0x0800463d
 8004588:	08004615 	.word	0x08004615
 800458c:	0800463d 	.word	0x0800463d
 8004590:	0800463d 	.word	0x0800463d
 8004594:	0800463d 	.word	0x0800463d
 8004598:	0800463d 	.word	0x0800463d
 800459c:	0800463d 	.word	0x0800463d
 80045a0:	0800463d 	.word	0x0800463d
 80045a4:	0800463d 	.word	0x0800463d
 80045a8:	0800461d 	.word	0x0800461d
 80045ac:	0800463d 	.word	0x0800463d
 80045b0:	0800463d 	.word	0x0800463d
 80045b4:	0800463d 	.word	0x0800463d
 80045b8:	0800463d 	.word	0x0800463d
 80045bc:	0800463d 	.word	0x0800463d
 80045c0:	0800463d 	.word	0x0800463d
 80045c4:	0800463d 	.word	0x0800463d
 80045c8:	08004625 	.word	0x08004625
 80045cc:	0800463d 	.word	0x0800463d
 80045d0:	0800463d 	.word	0x0800463d
 80045d4:	0800463d 	.word	0x0800463d
 80045d8:	0800463d 	.word	0x0800463d
 80045dc:	0800463d 	.word	0x0800463d
 80045e0:	0800463d 	.word	0x0800463d
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	0800462d 	.word	0x0800462d
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	0800463d 	.word	0x0800463d
 80045f4:	0800463d 	.word	0x0800463d
 80045f8:	0800463d 	.word	0x0800463d
 80045fc:	0800463d 	.word	0x0800463d
 8004600:	0800463d 	.word	0x0800463d
 8004604:	0800463d 	.word	0x0800463d
 8004608:	08004635 	.word	0x08004635
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004612:	e326      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004614:	2304      	movs	r3, #4
 8004616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461a:	e322      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800461c:	2308      	movs	r3, #8
 800461e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004622:	e31e      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004624:	2310      	movs	r3, #16
 8004626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800462a:	e31a      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800462c:	2320      	movs	r3, #32
 800462e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004632:	e316      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004634:	2340      	movs	r3, #64	; 0x40
 8004636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800463a:	e312      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004642:	e30e      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a6b      	ldr	r2, [pc, #428]	; (80047f8 <UART_SetConfig+0x340>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d130      	bne.n	80046b0 <UART_SetConfig+0x1f8>
 800464e:	4b69      	ldr	r3, [pc, #420]	; (80047f4 <UART_SetConfig+0x33c>)
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	2b05      	cmp	r3, #5
 8004658:	d826      	bhi.n	80046a8 <UART_SetConfig+0x1f0>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <UART_SetConfig+0x1a8>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004679 	.word	0x08004679
 8004664:	08004681 	.word	0x08004681
 8004668:	08004689 	.word	0x08004689
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467e:	e2f0      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004686:	e2ec      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800468e:	e2e8      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004696:	e2e4      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004698:	2320      	movs	r3, #32
 800469a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800469e:	e2e0      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80046a0:	2340      	movs	r3, #64	; 0x40
 80046a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046a6:	e2dc      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ae:	e2d8      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a51      	ldr	r2, [pc, #324]	; (80047fc <UART_SetConfig+0x344>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d130      	bne.n	800471c <UART_SetConfig+0x264>
 80046ba:	4b4e      	ldr	r3, [pc, #312]	; (80047f4 <UART_SetConfig+0x33c>)
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d826      	bhi.n	8004714 <UART_SetConfig+0x25c>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x214>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046e5 	.word	0x080046e5
 80046d0:	080046ed 	.word	0x080046ed
 80046d4:	080046f5 	.word	0x080046f5
 80046d8:	080046fd 	.word	0x080046fd
 80046dc:	08004705 	.word	0x08004705
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ea:	e2ba      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046f2:	e2b6      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046fa:	e2b2      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004702:	e2ae      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004704:	2320      	movs	r3, #32
 8004706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800470a:	e2aa      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800470c:	2340      	movs	r3, #64	; 0x40
 800470e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004712:	e2a6      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800471a:	e2a2      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a37      	ldr	r2, [pc, #220]	; (8004800 <UART_SetConfig+0x348>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d130      	bne.n	8004788 <UART_SetConfig+0x2d0>
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <UART_SetConfig+0x33c>)
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	2b05      	cmp	r3, #5
 8004730:	d826      	bhi.n	8004780 <UART_SetConfig+0x2c8>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x280>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	08004751 	.word	0x08004751
 800473c:	08004759 	.word	0x08004759
 8004740:	08004761 	.word	0x08004761
 8004744:	08004769 	.word	0x08004769
 8004748:	08004771 	.word	0x08004771
 800474c:	08004779 	.word	0x08004779
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004756:	e284      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475e:	e280      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004766:	e27c      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800476e:	e278      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004770:	2320      	movs	r3, #32
 8004772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004776:	e274      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004778:	2340      	movs	r3, #64	; 0x40
 800477a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800477e:	e270      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004786:	e26c      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <UART_SetConfig+0x34c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d142      	bne.n	8004818 <UART_SetConfig+0x360>
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <UART_SetConfig+0x33c>)
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b05      	cmp	r3, #5
 800479c:	d838      	bhi.n	8004810 <UART_SetConfig+0x358>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <UART_SetConfig+0x2ec>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047bd 	.word	0x080047bd
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	080047cd 	.word	0x080047cd
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	08004809 	.word	0x08004809
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047c2:	e24e      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80047c4:	2304      	movs	r3, #4
 80047c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ca:	e24a      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80047cc:	2308      	movs	r3, #8
 80047ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d2:	e246      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80047d4:	2310      	movs	r3, #16
 80047d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047da:	e242      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80047dc:	2320      	movs	r3, #32
 80047de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e2:	e23e      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80047e4:	cfff69f3 	.word	0xcfff69f3
 80047e8:	58000c00 	.word	0x58000c00
 80047ec:	11fff4ff 	.word	0x11fff4ff
 80047f0:	40011000 	.word	0x40011000
 80047f4:	58024400 	.word	0x58024400
 80047f8:	40004400 	.word	0x40004400
 80047fc:	40004800 	.word	0x40004800
 8004800:	40004c00 	.word	0x40004c00
 8004804:	40005000 	.word	0x40005000
 8004808:	2340      	movs	r3, #64	; 0x40
 800480a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800480e:	e228      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004816:	e224      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4ab1      	ldr	r2, [pc, #708]	; (8004ae4 <UART_SetConfig+0x62c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d176      	bne.n	8004910 <UART_SetConfig+0x458>
 8004822:	4bb1      	ldr	r3, [pc, #708]	; (8004ae8 <UART_SetConfig+0x630>)
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482a:	2b28      	cmp	r3, #40	; 0x28
 800482c:	d86c      	bhi.n	8004908 <UART_SetConfig+0x450>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x37c>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	080048d9 	.word	0x080048d9
 8004838:	08004909 	.word	0x08004909
 800483c:	08004909 	.word	0x08004909
 8004840:	08004909 	.word	0x08004909
 8004844:	08004909 	.word	0x08004909
 8004848:	08004909 	.word	0x08004909
 800484c:	08004909 	.word	0x08004909
 8004850:	08004909 	.word	0x08004909
 8004854:	080048e1 	.word	0x080048e1
 8004858:	08004909 	.word	0x08004909
 800485c:	08004909 	.word	0x08004909
 8004860:	08004909 	.word	0x08004909
 8004864:	08004909 	.word	0x08004909
 8004868:	08004909 	.word	0x08004909
 800486c:	08004909 	.word	0x08004909
 8004870:	08004909 	.word	0x08004909
 8004874:	080048e9 	.word	0x080048e9
 8004878:	08004909 	.word	0x08004909
 800487c:	08004909 	.word	0x08004909
 8004880:	08004909 	.word	0x08004909
 8004884:	08004909 	.word	0x08004909
 8004888:	08004909 	.word	0x08004909
 800488c:	08004909 	.word	0x08004909
 8004890:	08004909 	.word	0x08004909
 8004894:	080048f1 	.word	0x080048f1
 8004898:	08004909 	.word	0x08004909
 800489c:	08004909 	.word	0x08004909
 80048a0:	08004909 	.word	0x08004909
 80048a4:	08004909 	.word	0x08004909
 80048a8:	08004909 	.word	0x08004909
 80048ac:	08004909 	.word	0x08004909
 80048b0:	08004909 	.word	0x08004909
 80048b4:	080048f9 	.word	0x080048f9
 80048b8:	08004909 	.word	0x08004909
 80048bc:	08004909 	.word	0x08004909
 80048c0:	08004909 	.word	0x08004909
 80048c4:	08004909 	.word	0x08004909
 80048c8:	08004909 	.word	0x08004909
 80048cc:	08004909 	.word	0x08004909
 80048d0:	08004909 	.word	0x08004909
 80048d4:	08004901 	.word	0x08004901
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048de:	e1c0      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e6:	e1bc      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ee:	e1b8      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f6:	e1b4      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80048f8:	2320      	movs	r3, #32
 80048fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fe:	e1b0      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004906:	e1ac      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800490e:	e1a8      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a75      	ldr	r2, [pc, #468]	; (8004aec <UART_SetConfig+0x634>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d130      	bne.n	800497c <UART_SetConfig+0x4c4>
 800491a:	4b73      	ldr	r3, [pc, #460]	; (8004ae8 <UART_SetConfig+0x630>)
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	2b05      	cmp	r3, #5
 8004924:	d826      	bhi.n	8004974 <UART_SetConfig+0x4bc>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0x474>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	08004945 	.word	0x08004945
 8004930:	0800494d 	.word	0x0800494d
 8004934:	08004955 	.word	0x08004955
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494a:	e18a      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004952:	e186      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800495a:	e182      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004962:	e17e      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004964:	2320      	movs	r3, #32
 8004966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800496a:	e17a      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004972:	e176      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800497a:	e172      	b.n	8004c62 <UART_SetConfig+0x7aa>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5b      	ldr	r2, [pc, #364]	; (8004af0 <UART_SetConfig+0x638>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d130      	bne.n	80049e8 <UART_SetConfig+0x530>
 8004986:	4b58      	ldr	r3, [pc, #352]	; (8004ae8 <UART_SetConfig+0x630>)
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b05      	cmp	r3, #5
 8004990:	d826      	bhi.n	80049e0 <UART_SetConfig+0x528>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x4e0>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049b1 	.word	0x080049b1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049c1 	.word	0x080049c1
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049b6:	e154      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049be:	e150      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049c6:	e14c      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ce:	e148      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80049d0:	2320      	movs	r3, #32
 80049d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049d6:	e144      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80049d8:	2340      	movs	r3, #64	; 0x40
 80049da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049de:	e140      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049e6:	e13c      	b.n	8004c62 <UART_SetConfig+0x7aa>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a41      	ldr	r2, [pc, #260]	; (8004af4 <UART_SetConfig+0x63c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 8082 	bne.w	8004af8 <UART_SetConfig+0x640>
 80049f4:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <UART_SetConfig+0x630>)
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049fc:	2b28      	cmp	r3, #40	; 0x28
 80049fe:	d86d      	bhi.n	8004adc <UART_SetConfig+0x624>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x550>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004aad 	.word	0x08004aad
 8004a0c:	08004add 	.word	0x08004add
 8004a10:	08004add 	.word	0x08004add
 8004a14:	08004add 	.word	0x08004add
 8004a18:	08004add 	.word	0x08004add
 8004a1c:	08004add 	.word	0x08004add
 8004a20:	08004add 	.word	0x08004add
 8004a24:	08004add 	.word	0x08004add
 8004a28:	08004ab5 	.word	0x08004ab5
 8004a2c:	08004add 	.word	0x08004add
 8004a30:	08004add 	.word	0x08004add
 8004a34:	08004add 	.word	0x08004add
 8004a38:	08004add 	.word	0x08004add
 8004a3c:	08004add 	.word	0x08004add
 8004a40:	08004add 	.word	0x08004add
 8004a44:	08004add 	.word	0x08004add
 8004a48:	08004abd 	.word	0x08004abd
 8004a4c:	08004add 	.word	0x08004add
 8004a50:	08004add 	.word	0x08004add
 8004a54:	08004add 	.word	0x08004add
 8004a58:	08004add 	.word	0x08004add
 8004a5c:	08004add 	.word	0x08004add
 8004a60:	08004add 	.word	0x08004add
 8004a64:	08004add 	.word	0x08004add
 8004a68:	08004ac5 	.word	0x08004ac5
 8004a6c:	08004add 	.word	0x08004add
 8004a70:	08004add 	.word	0x08004add
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004add 	.word	0x08004add
 8004a7c:	08004add 	.word	0x08004add
 8004a80:	08004add 	.word	0x08004add
 8004a84:	08004add 	.word	0x08004add
 8004a88:	08004acd 	.word	0x08004acd
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004add 	.word	0x08004add
 8004a98:	08004add 	.word	0x08004add
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ab2:	e0d6      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aba:	e0d2      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004abc:	2308      	movs	r3, #8
 8004abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ac2:	e0ce      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aca:	e0ca      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004acc:	2320      	movs	r3, #32
 8004ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ad2:	e0c6      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004ad4:	2340      	movs	r3, #64	; 0x40
 8004ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ada:	e0c2      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ae2:	e0be      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004ae4:	40011400 	.word	0x40011400
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	40007800 	.word	0x40007800
 8004af0:	40007c00 	.word	0x40007c00
 8004af4:	40011800 	.word	0x40011800
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4aad      	ldr	r2, [pc, #692]	; (8004db4 <UART_SetConfig+0x8fc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d176      	bne.n	8004bf0 <UART_SetConfig+0x738>
 8004b02:	4bad      	ldr	r3, [pc, #692]	; (8004db8 <UART_SetConfig+0x900>)
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b0a:	2b28      	cmp	r3, #40	; 0x28
 8004b0c:	d86c      	bhi.n	8004be8 <UART_SetConfig+0x730>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x65c>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004bb9 	.word	0x08004bb9
 8004b18:	08004be9 	.word	0x08004be9
 8004b1c:	08004be9 	.word	0x08004be9
 8004b20:	08004be9 	.word	0x08004be9
 8004b24:	08004be9 	.word	0x08004be9
 8004b28:	08004be9 	.word	0x08004be9
 8004b2c:	08004be9 	.word	0x08004be9
 8004b30:	08004be9 	.word	0x08004be9
 8004b34:	08004bc1 	.word	0x08004bc1
 8004b38:	08004be9 	.word	0x08004be9
 8004b3c:	08004be9 	.word	0x08004be9
 8004b40:	08004be9 	.word	0x08004be9
 8004b44:	08004be9 	.word	0x08004be9
 8004b48:	08004be9 	.word	0x08004be9
 8004b4c:	08004be9 	.word	0x08004be9
 8004b50:	08004be9 	.word	0x08004be9
 8004b54:	08004bc9 	.word	0x08004bc9
 8004b58:	08004be9 	.word	0x08004be9
 8004b5c:	08004be9 	.word	0x08004be9
 8004b60:	08004be9 	.word	0x08004be9
 8004b64:	08004be9 	.word	0x08004be9
 8004b68:	08004be9 	.word	0x08004be9
 8004b6c:	08004be9 	.word	0x08004be9
 8004b70:	08004be9 	.word	0x08004be9
 8004b74:	08004bd1 	.word	0x08004bd1
 8004b78:	08004be9 	.word	0x08004be9
 8004b7c:	08004be9 	.word	0x08004be9
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004be9 	.word	0x08004be9
 8004b88:	08004be9 	.word	0x08004be9
 8004b8c:	08004be9 	.word	0x08004be9
 8004b90:	08004be9 	.word	0x08004be9
 8004b94:	08004bd9 	.word	0x08004bd9
 8004b98:	08004be9 	.word	0x08004be9
 8004b9c:	08004be9 	.word	0x08004be9
 8004ba0:	08004be9 	.word	0x08004be9
 8004ba4:	08004be9 	.word	0x08004be9
 8004ba8:	08004be9 	.word	0x08004be9
 8004bac:	08004be9 	.word	0x08004be9
 8004bb0:	08004be9 	.word	0x08004be9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bbe:	e050      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc6:	e04c      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bce:	e048      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bd6:	e044      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004bd8:	2320      	movs	r3, #32
 8004bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bde:	e040      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be6:	e03c      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bee:	e038      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a71      	ldr	r2, [pc, #452]	; (8004dbc <UART_SetConfig+0x904>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d130      	bne.n	8004c5c <UART_SetConfig+0x7a4>
 8004bfa:	4b6f      	ldr	r3, [pc, #444]	; (8004db8 <UART_SetConfig+0x900>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d826      	bhi.n	8004c54 <UART_SetConfig+0x79c>
 8004c06:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0x754>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c25 	.word	0x08004c25
 8004c10:	08004c2d 	.word	0x08004c2d
 8004c14:	08004c35 	.word	0x08004c35
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c2a:	e01a      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c32:	e016      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c3a:	e012      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c42:	e00e      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004c44:	2320      	movs	r3, #32
 8004c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c4a:	e00a      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c52:	e006      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c5a:	e002      	b.n	8004c62 <UART_SetConfig+0x7aa>
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a55      	ldr	r2, [pc, #340]	; (8004dbc <UART_SetConfig+0x904>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	f040 80f0 	bne.w	8004e4e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	dc46      	bgt.n	8004d04 <UART_SetConfig+0x84c>
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	db75      	blt.n	8004d66 <UART_SetConfig+0x8ae>
 8004c7a:	3b02      	subs	r3, #2
 8004c7c:	2b1e      	cmp	r3, #30
 8004c7e:	d872      	bhi.n	8004d66 <UART_SetConfig+0x8ae>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <UART_SetConfig+0x7d0>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004d0b 	.word	0x08004d0b
 8004c8c:	08004d67 	.word	0x08004d67
 8004c90:	08004d13 	.word	0x08004d13
 8004c94:	08004d67 	.word	0x08004d67
 8004c98:	08004d67 	.word	0x08004d67
 8004c9c:	08004d67 	.word	0x08004d67
 8004ca0:	08004d23 	.word	0x08004d23
 8004ca4:	08004d67 	.word	0x08004d67
 8004ca8:	08004d67 	.word	0x08004d67
 8004cac:	08004d67 	.word	0x08004d67
 8004cb0:	08004d67 	.word	0x08004d67
 8004cb4:	08004d67 	.word	0x08004d67
 8004cb8:	08004d67 	.word	0x08004d67
 8004cbc:	08004d67 	.word	0x08004d67
 8004cc0:	08004d33 	.word	0x08004d33
 8004cc4:	08004d67 	.word	0x08004d67
 8004cc8:	08004d67 	.word	0x08004d67
 8004ccc:	08004d67 	.word	0x08004d67
 8004cd0:	08004d67 	.word	0x08004d67
 8004cd4:	08004d67 	.word	0x08004d67
 8004cd8:	08004d67 	.word	0x08004d67
 8004cdc:	08004d67 	.word	0x08004d67
 8004ce0:	08004d67 	.word	0x08004d67
 8004ce4:	08004d67 	.word	0x08004d67
 8004ce8:	08004d67 	.word	0x08004d67
 8004cec:	08004d67 	.word	0x08004d67
 8004cf0:	08004d67 	.word	0x08004d67
 8004cf4:	08004d67 	.word	0x08004d67
 8004cf8:	08004d67 	.word	0x08004d67
 8004cfc:	08004d67 	.word	0x08004d67
 8004d00:	08004d59 	.word	0x08004d59
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d02a      	beq.n	8004d5e <UART_SetConfig+0x8a6>
 8004d08:	e02d      	b.n	8004d66 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d0a:	f7fe fb1f 	bl	800334c <HAL_RCCEx_GetD3PCLK1Freq>
 8004d0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d10:	e02f      	b.n	8004d72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fb2e 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d20:	e027      	b.n	8004d72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d22:	f107 0308 	add.w	r3, r7, #8
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fc7a 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d30:	e01f      	b.n	8004d72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d32:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <UART_SetConfig+0x900>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d3e:	4b1e      	ldr	r3, [pc, #120]	; (8004db8 <UART_SetConfig+0x900>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <UART_SetConfig+0x908>)
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d50:	e00f      	b.n	8004d72 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004d52:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <UART_SetConfig+0x908>)
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d56:	e00c      	b.n	8004d72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <UART_SetConfig+0x90c>)
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d5c:	e009      	b.n	8004d72 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d64:	e005      	b.n	8004d72 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004d70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 81e6 	beq.w	8005146 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <UART_SetConfig+0x910>)
 8004d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d8c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d305      	bcc.n	8004daa <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d910      	bls.n	8004dcc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004db0:	e1c9      	b.n	8005146 <UART_SetConfig+0xc8e>
 8004db2:	bf00      	nop
 8004db4:	40011c00 	.word	0x40011c00
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	58000c00 	.word	0x58000c00
 8004dc0:	03d09000 	.word	0x03d09000
 8004dc4:	003d0900 	.word	0x003d0900
 8004dc8:	08008878 	.word	0x08008878
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	4ac1      	ldr	r2, [pc, #772]	; (80050e0 <UART_SetConfig+0xc28>)
 8004dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f7fb fa84 	bl	80002f0 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	020b      	lsls	r3, r1, #8
 8004dfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dfe:	0202      	lsls	r2, r0, #8
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	6849      	ldr	r1, [r1, #4]
 8004e04:	0849      	lsrs	r1, r1, #1
 8004e06:	4608      	mov	r0, r1
 8004e08:	f04f 0100 	mov.w	r1, #0
 8004e0c:	1814      	adds	r4, r2, r0
 8004e0e:	eb43 0501 	adc.w	r5, r3, r1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fa66 	bl	80002f0 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4613      	mov	r3, r2
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e32:	d308      	bcc.n	8004e46 <UART_SetConfig+0x98e>
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3a:	d204      	bcs.n	8004e46 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e42:	60da      	str	r2, [r3, #12]
 8004e44:	e17f      	b.n	8005146 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004e4c:	e17b      	b.n	8005146 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e56:	f040 80bd 	bne.w	8004fd4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8004e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	dc48      	bgt.n	8004ef4 <UART_SetConfig+0xa3c>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	db7b      	blt.n	8004f5e <UART_SetConfig+0xaa6>
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d879      	bhi.n	8004f5e <UART_SetConfig+0xaa6>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <UART_SetConfig+0x9b8>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004efb 	.word	0x08004efb
 8004e74:	08004f03 	.word	0x08004f03
 8004e78:	08004f5f 	.word	0x08004f5f
 8004e7c:	08004f5f 	.word	0x08004f5f
 8004e80:	08004f0b 	.word	0x08004f0b
 8004e84:	08004f5f 	.word	0x08004f5f
 8004e88:	08004f5f 	.word	0x08004f5f
 8004e8c:	08004f5f 	.word	0x08004f5f
 8004e90:	08004f1b 	.word	0x08004f1b
 8004e94:	08004f5f 	.word	0x08004f5f
 8004e98:	08004f5f 	.word	0x08004f5f
 8004e9c:	08004f5f 	.word	0x08004f5f
 8004ea0:	08004f5f 	.word	0x08004f5f
 8004ea4:	08004f5f 	.word	0x08004f5f
 8004ea8:	08004f5f 	.word	0x08004f5f
 8004eac:	08004f5f 	.word	0x08004f5f
 8004eb0:	08004f2b 	.word	0x08004f2b
 8004eb4:	08004f5f 	.word	0x08004f5f
 8004eb8:	08004f5f 	.word	0x08004f5f
 8004ebc:	08004f5f 	.word	0x08004f5f
 8004ec0:	08004f5f 	.word	0x08004f5f
 8004ec4:	08004f5f 	.word	0x08004f5f
 8004ec8:	08004f5f 	.word	0x08004f5f
 8004ecc:	08004f5f 	.word	0x08004f5f
 8004ed0:	08004f5f 	.word	0x08004f5f
 8004ed4:	08004f5f 	.word	0x08004f5f
 8004ed8:	08004f5f 	.word	0x08004f5f
 8004edc:	08004f5f 	.word	0x08004f5f
 8004ee0:	08004f5f 	.word	0x08004f5f
 8004ee4:	08004f5f 	.word	0x08004f5f
 8004ee8:	08004f5f 	.word	0x08004f5f
 8004eec:	08004f5f 	.word	0x08004f5f
 8004ef0:	08004f51 	.word	0x08004f51
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d02e      	beq.n	8004f56 <UART_SetConfig+0xa9e>
 8004ef8:	e031      	b.n	8004f5e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efa:	f7fd faad 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8004efe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f00:	e033      	b.n	8004f6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f02:	f7fd fabf 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8004f06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f08:	e02f      	b.n	8004f6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fa32 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f18:	e027      	b.n	8004f6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f1a:	f107 0308 	add.w	r3, r7, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fb7e 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f28:	e01f      	b.n	8004f6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f2a:	4b6e      	ldr	r3, [pc, #440]	; (80050e4 <UART_SetConfig+0xc2c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f36:	4b6b      	ldr	r3, [pc, #428]	; (80050e4 <UART_SetConfig+0xc2c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	08db      	lsrs	r3, r3, #3
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	4a69      	ldr	r2, [pc, #420]	; (80050e8 <UART_SetConfig+0xc30>)
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f48:	e00f      	b.n	8004f6a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8004f4a:	4b67      	ldr	r3, [pc, #412]	; (80050e8 <UART_SetConfig+0xc30>)
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f4e:	e00c      	b.n	8004f6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f50:	4b66      	ldr	r3, [pc, #408]	; (80050ec <UART_SetConfig+0xc34>)
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f54:	e009      	b.n	8004f6a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f5c:	e005      	b.n	8004f6a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80ea 	beq.w	8005146 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	4a5a      	ldr	r2, [pc, #360]	; (80050e0 <UART_SetConfig+0xc28>)
 8004f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	d916      	bls.n	8004fcc <UART_SetConfig+0xb14>
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa4:	d212      	bcs.n	8004fcc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f023 030f 	bic.w	r3, r3, #15
 8004fae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e0bc      	b.n	8005146 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004fd2:	e0b8      	b.n	8005146 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	dc4b      	bgt.n	8005074 <UART_SetConfig+0xbbc>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f2c0 8087 	blt.w	80050f0 <UART_SetConfig+0xc38>
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	f200 8084 	bhi.w	80050f0 <UART_SetConfig+0xc38>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0xb38>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	0800507b 	.word	0x0800507b
 8004ff4:	08005083 	.word	0x08005083
 8004ff8:	080050f1 	.word	0x080050f1
 8004ffc:	080050f1 	.word	0x080050f1
 8005000:	0800508b 	.word	0x0800508b
 8005004:	080050f1 	.word	0x080050f1
 8005008:	080050f1 	.word	0x080050f1
 800500c:	080050f1 	.word	0x080050f1
 8005010:	0800509b 	.word	0x0800509b
 8005014:	080050f1 	.word	0x080050f1
 8005018:	080050f1 	.word	0x080050f1
 800501c:	080050f1 	.word	0x080050f1
 8005020:	080050f1 	.word	0x080050f1
 8005024:	080050f1 	.word	0x080050f1
 8005028:	080050f1 	.word	0x080050f1
 800502c:	080050f1 	.word	0x080050f1
 8005030:	080050ab 	.word	0x080050ab
 8005034:	080050f1 	.word	0x080050f1
 8005038:	080050f1 	.word	0x080050f1
 800503c:	080050f1 	.word	0x080050f1
 8005040:	080050f1 	.word	0x080050f1
 8005044:	080050f1 	.word	0x080050f1
 8005048:	080050f1 	.word	0x080050f1
 800504c:	080050f1 	.word	0x080050f1
 8005050:	080050f1 	.word	0x080050f1
 8005054:	080050f1 	.word	0x080050f1
 8005058:	080050f1 	.word	0x080050f1
 800505c:	080050f1 	.word	0x080050f1
 8005060:	080050f1 	.word	0x080050f1
 8005064:	080050f1 	.word	0x080050f1
 8005068:	080050f1 	.word	0x080050f1
 800506c:	080050f1 	.word	0x080050f1
 8005070:	080050d1 	.word	0x080050d1
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d02e      	beq.n	80050d6 <UART_SetConfig+0xc1e>
 8005078:	e03a      	b.n	80050f0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507a:	f7fd f9ed 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 800507e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005080:	e03c      	b.n	80050fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005082:	f7fd f9ff 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8005086:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005088:	e038      	b.n	80050fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800508a:	f107 0314 	add.w	r3, r7, #20
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe f972 	bl	8003378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005098:	e030      	b.n	80050fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800509a:	f107 0308 	add.w	r3, r7, #8
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fabe 	bl	8003620 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050a8:	e028      	b.n	80050fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <UART_SetConfig+0xc2c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <UART_SetConfig+0xc2c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <UART_SetConfig+0xc30>)
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050c8:	e018      	b.n	80050fc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <UART_SetConfig+0xc30>)
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ce:	e015      	b.n	80050fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <UART_SetConfig+0xc34>)
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050d4:	e012      	b.n	80050fc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050dc:	e00e      	b.n	80050fc <UART_SetConfig+0xc44>
 80050de:	bf00      	nop
 80050e0:	08008878 	.word	0x08008878
 80050e4:	58024400 	.word	0x58024400
 80050e8:	03d09000 	.word	0x03d09000
 80050ec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80050fa:	bf00      	nop
    }

    if (pclk != 0U)
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d021      	beq.n	8005146 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <UART_SetConfig+0xcb8>)
 8005108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510c:	461a      	mov	r2, r3
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	fbb3 f2f2 	udiv	r2, r3, r2
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	2b0f      	cmp	r3, #15
 800512a:	d909      	bls.n	8005140 <UART_SetConfig+0xc88>
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005132:	d205      	bcs.n	8005140 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e002      	b.n	8005146 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005162:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005166:	4618      	mov	r0, r3
 8005168:	3738      	adds	r7, #56	; 0x38
 800516a:	46bd      	mov	sp, r7
 800516c:	bdb0      	pop	{r4, r5, r7, pc}
 800516e:	bf00      	nop
 8005170:	08008878 	.word	0x08008878

08005174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01a      	beq.n	800528a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005272:	d10a      	bne.n	800528a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c8:	f7fb fe52 	bl	8000f70 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d10e      	bne.n	80052fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f82f 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e025      	b.n	8005346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d10e      	bne.n	8005326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f819 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e00f      	b.n	8005346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b09c      	sub	sp, #112	; 0x70
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535e:	e0a9      	b.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005366:	f000 80a5 	beq.w	80054b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fb fe01 	bl	8000f70 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <UART_WaitOnFlagUntilTimeout+0x32>
 800537a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537c:	2b00      	cmp	r3, #0
 800537e:	d140      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005394:	667b      	str	r3, [r7, #100]	; 0x64
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e069      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d051      	beq.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	d149      	bne.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005428:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800543e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
 800544a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800544e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	613b      	str	r3, [r7, #16]
   return(result);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	66bb      	str	r3, [r7, #104]	; 0x68
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800547c:	623a      	str	r2, [r7, #32]
 800547e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	61bb      	str	r3, [r7, #24]
   return(result);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e010      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4013      	ands	r3, r2
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	f43f af46 	beq.w	8005360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3770      	adds	r7, #112	; 0x70
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e027      	b.n	8005544 <HAL_UARTEx_DisableFifoMode+0x66>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2224      	movs	r2, #36	; 0x24
 8005500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005522:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e02d      	b.n	80055c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	; 0x24
 8005574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f84f 	bl	8005648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e02d      	b.n	8005640 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	; 0x24
 80055f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f811 	bl	8005648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005668:	e031      	b.n	80056ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800566a:	2310      	movs	r3, #16
 800566c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800566e:	2310      	movs	r3, #16
 8005670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	0e5b      	lsrs	r3, r3, #25
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	0f5b      	lsrs	r3, r3, #29
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	7b3a      	ldrb	r2, [r7, #12]
 8005696:	4911      	ldr	r1, [pc, #68]	; (80056dc <UARTEx_SetNbDataToProcess+0x94>)
 8005698:	5c8a      	ldrb	r2, [r1, r2]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800569e:	7b3a      	ldrb	r2, [r7, #12]
 80056a0:	490f      	ldr	r1, [pc, #60]	; (80056e0 <UARTEx_SetNbDataToProcess+0x98>)
 80056a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	7b7a      	ldrb	r2, [r7, #13]
 80056b4:	4909      	ldr	r1, [pc, #36]	; (80056dc <UARTEx_SetNbDataToProcess+0x94>)
 80056b6:	5c8a      	ldrb	r2, [r1, r2]
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056bc:	7b7a      	ldrb	r2, [r7, #13]
 80056be:	4908      	ldr	r1, [pc, #32]	; (80056e0 <UARTEx_SetNbDataToProcess+0x98>)
 80056c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	08008890 	.word	0x08008890
 80056e0:	08008898 	.word	0x08008898

080056e4 <__NVIC_SetPriority>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	6039      	str	r1, [r7, #0]
 80056ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	db0a      	blt.n	800570e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	490c      	ldr	r1, [pc, #48]	; (8005730 <__NVIC_SetPriority+0x4c>)
 80056fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005702:	0112      	lsls	r2, r2, #4
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	440b      	add	r3, r1
 8005708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800570c:	e00a      	b.n	8005724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4908      	ldr	r1, [pc, #32]	; (8005734 <__NVIC_SetPriority+0x50>)
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	3b04      	subs	r3, #4
 800571c:	0112      	lsls	r2, r2, #4
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	440b      	add	r3, r1
 8005722:	761a      	strb	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	e000e100 	.word	0xe000e100
 8005734:	e000ed00 	.word	0xe000ed00

08005738 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <SysTick_Handler+0x1c>)
 800573e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005740:	f001 fdd4 	bl	80072ec <xTaskGetSchedulerState>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d001      	beq.n	800574e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800574a:	f002 fbbd 	bl	8007ec8 <xPortSysTickHandler>
  }
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	e000e010 	.word	0xe000e010

08005758 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800575c:	2100      	movs	r1, #0
 800575e:	f06f 0004 	mvn.w	r0, #4
 8005762:	f7ff ffbf 	bl	80056e4 <__NVIC_SetPriority>
#endif
}
 8005766:	bf00      	nop
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005772:	f3ef 8305 	mrs	r3, IPSR
 8005776:	603b      	str	r3, [r7, #0]
  return(result);
 8005778:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800577e:	f06f 0305 	mvn.w	r3, #5
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	e00c      	b.n	80057a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <osKernelInitialize+0x44>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d105      	bne.n	800579a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800578e:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <osKernelInitialize+0x44>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005794:	2300      	movs	r3, #0
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	e002      	b.n	80057a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800579e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057a0:	687b      	ldr	r3, [r7, #4]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	24000094 	.word	0x24000094

080057b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ba:	f3ef 8305 	mrs	r3, IPSR
 80057be:	603b      	str	r3, [r7, #0]
  return(result);
 80057c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80057c6:	f06f 0305 	mvn.w	r3, #5
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	e010      	b.n	80057f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <osKernelStart+0x48>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d109      	bne.n	80057ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057d6:	f7ff ffbf 	bl	8005758 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057da:	4b08      	ldr	r3, [pc, #32]	; (80057fc <osKernelStart+0x48>)
 80057dc:	2202      	movs	r2, #2
 80057de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057e0:	f001 f928 	bl	8006a34 <vTaskStartScheduler>
      stat = osOK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	607b      	str	r3, [r7, #4]
 80057e8:	e002      	b.n	80057f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057f0:	687b      	ldr	r3, [r7, #4]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	24000094 	.word	0x24000094

08005800 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	; 0x38
 8005804:	af04      	add	r7, sp, #16
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005810:	f3ef 8305 	mrs	r3, IPSR
 8005814:	617b      	str	r3, [r7, #20]
  return(result);
 8005816:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005818:	2b00      	cmp	r3, #0
 800581a:	d17e      	bne.n	800591a <osThreadNew+0x11a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d07b      	beq.n	800591a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005826:	2318      	movs	r3, #24
 8005828:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800582e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d045      	beq.n	80058c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <osThreadNew+0x48>
        name = attr->name;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <osThreadNew+0x6e>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b38      	cmp	r3, #56	; 0x38
 8005860:	d805      	bhi.n	800586e <osThreadNew+0x6e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <osThreadNew+0x72>
        return (NULL);
 800586e:	2300      	movs	r3, #0
 8005870:	e054      	b.n	800591c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00e      	beq.n	80058a8 <osThreadNew+0xa8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2bbb      	cmp	r3, #187	; 0xbb
 8005890:	d90a      	bls.n	80058a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <osThreadNew+0xa8>
        mem = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e010      	b.n	80058ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10c      	bne.n	80058ca <osThreadNew+0xca>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d108      	bne.n	80058ca <osThreadNew+0xca>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <osThreadNew+0xca>
          mem = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e001      	b.n	80058ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d110      	bne.n	80058f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058d8:	9202      	str	r2, [sp, #8]
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 feb8 	bl	800665c <xTaskCreateStatic>
 80058ec:	4603      	mov	r3, r0
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	e013      	b.n	800591a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d110      	bne.n	800591a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f107 0310 	add.w	r3, r7, #16
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 ff03 	bl	8006716 <xTaskCreate>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <osThreadNew+0x11a>
            hTask = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800591a:	693b      	ldr	r3, [r7, #16]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3728      	adds	r7, #40	; 0x28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800592c:	f3ef 8305 	mrs	r3, IPSR
 8005930:	60bb      	str	r3, [r7, #8]
  return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <osDelay+0x1c>
    stat = osErrorISR;
 8005938:	f06f 0305 	mvn.w	r3, #5
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e007      	b.n	8005950 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <osDelay+0x2c>
      vTaskDelay(ticks);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 f83e 	bl	80069cc <vTaskDelay>
    }
  }

  return (stat);
 8005950:	68fb      	ldr	r3, [r7, #12]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800595a:	b580      	push	{r7, lr}
 800595c:	b08a      	sub	sp, #40	; 0x28
 800595e:	af02      	add	r7, sp, #8
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596a:	f3ef 8305 	mrs	r3, IPSR
 800596e:	613b      	str	r3, [r7, #16]
  return(result);
 8005970:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005972:	2b00      	cmp	r3, #0
 8005974:	d15f      	bne.n	8005a36 <osMessageQueueNew+0xdc>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05c      	beq.n	8005a36 <osMessageQueueNew+0xdc>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d059      	beq.n	8005a36 <osMessageQueueNew+0xdc>
    mem = -1;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005986:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d029      	beq.n	80059e2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d012      	beq.n	80059bc <osMessageQueueNew+0x62>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b4f      	cmp	r3, #79	; 0x4f
 800599c:	d90e      	bls.n	80059bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	fb01 f303 	mul.w	r3, r1, r3
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <osMessageQueueNew+0x62>
        mem = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e014      	b.n	80059e6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d110      	bne.n	80059e6 <osMessageQueueNew+0x8c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10c      	bne.n	80059e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d108      	bne.n	80059e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <osMessageQueueNew+0x8c>
          mem = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e001      	b.n	80059e6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d10b      	bne.n	8005a04 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2100      	movs	r1, #0
 80059f6:	9100      	str	r1, [sp, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f970 	bl	8005ce0 <xQueueGenericCreateStatic>
 8005a00:	61f8      	str	r0, [r7, #28]
 8005a02:	e008      	b.n	8005a16 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f9de 	bl	8005dd0 <xQueueGenericCreate>
 8005a14:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <osMessageQueueNew+0xd0>
        name = attr->name;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e001      	b.n	8005a2e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a2e:	6979      	ldr	r1, [r7, #20]
 8005a30:	69f8      	ldr	r0, [r7, #28]
 8005a32:	f000 fdb5 	bl	80065a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a36:	69fb      	ldr	r3, [r7, #28]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8005a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4a06      	ldr	r2, [pc, #24]	; (8005a70 <vApplicationGetIdleTaskMemory+0x30>)
 8005a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	24000098 	.word	0x24000098
 8005a70:	24000154 	.word	0x24000154

08005a74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4a06      	ldr	r2, [pc, #24]	; (8005aa4 <vApplicationGetTimerTaskMemory+0x30>)
 8005a8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	24000354 	.word	0x24000354
 8005aa4:	24000410 	.word	0x24000410

08005aa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f103 0208 	add.w	r2, r3, #8
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f103 0208 	add.w	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f103 0208 	add.w	r2, r3, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b60:	d103      	bne.n	8005b6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e00c      	b.n	8005b84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e002      	b.n	8005b78 <vListInsert+0x2e>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d2f6      	bcs.n	8005b72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6892      	ldr	r2, [r2, #8]
 8005bd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6852      	ldr	r2, [r2, #4]
 8005bdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d103      	bne.n	8005bf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c3a:	f002 f8b3 	bl	8007da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	441a      	add	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	68f9      	ldr	r1, [r7, #12]
 8005c6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	22ff      	movs	r2, #255	; 0xff
 8005c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d114      	bne.n	8005cba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01a      	beq.n	8005cce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3310      	adds	r3, #16
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 f963 	bl	8006f68 <xTaskRemoveFromEventList>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <xQueueGenericReset+0xcc>)
 8005caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	e009      	b.n	8005cce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3310      	adds	r3, #16
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fef2 	bl	8005aa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3324      	adds	r3, #36	; 0x24
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff feed 	bl	8005aa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cce:	f002 f899 	bl	8007e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cd2:	2301      	movs	r3, #1
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08e      	sub	sp, #56	; 0x38
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <xQueueGenericCreateStatic+0x52>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <xQueueGenericCreateStatic+0x56>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <xQueueGenericCreateStatic+0x58>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	623b      	str	r3, [r7, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <xQueueGenericCreateStatic+0x7e>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <xQueueGenericCreateStatic+0x82>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueGenericCreateStatic+0x84>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	61fb      	str	r3, [r7, #28]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d7e:	2350      	movs	r3, #80	; 0x50
 8005d80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b50      	cmp	r3, #80	; 0x50
 8005d86:	d00a      	beq.n	8005d9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	61bb      	str	r3, [r7, #24]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00d      	beq.n	8005dc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005db2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f83f 	bl	8005e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3730      	adds	r7, #48	; 0x30
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xQueueGenericCreate+0x2a>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	613b      	str	r3, [r7, #16]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	3350      	adds	r3, #80	; 0x50
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f002 f8ed 	bl	8007fe8 <pvPortMalloc>
 8005e0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d011      	beq.n	8005e3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	3350      	adds	r3, #80	; 0x50
 8005e1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e28:	79fa      	ldrb	r2, [r7, #7]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f805 	bl	8005e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e72:	2101      	movs	r1, #1
 8005e74:	69b8      	ldr	r0, [r7, #24]
 8005e76:	f7ff fecb 	bl	8005c10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e82:	bf00      	nop
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08e      	sub	sp, #56	; 0x38
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xQueueGenericSend+0x32>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <xQueueGenericSend+0x40>
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <xQueueGenericSend+0x44>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <xQueueGenericSend+0x46>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <xQueueGenericSend+0x60>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d103      	bne.n	8005efa <xQueueGenericSend+0x6e>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <xQueueGenericSend+0x72>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <xQueueGenericSend+0x74>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f1a:	f001 f9e7 	bl	80072ec <xTaskGetSchedulerState>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <xQueueGenericSend+0x9e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <xQueueGenericSend+0xa2>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <xQueueGenericSend+0xa4>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <xQueueGenericSend+0xbe>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	61fb      	str	r3, [r7, #28]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f4a:	f001 ff2b 	bl	8007da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d302      	bcc.n	8005f60 <xQueueGenericSend+0xd4>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d129      	bne.n	8005fb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f66:	f000 fa0b 	bl	8006380 <prvCopyDataToQueue>
 8005f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d010      	beq.n	8005f96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	3324      	adds	r3, #36	; 0x24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fff5 	bl	8006f68 <xTaskRemoveFromEventList>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d013      	beq.n	8005fac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f84:	4b3f      	ldr	r3, [pc, #252]	; (8006084 <xQueueGenericSend+0x1f8>)
 8005f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	e00a      	b.n	8005fac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f9c:	4b39      	ldr	r3, [pc, #228]	; (8006084 <xQueueGenericSend+0x1f8>)
 8005f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fac:	f001 ff2a 	bl	8007e04 <vPortExitCritical>
				return pdPASS;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e063      	b.n	800607c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fba:	f001 ff23 	bl	8007e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e05c      	b.n	800607c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fc8:	f107 0314 	add.w	r3, r7, #20
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f001 f82f 	bl	8007030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fd6:	f001 ff15 	bl	8007e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fda:	f000 fd9b 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fde:	f001 fee1 	bl	8007da4 <vPortEnterCritical>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe8:	b25b      	sxtb	r3, r3
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fee:	d103      	bne.n	8005ff8 <xQueueGenericSend+0x16c>
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ffe:	b25b      	sxtb	r3, r3
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006004:	d103      	bne.n	800600e <xQueueGenericSend+0x182>
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800600e:	f001 fef9 	bl	8007e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006012:	1d3a      	adds	r2, r7, #4
 8006014:	f107 0314 	add.w	r3, r7, #20
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f001 f81e 	bl	800705c <xTaskCheckForTimeOut>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d124      	bne.n	8006070 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006028:	f000 faa2 	bl	8006570 <prvIsQueueFull>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d018      	beq.n	8006064 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	3310      	adds	r3, #16
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f000 ff44 	bl	8006ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006042:	f000 fa2d 	bl	80064a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006046:	f000 fd73 	bl	8006b30 <xTaskResumeAll>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	f47f af7c 	bne.w	8005f4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006052:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <xQueueGenericSend+0x1f8>)
 8006054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	e772      	b.n	8005f4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006066:	f000 fa1b 	bl	80064a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800606a:	f000 fd61 	bl	8006b30 <xTaskResumeAll>
 800606e:	e76c      	b.n	8005f4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006072:	f000 fa15 	bl	80064a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006076:	f000 fd5b 	bl	8006b30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800607a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800607c:	4618      	mov	r0, r3
 800607e:	3738      	adds	r7, #56	; 0x38
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b090      	sub	sp, #64	; 0x40
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d103      	bne.n	80060c4 <xQueueGenericSendFromISR+0x3c>
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <xQueueGenericSendFromISR+0x40>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <xQueueGenericSendFromISR+0x42>
 80060c8:	2300      	movs	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d103      	bne.n	80060f2 <xQueueGenericSendFromISR+0x6a>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <xQueueGenericSendFromISR+0x6e>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <xQueueGenericSendFromISR+0x70>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	623b      	str	r3, [r7, #32]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006112:	f001 ff29 	bl	8007f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006116:	f3ef 8211 	mrs	r2, BASEPRI
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	61fa      	str	r2, [r7, #28]
 800612c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800612e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <xQueueGenericSendFromISR+0xbc>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d12f      	bne.n	80061a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800614a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800615a:	f000 f911 	bl	8006380 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800615e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006166:	d112      	bne.n	800618e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d016      	beq.n	800619e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	3324      	adds	r3, #36	; 0x24
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fef7 	bl	8006f68 <xTaskRemoveFromEventList>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00e      	beq.n	800619e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	e007      	b.n	800619e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800618e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006192:	3301      	adds	r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	b25a      	sxtb	r2, r3
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800619e:	2301      	movs	r3, #1
 80061a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80061a2:	e001      	b.n	80061a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3740      	adds	r7, #64	; 0x40
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <xQueueReceive+0x30>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	623b      	str	r3, [r7, #32]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <xQueueReceive+0x3e>
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <xQueueReceive+0x42>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <xQueueReceive+0x44>
 8006202:	2300      	movs	r3, #0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xQueueReceive+0x5e>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	61fb      	str	r3, [r7, #28]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800621e:	f001 f865 	bl	80072ec <xTaskGetSchedulerState>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <xQueueReceive+0x6e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <xQueueReceive+0x72>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <xQueueReceive+0x74>
 8006232:	2300      	movs	r3, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xQueueReceive+0x8e>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	61bb      	str	r3, [r7, #24]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800624e:	f001 fda9 	bl	8007da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01f      	beq.n	800629e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006262:	f000 f8f7 	bl	8006454 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	1e5a      	subs	r2, r3, #1
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00f      	beq.n	8006296 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	3310      	adds	r3, #16
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fe74 	bl	8006f68 <xTaskRemoveFromEventList>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006286:	4b3d      	ldr	r3, [pc, #244]	; (800637c <xQueueReceive+0x1bc>)
 8006288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006296:	f001 fdb5 	bl	8007e04 <vPortExitCritical>
				return pdPASS;
 800629a:	2301      	movs	r3, #1
 800629c:	e069      	b.n	8006372 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d103      	bne.n	80062ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062a4:	f001 fdae 	bl	8007e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e062      	b.n	8006372 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062b2:	f107 0310 	add.w	r3, r7, #16
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 feba 	bl	8007030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062c0:	f001 fda0 	bl	8007e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062c4:	f000 fc26 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062c8:	f001 fd6c 	bl	8007da4 <vPortEnterCritical>
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d2:	b25b      	sxtb	r3, r3
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d8:	d103      	bne.n	80062e2 <xQueueReceive+0x122>
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e8:	b25b      	sxtb	r3, r3
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ee:	d103      	bne.n	80062f8 <xQueueReceive+0x138>
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f8:	f001 fd84 	bl	8007e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062fc:	1d3a      	adds	r2, r7, #4
 80062fe:	f107 0310 	add.w	r3, r7, #16
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fea9 	bl	800705c <xTaskCheckForTimeOut>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d123      	bne.n	8006358 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006312:	f000 f917 	bl	8006544 <prvIsQueueEmpty>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	3324      	adds	r3, #36	; 0x24
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fdcf 	bl	8006ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800632a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632c:	f000 f8b8 	bl	80064a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006330:	f000 fbfe 	bl	8006b30 <xTaskResumeAll>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d189      	bne.n	800624e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <xQueueReceive+0x1bc>)
 800633c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	e780      	b.n	800624e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800634c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634e:	f000 f8a7 	bl	80064a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006352:	f000 fbed 	bl	8006b30 <xTaskResumeAll>
 8006356:	e77a      	b.n	800624e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635a:	f000 f8a1 	bl	80064a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800635e:	f000 fbe7 	bl	8006b30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006364:	f000 f8ee 	bl	8006544 <prvIsQueueEmpty>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f43f af6f 	beq.w	800624e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006372:	4618      	mov	r0, r3
 8006374:	3730      	adds	r7, #48	; 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	e000ed04 	.word	0xe000ed04

08006380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10d      	bne.n	80063ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d14d      	bne.n	8006442 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 ffbc 	bl	8007328 <xTaskPriorityDisinherit>
 80063b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	e043      	b.n	8006442 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d119      	bne.n	80063f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6858      	ldr	r0, [r3, #4]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	461a      	mov	r2, r3
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	f002 f826 	bl	800841c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	441a      	add	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d32b      	bcc.n	8006442 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	e026      	b.n	8006442 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68d8      	ldr	r0, [r3, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	461a      	mov	r2, r3
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	f002 f80c 	bl	800841c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	425b      	negs	r3, r3
 800640e:	441a      	add	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d207      	bcs.n	8006430 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	425b      	negs	r3, r3
 800642a:	441a      	add	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d105      	bne.n	8006442 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3b01      	subs	r3, #1
 8006440:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800644a:	697b      	ldr	r3, [r7, #20]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d018      	beq.n	8006498 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	441a      	add	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	d303      	bcc.n	8006488 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68d9      	ldr	r1, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	461a      	mov	r2, r3
 8006492:	6838      	ldr	r0, [r7, #0]
 8006494:	f001 ffc2 	bl	800841c <memcpy>
	}
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064a8:	f001 fc7c 	bl	8007da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064b4:	e011      	b.n	80064da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d012      	beq.n	80064e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3324      	adds	r3, #36	; 0x24
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fd50 	bl	8006f68 <xTaskRemoveFromEventList>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064ce:	f000 fe27 	bl	8007120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	dce9      	bgt.n	80064b6 <prvUnlockQueue+0x16>
 80064e2:	e000      	b.n	80064e6 <prvUnlockQueue+0x46>
					break;
 80064e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	22ff      	movs	r2, #255	; 0xff
 80064ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064ee:	f001 fc89 	bl	8007e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064f2:	f001 fc57 	bl	8007da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064fe:	e011      	b.n	8006524 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d012      	beq.n	800652e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3310      	adds	r3, #16
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fd2b 	bl	8006f68 <xTaskRemoveFromEventList>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006518:	f000 fe02 	bl	8007120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	3b01      	subs	r3, #1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006528:	2b00      	cmp	r3, #0
 800652a:	dce9      	bgt.n	8006500 <prvUnlockQueue+0x60>
 800652c:	e000      	b.n	8006530 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800652e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	22ff      	movs	r2, #255	; 0xff
 8006534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006538:	f001 fc64 	bl	8007e04 <vPortExitCritical>
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800654c:	f001 fc2a 	bl	8007da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006558:	2301      	movs	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	e001      	b.n	8006562 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006562:	f001 fc4f 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 8006566:	68fb      	ldr	r3, [r7, #12]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006578:	f001 fc14 	bl	8007da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006584:	429a      	cmp	r2, r3
 8006586:	d102      	bne.n	800658e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e001      	b.n	8006592 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006592:	f001 fc37 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 8006596:	68fb      	ldr	r3, [r7, #12]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e014      	b.n	80065da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <vQueueAddToRegistry+0x50>)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065bc:	490c      	ldr	r1, [pc, #48]	; (80065f0 <vQueueAddToRegistry+0x50>)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065c6:	4a0a      	ldr	r2, [pc, #40]	; (80065f0 <vQueueAddToRegistry+0x50>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065d2:	e006      	b.n	80065e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b07      	cmp	r3, #7
 80065de:	d9e7      	bls.n	80065b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	24004bd4 	.word	0x24004bd4

080065f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006604:	f001 fbce 	bl	8007da4 <vPortEnterCritical>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800660e:	b25b      	sxtb	r3, r3
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006614:	d103      	bne.n	800661e <vQueueWaitForMessageRestricted+0x2a>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006624:	b25b      	sxtb	r3, r3
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800662a:	d103      	bne.n	8006634 <vQueueWaitForMessageRestricted+0x40>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006634:	f001 fbe6 	bl	8007e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3324      	adds	r3, #36	; 0x24
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fc61 	bl	8006f10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f7ff ff26 	bl	80064a0 <prvUnlockQueue>
	}
 8006654:	bf00      	nop
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08e      	sub	sp, #56	; 0x38
 8006660:	af04      	add	r7, sp, #16
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	623b      	str	r3, [r7, #32]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	61fb      	str	r3, [r7, #28]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066a2:	23bc      	movs	r3, #188	; 0xbc
 80066a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2bbc      	cmp	r3, #188	; 0xbc
 80066aa:	d00a      	beq.n	80066c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	61bb      	str	r3, [r7, #24]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d01e      	beq.n	8006708 <xTaskCreateStatic+0xac>
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01b      	beq.n	8006708 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066e2:	2300      	movs	r3, #0
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	9302      	str	r3, [sp, #8]
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f850 	bl	80067a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006702:	f000 f8f3 	bl	80068ec <prvAddNewTaskToReadyList>
 8006706:	e001      	b.n	800670c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800670c:	697b      	ldr	r3, [r7, #20]
	}
 800670e:	4618      	mov	r0, r3
 8006710:	3728      	adds	r7, #40	; 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006716:	b580      	push	{r7, lr}
 8006718:	b08c      	sub	sp, #48	; 0x30
 800671a:	af04      	add	r7, sp, #16
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	4613      	mov	r3, r2
 8006724:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fc5c 	bl	8007fe8 <pvPortMalloc>
 8006730:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00e      	beq.n	8006756 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006738:	20bc      	movs	r0, #188	; 0xbc
 800673a:	f001 fc55 	bl	8007fe8 <pvPortMalloc>
 800673e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
 800674c:	e005      	b.n	800675a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800674e:	6978      	ldr	r0, [r7, #20]
 8006750:	f001 fd16 	bl	8008180 <vPortFree>
 8006754:	e001      	b.n	800675a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	2300      	movs	r3, #0
 800676c:	9303      	str	r3, [sp, #12]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f80e 	bl	80067a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006784:	69f8      	ldr	r0, [r7, #28]
 8006786:	f000 f8b1 	bl	80068ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800678a:	2301      	movs	r3, #1
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e002      	b.n	8006796 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006794:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006796:	69bb      	ldr	r3, [r7, #24]
	}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	461a      	mov	r2, r3
 80067b8:	21a5      	movs	r1, #165	; 0xa5
 80067ba:	f001 fe3d 	bl	8008438 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80067c8:	440b      	add	r3, r1
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f023 0307 	bic.w	r3, r3, #7
 80067d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	617b      	str	r3, [r7, #20]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01f      	beq.n	800683e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	e012      	b.n	800682a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	7819      	ldrb	r1, [r3, #0]
 800680c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	3334      	adds	r3, #52	; 0x34
 8006814:	460a      	mov	r2, r1
 8006816:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d006      	beq.n	8006832 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	3301      	adds	r3, #1
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	2b0f      	cmp	r3, #15
 800682e:	d9e9      	bls.n	8006804 <prvInitialiseNewTask+0x64>
 8006830:	e000      	b.n	8006834 <prvInitialiseNewTask+0x94>
			{
				break;
 8006832:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800683c:	e003      	b.n	8006846 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	2b37      	cmp	r3, #55	; 0x37
 800684a:	d901      	bls.n	8006850 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800684c:	2337      	movs	r3, #55	; 0x37
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006854:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800685a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	2200      	movs	r2, #0
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	3304      	adds	r3, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff f93e 	bl	8005ae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	3318      	adds	r3, #24
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff f939 	bl	8005ae8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800688a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2200      	movs	r2, #0
 8006898:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	3354      	adds	r3, #84	; 0x54
 80068a0:	2260      	movs	r2, #96	; 0x60
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fdc7 	bl	8008438 <memset>
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	4a0c      	ldr	r2, [pc, #48]	; (80068e0 <prvInitialiseNewTask+0x140>)
 80068ae:	659a      	str	r2, [r3, #88]	; 0x58
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <prvInitialiseNewTask+0x144>)
 80068b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <prvInitialiseNewTask+0x148>)
 80068ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	69b8      	ldr	r0, [r7, #24]
 80068c2:	f001 f941 	bl	8007b48 <pxPortInitialiseStack>
 80068c6:	4602      	mov	r2, r0
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d8:	bf00      	nop
 80068da:	3720      	adds	r7, #32
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	080088c0 	.word	0x080088c0
 80068e4:	080088e0 	.word	0x080088e0
 80068e8:	080088a0 	.word	0x080088a0

080068ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068f4:	f001 fa56 	bl	8007da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068f8:	4b2d      	ldr	r3, [pc, #180]	; (80069b0 <prvAddNewTaskToReadyList+0xc4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3301      	adds	r3, #1
 80068fe:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <prvAddNewTaskToReadyList+0xc4>)
 8006900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006902:	4b2c      	ldr	r3, [pc, #176]	; (80069b4 <prvAddNewTaskToReadyList+0xc8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800690a:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <prvAddNewTaskToReadyList+0xc8>)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006910:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <prvAddNewTaskToReadyList+0xc4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d110      	bne.n	800693a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006918:	f000 fc26 	bl	8007168 <prvInitialiseTaskLists>
 800691c:	e00d      	b.n	800693a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800691e:	4b26      	ldr	r3, [pc, #152]	; (80069b8 <prvAddNewTaskToReadyList+0xcc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006926:	4b23      	ldr	r3, [pc, #140]	; (80069b4 <prvAddNewTaskToReadyList+0xc8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	429a      	cmp	r2, r3
 8006932:	d802      	bhi.n	800693a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006934:	4a1f      	ldr	r2, [pc, #124]	; (80069b4 <prvAddNewTaskToReadyList+0xc8>)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800693a:	4b20      	ldr	r3, [pc, #128]	; (80069bc <prvAddNewTaskToReadyList+0xd0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3301      	adds	r3, #1
 8006940:	4a1e      	ldr	r2, [pc, #120]	; (80069bc <prvAddNewTaskToReadyList+0xd0>)
 8006942:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006944:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <prvAddNewTaskToReadyList+0xd0>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <prvAddNewTaskToReadyList+0xd4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d903      	bls.n	8006960 <prvAddNewTaskToReadyList+0x74>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <prvAddNewTaskToReadyList+0xd4>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <prvAddNewTaskToReadyList+0xd8>)
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7ff f8c3 	bl	8005b02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800697c:	f001 fa42 	bl	8007e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006980:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <prvAddNewTaskToReadyList+0xcc>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00e      	beq.n	80069a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <prvAddNewTaskToReadyList+0xc8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	429a      	cmp	r2, r3
 8006994:	d207      	bcs.n	80069a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <prvAddNewTaskToReadyList+0xdc>)
 8006998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	24000ce4 	.word	0x24000ce4
 80069b4:	24000810 	.word	0x24000810
 80069b8:	24000cf0 	.word	0x24000cf0
 80069bc:	24000d00 	.word	0x24000d00
 80069c0:	24000cec 	.word	0x24000cec
 80069c4:	24000814 	.word	0x24000814
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d017      	beq.n	8006a0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069de:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <vTaskDelay+0x60>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <vTaskDelay+0x30>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60bb      	str	r3, [r7, #8]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069fc:	f000 f88a 	bl	8006b14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fcfe 	bl	8007404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a08:	f000 f892 	bl	8006b30 <xTaskResumeAll>
 8006a0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d107      	bne.n	8006a24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <vTaskDelay+0x64>)
 8006a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a24:	bf00      	nop
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	24000d0c 	.word	0x24000d0c
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a42:	463a      	mov	r2, r7
 8006a44:	1d39      	adds	r1, r7, #4
 8006a46:	f107 0308 	add.w	r3, r7, #8
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fff8 	bl	8005a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	9202      	str	r2, [sp, #8]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	460a      	mov	r2, r1
 8006a62:	4924      	ldr	r1, [pc, #144]	; (8006af4 <vTaskStartScheduler+0xc0>)
 8006a64:	4824      	ldr	r0, [pc, #144]	; (8006af8 <vTaskStartScheduler+0xc4>)
 8006a66:	f7ff fdf9 	bl	800665c <xTaskCreateStatic>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4a23      	ldr	r2, [pc, #140]	; (8006afc <vTaskStartScheduler+0xc8>)
 8006a6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a70:	4b22      	ldr	r3, [pc, #136]	; (8006afc <vTaskStartScheduler+0xc8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	e001      	b.n	8006a82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d102      	bne.n	8006a8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a88:	f000 fd10 	bl	80074ac <xTimerCreateTimerTask>
 8006a8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d11b      	bne.n	8006acc <vTaskStartScheduler+0x98>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	613b      	str	r3, [r7, #16]
}
 8006aa6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006aa8:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <vTaskStartScheduler+0xcc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3354      	adds	r3, #84	; 0x54
 8006aae:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <vTaskStartScheduler+0xd0>)
 8006ab0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <vTaskStartScheduler+0xd4>)
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <vTaskStartScheduler+0xd8>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ac0:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <vTaskStartScheduler+0xdc>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ac6:	f001 f8cb 	bl	8007c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006aca:	e00e      	b.n	8006aea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad2:	d10a      	bne.n	8006aea <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <vTaskStartScheduler+0xb4>
}
 8006aea:	bf00      	nop
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	08008790 	.word	0x08008790
 8006af8:	08007139 	.word	0x08007139
 8006afc:	24000d08 	.word	0x24000d08
 8006b00:	24000810 	.word	0x24000810
 8006b04:	24000014 	.word	0x24000014
 8006b08:	24000d04 	.word	0x24000d04
 8006b0c:	24000cf0 	.word	0x24000cf0
 8006b10:	24000ce8 	.word	0x24000ce8

08006b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <vTaskSuspendAll+0x18>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <vTaskSuspendAll+0x18>)
 8006b20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	24000d0c 	.word	0x24000d0c

08006b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b3e:	4b42      	ldr	r3, [pc, #264]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b5c:	f001 f922 	bl	8007da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b60:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	4a38      	ldr	r2, [pc, #224]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6a:	4b37      	ldr	r3, [pc, #220]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d162      	bne.n	8006c38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b72:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <xTaskResumeAll+0x11c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05e      	beq.n	8006c38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b7a:	e02f      	b.n	8006bdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7c:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <xTaskResumeAll+0x120>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f817 	bl	8005bbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff f812 	bl	8005bbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <xTaskResumeAll+0x124>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <xTaskResumeAll+0x7c>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <xTaskResumeAll+0x124>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a27      	ldr	r2, [pc, #156]	; (8006c58 <xTaskResumeAll+0x128>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe ff9d 	bl	8005b02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <xTaskResumeAll+0x12c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d302      	bcc.n	8006bdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bd6:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <xTaskResumeAll+0x130>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bdc:	4b1c      	ldr	r3, [pc, #112]	; (8006c50 <xTaskResumeAll+0x120>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1cb      	bne.n	8006b7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bea:	f000 fb5f 	bl	80072ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bee:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <xTaskResumeAll+0x134>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d010      	beq.n	8006c1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bfa:	f000 f847 	bl	8006c8c <xTaskIncrementTick>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c04:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <xTaskResumeAll+0x130>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f1      	bne.n	8006bfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c16:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <xTaskResumeAll+0x134>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xTaskResumeAll+0x130>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c28:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <xTaskResumeAll+0x138>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c38:	f001 f8e4 	bl	8007e04 <vPortExitCritical>

	return xAlreadyYielded;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	24000d0c 	.word	0x24000d0c
 8006c4c:	24000ce4 	.word	0x24000ce4
 8006c50:	24000ca4 	.word	0x24000ca4
 8006c54:	24000cec 	.word	0x24000cec
 8006c58:	24000814 	.word	0x24000814
 8006c5c:	24000810 	.word	0x24000810
 8006c60:	24000cf8 	.word	0x24000cf8
 8006c64:	24000cf4 	.word	0x24000cf4
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <xTaskGetTickCount+0x1c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c78:	687b      	ldr	r3, [r7, #4]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	24000ce8 	.word	0x24000ce8

08006c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c96:	4b4f      	ldr	r3, [pc, #316]	; (8006dd4 <xTaskIncrementTick+0x148>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 808f 	bne.w	8006dbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ca0:	4b4d      	ldr	r3, [pc, #308]	; (8006dd8 <xTaskIncrementTick+0x14c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ca8:	4a4b      	ldr	r2, [pc, #300]	; (8006dd8 <xTaskIncrementTick+0x14c>)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d120      	bne.n	8006cf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cb4:	4b49      	ldr	r3, [pc, #292]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	603b      	str	r3, [r7, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskIncrementTick+0x46>
 8006cd4:	4b41      	ldr	r3, [pc, #260]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	4b41      	ldr	r3, [pc, #260]	; (8006de0 <xTaskIncrementTick+0x154>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a3f      	ldr	r2, [pc, #252]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	4a3f      	ldr	r2, [pc, #252]	; (8006de0 <xTaskIncrementTick+0x154>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4b3e      	ldr	r3, [pc, #248]	; (8006de4 <xTaskIncrementTick+0x158>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	4a3d      	ldr	r2, [pc, #244]	; (8006de4 <xTaskIncrementTick+0x158>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	f000 fadb 	bl	80072ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cf6:	4b3c      	ldr	r3, [pc, #240]	; (8006de8 <xTaskIncrementTick+0x15c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d349      	bcc.n	8006d94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d00:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0a:	4b37      	ldr	r3, [pc, #220]	; (8006de8 <xTaskIncrementTick+0x15c>)
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d10:	601a      	str	r2, [r3, #0]
					break;
 8006d12:	e03f      	b.n	8006d94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d14:	4b31      	ldr	r3, [pc, #196]	; (8006ddc <xTaskIncrementTick+0x150>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d203      	bcs.n	8006d34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d2c:	4a2e      	ldr	r2, [pc, #184]	; (8006de8 <xTaskIncrementTick+0x15c>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d32:	e02f      	b.n	8006d94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe ff3f 	bl	8005bbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3318      	adds	r3, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe ff36 	bl	8005bbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	4b25      	ldr	r3, [pc, #148]	; (8006dec <xTaskIncrementTick+0x160>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d903      	bls.n	8006d64 <xTaskIncrementTick+0xd8>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	4a22      	ldr	r2, [pc, #136]	; (8006dec <xTaskIncrementTick+0x160>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <xTaskIncrementTick+0x164>)
 8006d72:	441a      	add	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fe fec1 	bl	8005b02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	4b1b      	ldr	r3, [pc, #108]	; (8006df4 <xTaskIncrementTick+0x168>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d3b8      	bcc.n	8006d00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d92:	e7b5      	b.n	8006d00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d94:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <xTaskIncrementTick+0x168>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	4915      	ldr	r1, [pc, #84]	; (8006df0 <xTaskIncrementTick+0x164>)
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d901      	bls.n	8006db0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <xTaskIncrementTick+0x16c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e004      	b.n	8006dc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <xTaskIncrementTick+0x170>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <xTaskIncrementTick+0x170>)
 8006dc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dc8:	697b      	ldr	r3, [r7, #20]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	24000d0c 	.word	0x24000d0c
 8006dd8:	24000ce8 	.word	0x24000ce8
 8006ddc:	24000c9c 	.word	0x24000c9c
 8006de0:	24000ca0 	.word	0x24000ca0
 8006de4:	24000cfc 	.word	0x24000cfc
 8006de8:	24000d04 	.word	0x24000d04
 8006dec:	24000cec 	.word	0x24000cec
 8006df0:	24000814 	.word	0x24000814
 8006df4:	24000810 	.word	0x24000810
 8006df8:	24000cf8 	.word	0x24000cf8
 8006dfc:	24000cf4 	.word	0x24000cf4

08006e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e06:	4b2a      	ldr	r3, [pc, #168]	; (8006eb0 <vTaskSwitchContext+0xb0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e0e:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <vTaskSwitchContext+0xb4>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e14:	e046      	b.n	8006ea4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006e16:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <vTaskSwitchContext+0xb4>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1c:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <vTaskSwitchContext+0xb8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e010      	b.n	8006e46 <vTaskSwitchContext+0x46>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	607b      	str	r3, [r7, #4]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <vTaskSwitchContext+0x3e>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	491d      	ldr	r1, [pc, #116]	; (8006ebc <vTaskSwitchContext+0xbc>)
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0e4      	beq.n	8006e24 <vTaskSwitchContext+0x24>
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4a15      	ldr	r2, [pc, #84]	; (8006ebc <vTaskSwitchContext+0xbc>)
 8006e66:	4413      	add	r3, r2
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	605a      	str	r2, [r3, #4]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d104      	bne.n	8006e8a <vTaskSwitchContext+0x8a>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	605a      	str	r2, [r3, #4]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <vTaskSwitchContext+0xc0>)
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <vTaskSwitchContext+0xb8>)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <vTaskSwitchContext+0xc0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3354      	adds	r3, #84	; 0x54
 8006ea0:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <vTaskSwitchContext+0xc4>)
 8006ea2:	6013      	str	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	24000d0c 	.word	0x24000d0c
 8006eb4:	24000cf8 	.word	0x24000cf8
 8006eb8:	24000cec 	.word	0x24000cec
 8006ebc:	24000814 	.word	0x24000814
 8006ec0:	24000810 	.word	0x24000810
 8006ec4:	24000014 	.word	0x24000014

08006ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10a      	bne.n	8006eee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	60fb      	str	r3, [r7, #12]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <vTaskPlaceOnEventList+0x44>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fe fe27 	bl	8005b4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006efc:	2101      	movs	r1, #1
 8006efe:	6838      	ldr	r0, [r7, #0]
 8006f00:	f000 fa80 	bl	8007404 <prvAddCurrentTaskToDelayedList>
}
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	24000810 	.word	0x24000810

08006f10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	617b      	str	r3, [r7, #20]
}
 8006f34:	bf00      	nop
 8006f36:	e7fe      	b.n	8006f36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f38:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7fe fdde 	bl	8005b02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	68b8      	ldr	r0, [r7, #8]
 8006f56:	f000 fa55 	bl	8007404 <prvAddCurrentTaskToDelayedList>
	}
 8006f5a:	bf00      	nop
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	24000810 	.word	0x24000810

08006f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60fb      	str	r3, [r7, #12]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3318      	adds	r3, #24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe fe0f 	bl	8005bbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <xTaskRemoveFromEventList+0xb0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d11d      	bne.n	8006fe2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fe06 	bl	8005bbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <xTaskRemoveFromEventList+0xb4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d903      	bls.n	8006fc4 <xTaskRemoveFromEventList+0x5c>
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	4a16      	ldr	r2, [pc, #88]	; (800701c <xTaskRemoveFromEventList+0xb4>)
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4a13      	ldr	r2, [pc, #76]	; (8007020 <xTaskRemoveFromEventList+0xb8>)
 8006fd2:	441a      	add	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	f7fe fd91 	bl	8005b02 <vListInsertEnd>
 8006fe0:	e005      	b.n	8006fee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	480e      	ldr	r0, [pc, #56]	; (8007024 <xTaskRemoveFromEventList+0xbc>)
 8006fea:	f7fe fd8a 	bl	8005b02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <xTaskRemoveFromEventList+0xc0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d905      	bls.n	8007008 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007000:	4b0a      	ldr	r3, [pc, #40]	; (800702c <xTaskRemoveFromEventList+0xc4>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	e001      	b.n	800700c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800700c:	697b      	ldr	r3, [r7, #20]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	24000d0c 	.word	0x24000d0c
 800701c:	24000cec 	.word	0x24000cec
 8007020:	24000814 	.word	0x24000814
 8007024:	24000ca4 	.word	0x24000ca4
 8007028:	24000810 	.word	0x24000810
 800702c:	24000cf8 	.word	0x24000cf8

08007030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <vTaskInternalSetTimeOutState+0x24>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <vTaskInternalSetTimeOutState+0x28>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	605a      	str	r2, [r3, #4]
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	24000cfc 	.word	0x24000cfc
 8007058:	24000ce8 	.word	0x24000ce8

0800705c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	613b      	str	r3, [r7, #16]
}
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	60fb      	str	r3, [r7, #12]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800709e:	f000 fe81 	bl	8007da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070a2:	4b1d      	ldr	r3, [pc, #116]	; (8007118 <xTaskCheckForTimeOut+0xbc>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ba:	d102      	bne.n	80070c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070bc:	2300      	movs	r3, #0
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	e023      	b.n	800710a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <xTaskCheckForTimeOut+0xc0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d007      	beq.n	80070de <xTaskCheckForTimeOut+0x82>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d302      	bcc.n	80070de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	61fb      	str	r3, [r7, #28]
 80070dc:	e015      	b.n	800710a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d20b      	bcs.n	8007100 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff9b 	bl	8007030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	e004      	b.n	800710a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007106:	2301      	movs	r3, #1
 8007108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800710a:	f000 fe7b 	bl	8007e04 <vPortExitCritical>

	return xReturn;
 800710e:	69fb      	ldr	r3, [r7, #28]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	24000ce8 	.word	0x24000ce8
 800711c:	24000cfc 	.word	0x24000cfc

08007120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007124:	4b03      	ldr	r3, [pc, #12]	; (8007134 <vTaskMissedYield+0x14>)
 8007126:	2201      	movs	r2, #1
 8007128:	601a      	str	r2, [r3, #0]
}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	24000cf8 	.word	0x24000cf8

08007138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007140:	f000 f852 	bl	80071e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007144:	4b06      	ldr	r3, [pc, #24]	; (8007160 <prvIdleTask+0x28>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d9f9      	bls.n	8007140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <prvIdleTask+0x2c>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800715c:	e7f0      	b.n	8007140 <prvIdleTask+0x8>
 800715e:	bf00      	nop
 8007160:	24000814 	.word	0x24000814
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800716e:	2300      	movs	r3, #0
 8007170:	607b      	str	r3, [r7, #4]
 8007172:	e00c      	b.n	800718e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <prvInitialiseTaskLists+0x60>)
 8007180:	4413      	add	r3, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fc90 	bl	8005aa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3301      	adds	r3, #1
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b37      	cmp	r3, #55	; 0x37
 8007192:	d9ef      	bls.n	8007174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007194:	480d      	ldr	r0, [pc, #52]	; (80071cc <prvInitialiseTaskLists+0x64>)
 8007196:	f7fe fc87 	bl	8005aa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800719a:	480d      	ldr	r0, [pc, #52]	; (80071d0 <prvInitialiseTaskLists+0x68>)
 800719c:	f7fe fc84 	bl	8005aa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071a0:	480c      	ldr	r0, [pc, #48]	; (80071d4 <prvInitialiseTaskLists+0x6c>)
 80071a2:	f7fe fc81 	bl	8005aa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071a6:	480c      	ldr	r0, [pc, #48]	; (80071d8 <prvInitialiseTaskLists+0x70>)
 80071a8:	f7fe fc7e 	bl	8005aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071ac:	480b      	ldr	r0, [pc, #44]	; (80071dc <prvInitialiseTaskLists+0x74>)
 80071ae:	f7fe fc7b 	bl	8005aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <prvInitialiseTaskLists+0x78>)
 80071b4:	4a05      	ldr	r2, [pc, #20]	; (80071cc <prvInitialiseTaskLists+0x64>)
 80071b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <prvInitialiseTaskLists+0x7c>)
 80071ba:	4a05      	ldr	r2, [pc, #20]	; (80071d0 <prvInitialiseTaskLists+0x68>)
 80071bc:	601a      	str	r2, [r3, #0]
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	24000814 	.word	0x24000814
 80071cc:	24000c74 	.word	0x24000c74
 80071d0:	24000c88 	.word	0x24000c88
 80071d4:	24000ca4 	.word	0x24000ca4
 80071d8:	24000cb8 	.word	0x24000cb8
 80071dc:	24000cd0 	.word	0x24000cd0
 80071e0:	24000c9c 	.word	0x24000c9c
 80071e4:	24000ca0 	.word	0x24000ca0

080071e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071ee:	e019      	b.n	8007224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071f0:	f000 fdd8 	bl	8007da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f4:	4b10      	ldr	r3, [pc, #64]	; (8007238 <prvCheckTasksWaitingTermination+0x50>)
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3304      	adds	r3, #4
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe fcdb 	bl	8005bbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <prvCheckTasksWaitingTermination+0x54>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3b01      	subs	r3, #1
 800720c:	4a0b      	ldr	r2, [pc, #44]	; (800723c <prvCheckTasksWaitingTermination+0x54>)
 800720e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <prvCheckTasksWaitingTermination+0x58>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3b01      	subs	r3, #1
 8007216:	4a0a      	ldr	r2, [pc, #40]	; (8007240 <prvCheckTasksWaitingTermination+0x58>)
 8007218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800721a:	f000 fdf3 	bl	8007e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f810 	bl	8007244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <prvCheckTasksWaitingTermination+0x58>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e1      	bne.n	80071f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	24000cb8 	.word	0x24000cb8
 800723c:	24000ce4 	.word	0x24000ce4
 8007240:	24000ccc 	.word	0x24000ccc

08007244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3354      	adds	r3, #84	; 0x54
 8007250:	4618      	mov	r0, r3
 8007252:	f001 f907 	bl	8008464 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800725c:	2b00      	cmp	r3, #0
 800725e:	d108      	bne.n	8007272 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	4618      	mov	r0, r3
 8007266:	f000 ff8b 	bl	8008180 <vPortFree>
				vPortFree( pxTCB );
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 ff88 	bl	8008180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007270:	e018      	b.n	80072a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007278:	2b01      	cmp	r3, #1
 800727a:	d103      	bne.n	8007284 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 ff7f 	bl	8008180 <vPortFree>
	}
 8007282:	e00f      	b.n	80072a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800728a:	2b02      	cmp	r3, #2
 800728c:	d00a      	beq.n	80072a4 <prvDeleteTCB+0x60>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	60fb      	str	r3, [r7, #12]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <prvDeleteTCB+0x5e>
	}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072b2:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <prvResetNextTaskUnblockTime+0x38>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <prvResetNextTaskUnblockTime+0x3c>)
 80072be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072c4:	e008      	b.n	80072d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <prvResetNextTaskUnblockTime+0x38>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <prvResetNextTaskUnblockTime+0x3c>)
 80072d6:	6013      	str	r3, [r2, #0]
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	24000c9c 	.word	0x24000c9c
 80072e8:	24000d04 	.word	0x24000d04

080072ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072f2:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <xTaskGetSchedulerState+0x34>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072fa:	2301      	movs	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	e008      	b.n	8007312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007300:	4b08      	ldr	r3, [pc, #32]	; (8007324 <xTaskGetSchedulerState+0x38>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007308:	2302      	movs	r3, #2
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e001      	b.n	8007312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007312:	687b      	ldr	r3, [r7, #4]
	}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	24000cf0 	.word	0x24000cf0
 8007324:	24000d0c 	.word	0x24000d0c

08007328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d056      	beq.n	80073ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800733e:	4b2e      	ldr	r3, [pc, #184]	; (80073f8 <xTaskPriorityDisinherit+0xd0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	429a      	cmp	r2, r3
 8007346:	d00a      	beq.n	800735e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
 800737a:	e7fe      	b.n	800737a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	1e5a      	subs	r2, r3, #1
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738e:	429a      	cmp	r2, r3
 8007390:	d02c      	beq.n	80073ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007396:	2b00      	cmp	r3, #0
 8007398:	d128      	bne.n	80073ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3304      	adds	r3, #4
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fc0c 	bl	8005bbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <xTaskPriorityDisinherit+0xd4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d903      	bls.n	80073cc <xTaskPriorityDisinherit+0xa4>
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <xTaskPriorityDisinherit+0xd4>)
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <xTaskPriorityDisinherit+0xd8>)
 80073da:	441a      	add	r2, r3
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f7fe fb8d 	bl	8005b02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ec:	697b      	ldr	r3, [r7, #20]
	}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	24000810 	.word	0x24000810
 80073fc:	24000cec 	.word	0x24000cec
 8007400:	24000814 	.word	0x24000814

08007404 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800740e:	4b21      	ldr	r3, [pc, #132]	; (8007494 <prvAddCurrentTaskToDelayedList+0x90>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <prvAddCurrentTaskToDelayedList+0x94>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3304      	adds	r3, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fbce 	bl	8005bbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007426:	d10a      	bne.n	800743e <prvAddCurrentTaskToDelayedList+0x3a>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742e:	4b1a      	ldr	r3, [pc, #104]	; (8007498 <prvAddCurrentTaskToDelayedList+0x94>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3304      	adds	r3, #4
 8007434:	4619      	mov	r1, r3
 8007436:	4819      	ldr	r0, [pc, #100]	; (800749c <prvAddCurrentTaskToDelayedList+0x98>)
 8007438:	f7fe fb63 	bl	8005b02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800743c:	e026      	b.n	800748c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007446:	4b14      	ldr	r3, [pc, #80]	; (8007498 <prvAddCurrentTaskToDelayedList+0x94>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	429a      	cmp	r2, r3
 8007454:	d209      	bcs.n	800746a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007456:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <prvAddCurrentTaskToDelayedList+0x94>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3304      	adds	r3, #4
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f7fe fb71 	bl	8005b4a <vListInsert>
}
 8007468:	e010      	b.n	800748c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <prvAddCurrentTaskToDelayedList+0x94>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3304      	adds	r3, #4
 8007474:	4619      	mov	r1, r3
 8007476:	4610      	mov	r0, r2
 8007478:	f7fe fb67 	bl	8005b4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	429a      	cmp	r2, r3
 8007484:	d202      	bcs.n	800748c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007486:	4a08      	ldr	r2, [pc, #32]	; (80074a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6013      	str	r3, [r2, #0]
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	24000ce8 	.word	0x24000ce8
 8007498:	24000810 	.word	0x24000810
 800749c:	24000cd0 	.word	0x24000cd0
 80074a0:	24000ca0 	.word	0x24000ca0
 80074a4:	24000c9c 	.word	0x24000c9c
 80074a8:	24000d04 	.word	0x24000d04

080074ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08a      	sub	sp, #40	; 0x28
 80074b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074b6:	f000 fb07 	bl	8007ac8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074ba:	4b1c      	ldr	r3, [pc, #112]	; (800752c <xTimerCreateTimerTask+0x80>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d021      	beq.n	8007506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074ca:	1d3a      	adds	r2, r7, #4
 80074cc:	f107 0108 	add.w	r1, r7, #8
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe facd 	bl	8005a74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	9202      	str	r2, [sp, #8]
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	2302      	movs	r3, #2
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	460a      	mov	r2, r1
 80074ec:	4910      	ldr	r1, [pc, #64]	; (8007530 <xTimerCreateTimerTask+0x84>)
 80074ee:	4811      	ldr	r0, [pc, #68]	; (8007534 <xTimerCreateTimerTask+0x88>)
 80074f0:	f7ff f8b4 	bl	800665c <xTaskCreateStatic>
 80074f4:	4603      	mov	r3, r0
 80074f6:	4a10      	ldr	r2, [pc, #64]	; (8007538 <xTimerCreateTimerTask+0x8c>)
 80074f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074fa:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <xTimerCreateTimerTask+0x8c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007502:	2301      	movs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	613b      	str	r3, [r7, #16]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007522:	697b      	ldr	r3, [r7, #20]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	24000d40 	.word	0x24000d40
 8007530:	08008798 	.word	0x08008798
 8007534:	08007671 	.word	0x08007671
 8007538:	24000d44 	.word	0x24000d44

0800753c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800754a:	2300      	movs	r3, #0
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	623b      	str	r3, [r7, #32]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800756a:	4b1a      	ldr	r3, [pc, #104]	; (80075d4 <xTimerGenericCommand+0x98>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02a      	beq.n	80075c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b05      	cmp	r3, #5
 8007582:	dc18      	bgt.n	80075b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007584:	f7ff feb2 	bl	80072ec <xTaskGetSchedulerState>
 8007588:	4603      	mov	r3, r0
 800758a:	2b02      	cmp	r3, #2
 800758c:	d109      	bne.n	80075a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800758e:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <xTimerGenericCommand+0x98>)
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f107 0110 	add.w	r1, r7, #16
 8007596:	2300      	movs	r3, #0
 8007598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759a:	f7fe fc77 	bl	8005e8c <xQueueGenericSend>
 800759e:	6278      	str	r0, [r7, #36]	; 0x24
 80075a0:	e012      	b.n	80075c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075a2:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <xTimerGenericCommand+0x98>)
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	f107 0110 	add.w	r1, r7, #16
 80075aa:	2300      	movs	r3, #0
 80075ac:	2200      	movs	r2, #0
 80075ae:	f7fe fc6d 	bl	8005e8c <xQueueGenericSend>
 80075b2:	6278      	str	r0, [r7, #36]	; 0x24
 80075b4:	e008      	b.n	80075c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075b6:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <xTimerGenericCommand+0x98>)
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	f107 0110 	add.w	r1, r7, #16
 80075be:	2300      	movs	r3, #0
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	f7fe fd61 	bl	8006088 <xQueueGenericSendFromISR>
 80075c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3728      	adds	r7, #40	; 0x28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	24000d40 	.word	0x24000d40

080075d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af02      	add	r7, sp, #8
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e2:	4b22      	ldr	r3, [pc, #136]	; (800766c <prvProcessExpiredTimer+0x94>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fae3 	bl	8005bbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d022      	beq.n	800764a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	18d1      	adds	r1, r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	6978      	ldr	r0, [r7, #20]
 8007612:	f000 f8d1 	bl	80077b8 <prvInsertTimerInActiveList>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01f      	beq.n	800765c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	2300      	movs	r3, #0
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	2100      	movs	r1, #0
 8007626:	6978      	ldr	r0, [r7, #20]
 8007628:	f7ff ff88 	bl	800753c <xTimerGenericCommand>
 800762c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d113      	bne.n	800765c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	60fb      	str	r3, [r7, #12]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	b2da      	uxtb	r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	6978      	ldr	r0, [r7, #20]
 8007662:	4798      	blx	r3
}
 8007664:	bf00      	nop
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	24000d38 	.word	0x24000d38

08007670 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007678:	f107 0308 	add.w	r3, r7, #8
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f857 	bl	8007730 <prvGetNextExpireTime>
 8007682:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4619      	mov	r1, r3
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f803 	bl	8007694 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800768e:	f000 f8d5 	bl	800783c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007692:	e7f1      	b.n	8007678 <prvTimerTask+0x8>

08007694 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800769e:	f7ff fa39 	bl	8006b14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076a2:	f107 0308 	add.w	r3, r7, #8
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 f866 	bl	8007778 <prvSampleTimeNow>
 80076ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d130      	bne.n	8007716 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <prvProcessTimerOrBlockTask+0x3c>
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d806      	bhi.n	80076d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076c2:	f7ff fa35 	bl	8006b30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff ff85 	bl	80075d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076ce:	e024      	b.n	800771a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076d6:	4b13      	ldr	r3, [pc, #76]	; (8007724 <prvProcessTimerOrBlockTask+0x90>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <prvProcessTimerOrBlockTask+0x50>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <prvProcessTimerOrBlockTask+0x52>
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076e8:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <prvProcessTimerOrBlockTask+0x94>)
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4619      	mov	r1, r3
 80076f6:	f7fe ff7d 	bl	80065f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076fa:	f7ff fa19 	bl	8006b30 <xTaskResumeAll>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007704:	4b09      	ldr	r3, [pc, #36]	; (800772c <prvProcessTimerOrBlockTask+0x98>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
}
 8007714:	e001      	b.n	800771a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007716:	f7ff fa0b 	bl	8006b30 <xTaskResumeAll>
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	24000d3c 	.word	0x24000d3c
 8007728:	24000d40 	.word	0x24000d40
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007738:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <prvGetNextExpireTime+0x44>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <prvGetNextExpireTime+0x16>
 8007742:	2201      	movs	r2, #1
 8007744:	e000      	b.n	8007748 <prvGetNextExpireTime+0x18>
 8007746:	2200      	movs	r2, #0
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d105      	bne.n	8007760 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007754:	4b07      	ldr	r3, [pc, #28]	; (8007774 <prvGetNextExpireTime+0x44>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e001      	b.n	8007764 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007764:	68fb      	ldr	r3, [r7, #12]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	24000d38 	.word	0x24000d38

08007778 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007780:	f7ff fa74 	bl	8006c6c <xTaskGetTickCount>
 8007784:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <prvSampleTimeNow+0x3c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	429a      	cmp	r2, r3
 800778e:	d205      	bcs.n	800779c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007790:	f000 f936 	bl	8007a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e002      	b.n	80077a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077a2:	4a04      	ldr	r2, [pc, #16]	; (80077b4 <prvSampleTimeNow+0x3c>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077a8:	68fb      	ldr	r3, [r7, #12]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	24000d48 	.word	0x24000d48

080077b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d812      	bhi.n	8007804 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	1ad2      	subs	r2, r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d302      	bcc.n	80077f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	e01b      	b.n	800782a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077f2:	4b10      	ldr	r3, [pc, #64]	; (8007834 <prvInsertTimerInActiveList+0x7c>)
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f7fe f9a4 	bl	8005b4a <vListInsert>
 8007802:	e012      	b.n	800782a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d206      	bcs.n	800781a <prvInsertTimerInActiveList+0x62>
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d302      	bcc.n	800781a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	e007      	b.n	800782a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800781a:	4b07      	ldr	r3, [pc, #28]	; (8007838 <prvInsertTimerInActiveList+0x80>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7fe f990 	bl	8005b4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800782a:	697b      	ldr	r3, [r7, #20]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	24000d3c 	.word	0x24000d3c
 8007838:	24000d38 	.word	0x24000d38

0800783c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08e      	sub	sp, #56	; 0x38
 8007840:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007842:	e0ca      	b.n	80079da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	da18      	bge.n	800787c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800784a:	1d3b      	adds	r3, r7, #4
 800784c:	3304      	adds	r3, #4
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	61fb      	str	r3, [r7, #28]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007872:	6850      	ldr	r0, [r2, #4]
 8007874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007876:	6892      	ldr	r2, [r2, #8]
 8007878:	4611      	mov	r1, r2
 800787a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f2c0 80aa 	blt.w	80079d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe f991 	bl	8005bbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800789a:	463b      	mov	r3, r7
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff ff6b 	bl	8007778 <prvSampleTimeNow>
 80078a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	f200 8097 	bhi.w	80079da <prvProcessReceivedCommands+0x19e>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <prvProcessReceivedCommands+0x78>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078dd 	.word	0x080078dd
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	08007951 	.word	0x08007951
 80078c4:	08007965 	.word	0x08007965
 80078c8:	080079af 	.word	0x080079af
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	080078dd 	.word	0x080078dd
 80078d4:	08007951 	.word	0x08007951
 80078d8:	08007965 	.word	0x08007965
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	18d1      	adds	r1, r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078fc:	f7ff ff5c 	bl	80077b8 <prvInsertTimerInActiveList>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d069      	beq.n	80079da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d05e      	beq.n	80079da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	441a      	add	r2, r3
 8007924:	2300      	movs	r3, #0
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	2300      	movs	r3, #0
 800792a:	2100      	movs	r1, #0
 800792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792e:	f7ff fe05 	bl	800753c <xTimerGenericCommand>
 8007932:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d14f      	bne.n	80079da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	61bb      	str	r3, [r7, #24]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007956:	f023 0301 	bic.w	r3, r3, #1
 800795a:	b2da      	uxtb	r2, r3
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007962:	e03a      	b.n	80079da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	b2da      	uxtb	r2, r3
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	617b      	str	r3, [r7, #20]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	18d1      	adds	r1, r2, r3
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a8:	f7ff ff06 	bl	80077b8 <prvInsertTimerInActiveList>
					break;
 80079ac:	e015      	b.n	80079da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80079bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079be:	f000 fbdf 	bl	8008180 <vPortFree>
 80079c2:	e00a      	b.n	80079da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ca:	f023 0301 	bic.w	r3, r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079d6:	e000      	b.n	80079da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079da:	4b08      	ldr	r3, [pc, #32]	; (80079fc <prvProcessReceivedCommands+0x1c0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	1d39      	adds	r1, r7, #4
 80079e0:	2200      	movs	r2, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fbec 	bl	80061c0 <xQueueReceive>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f47f af2a 	bne.w	8007844 <prvProcessReceivedCommands+0x8>
	}
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	3730      	adds	r7, #48	; 0x30
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	24000d40 	.word	0x24000d40

08007a00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a06:	e048      	b.n	8007a9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a08:	4b2d      	ldr	r3, [pc, #180]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a12:	4b2b      	ldr	r3, [pc, #172]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe f8cb 	bl	8005bbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d02e      	beq.n	8007a9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4413      	add	r3, r2
 8007a44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d90e      	bls.n	8007a6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a5a:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f7fe f870 	bl	8005b4a <vListInsert>
 8007a6a:	e016      	b.n	8007a9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	2300      	movs	r3, #0
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	2100      	movs	r1, #0
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7ff fd60 	bl	800753c <xTimerGenericCommand>
 8007a7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	603b      	str	r3, [r7, #0]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a9a:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1b1      	bne.n	8007a08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007aa4:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <prvSwitchTimerLists+0xc4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a04      	ldr	r2, [pc, #16]	; (8007ac0 <prvSwitchTimerLists+0xc0>)
 8007ab0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ab2:	4a04      	ldr	r2, [pc, #16]	; (8007ac4 <prvSwitchTimerLists+0xc4>)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6013      	str	r3, [r2, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	24000d38 	.word	0x24000d38
 8007ac4:	24000d3c 	.word	0x24000d3c

08007ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ace:	f000 f969 	bl	8007da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <prvCheckForValidListAndQueue+0x60>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d120      	bne.n	8007b1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ada:	4814      	ldr	r0, [pc, #80]	; (8007b2c <prvCheckForValidListAndQueue+0x64>)
 8007adc:	f7fd ffe4 	bl	8005aa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ae0:	4813      	ldr	r0, [pc, #76]	; (8007b30 <prvCheckForValidListAndQueue+0x68>)
 8007ae2:	f7fd ffe1 	bl	8005aa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ae6:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <prvCheckForValidListAndQueue+0x6c>)
 8007ae8:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <prvCheckForValidListAndQueue+0x64>)
 8007aea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007aec:	4b12      	ldr	r3, [pc, #72]	; (8007b38 <prvCheckForValidListAndQueue+0x70>)
 8007aee:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <prvCheckForValidListAndQueue+0x68>)
 8007af0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007af2:	2300      	movs	r3, #0
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <prvCheckForValidListAndQueue+0x74>)
 8007af8:	4a11      	ldr	r2, [pc, #68]	; (8007b40 <prvCheckForValidListAndQueue+0x78>)
 8007afa:	2110      	movs	r1, #16
 8007afc:	200a      	movs	r0, #10
 8007afe:	f7fe f8ef 	bl	8005ce0 <xQueueGenericCreateStatic>
 8007b02:	4603      	mov	r3, r0
 8007b04:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <prvCheckForValidListAndQueue+0x60>)
 8007b06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b08:	4b07      	ldr	r3, [pc, #28]	; (8007b28 <prvCheckForValidListAndQueue+0x60>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <prvCheckForValidListAndQueue+0x60>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	490b      	ldr	r1, [pc, #44]	; (8007b44 <prvCheckForValidListAndQueue+0x7c>)
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fd42 	bl	80065a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b1c:	f000 f972 	bl	8007e04 <vPortExitCritical>
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	24000d40 	.word	0x24000d40
 8007b2c:	24000d10 	.word	0x24000d10
 8007b30:	24000d24 	.word	0x24000d24
 8007b34:	24000d38 	.word	0x24000d38
 8007b38:	24000d3c 	.word	0x24000d3c
 8007b3c:	24000dec 	.word	0x24000dec
 8007b40:	24000d4c 	.word	0x24000d4c
 8007b44:	080087a0 	.word	0x080087a0

08007b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3b04      	subs	r3, #4
 8007b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3b04      	subs	r3, #4
 8007b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f023 0201 	bic.w	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b04      	subs	r3, #4
 8007b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b78:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <pxPortInitialiseStack+0x64>)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b14      	subs	r3, #20
 8007b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3b04      	subs	r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f06f 0202 	mvn.w	r2, #2
 8007b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3b20      	subs	r3, #32
 8007b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	08007bb1 	.word	0x08007bb1

08007bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bba:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <prvTaskExitError+0x54>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc2:	d00a      	beq.n	8007bda <prvTaskExitError+0x2a>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	60fb      	str	r3, [r7, #12]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <prvTaskExitError+0x28>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	60bb      	str	r3, [r7, #8]
}
 8007bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bee:	bf00      	nop
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0fc      	beq.n	8007bf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bf6:	bf00      	nop
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	24000010 	.word	0x24000010
	...

08007c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <pxCurrentTCBConst2>)
 8007c12:	6819      	ldr	r1, [r3, #0]
 8007c14:	6808      	ldr	r0, [r1, #0]
 8007c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	f380 8809 	msr	PSP, r0
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8811 	msr	BASEPRI, r0
 8007c2a:	4770      	bx	lr
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst2>:
 8007c30:	24000810 	.word	0x24000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c38:	4808      	ldr	r0, [pc, #32]	; (8007c5c <prvPortStartFirstTask+0x24>)
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	6800      	ldr	r0, [r0, #0]
 8007c3e:	f380 8808 	msr	MSP, r0
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8814 	msr	CONTROL, r0
 8007c4a:	b662      	cpsie	i
 8007c4c:	b661      	cpsie	f
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	df00      	svc	0
 8007c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c5a:	bf00      	nop
 8007c5c:	e000ed08 	.word	0xe000ed08

08007c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c66:	4b46      	ldr	r3, [pc, #280]	; (8007d80 <xPortStartScheduler+0x120>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a46      	ldr	r2, [pc, #280]	; (8007d84 <xPortStartScheduler+0x124>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10a      	bne.n	8007c86 <xPortStartScheduler+0x26>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	613b      	str	r3, [r7, #16]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c86:	4b3e      	ldr	r3, [pc, #248]	; (8007d80 <xPortStartScheduler+0x120>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <xPortStartScheduler+0x128>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10a      	bne.n	8007ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60fb      	str	r3, [r7, #12]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ca6:	4b39      	ldr	r3, [pc, #228]	; (8007d8c <xPortStartScheduler+0x12c>)
 8007ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	22ff      	movs	r2, #255	; 0xff
 8007cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	4b31      	ldr	r3, [pc, #196]	; (8007d90 <xPortStartScheduler+0x130>)
 8007ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd4:	e009      	b.n	8007cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007cd6:	4b2f      	ldr	r3, [pc, #188]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d0ef      	beq.n	8007cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cf6:	4b27      	ldr	r3, [pc, #156]	; (8007d94 <xPortStartScheduler+0x134>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1c3 0307 	rsb	r3, r3, #7
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d00a      	beq.n	8007d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60bb      	str	r3, [r7, #8]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d18:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <xPortStartScheduler+0x134>)
 8007d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a14      	ldr	r2, [pc, #80]	; (8007d98 <xPortStartScheduler+0x138>)
 8007d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d4e:	f000 f8dd 	bl	8007f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d52:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <xPortStartScheduler+0x13c>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d58:	f000 f8fc 	bl	8007f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <xPortStartScheduler+0x140>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0f      	ldr	r2, [pc, #60]	; (8007da0 <xPortStartScheduler+0x140>)
 8007d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d68:	f7ff ff66 	bl	8007c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d6c:	f7ff f848 	bl	8006e00 <vTaskSwitchContext>
	prvTaskExitError();
 8007d70:	f7ff ff1e 	bl	8007bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	e000ed00 	.word	0xe000ed00
 8007d84:	410fc271 	.word	0x410fc271
 8007d88:	410fc270 	.word	0x410fc270
 8007d8c:	e000e400 	.word	0xe000e400
 8007d90:	24000e3c 	.word	0x24000e3c
 8007d94:	24000e40 	.word	0x24000e40
 8007d98:	e000ed20 	.word	0xe000ed20
 8007d9c:	24000010 	.word	0x24000010
 8007da0:	e000ef34 	.word	0xe000ef34

08007da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	607b      	str	r3, [r7, #4]
}
 8007dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	4a0d      	ldr	r2, [pc, #52]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dc8:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <vPortEnterCritical+0x58>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10f      	bne.n	8007df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <vPortEnterCritical+0x5c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	603b      	str	r3, [r7, #0]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <vPortEnterCritical+0x4a>
	}
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	24000010 	.word	0x24000010
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <vPortExitCritical+0x50>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <vPortExitCritical+0x24>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	607b      	str	r3, [r7, #4]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <vPortExitCritical+0x50>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <vPortExitCritical+0x50>)
 8007e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e32:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <vPortExitCritical+0x50>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <vPortExitCritical+0x42>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f383 8811 	msr	BASEPRI, r3
}
 8007e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	24000010 	.word	0x24000010
	...

08007e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e60:	f3ef 8009 	mrs	r0, PSP
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	4b15      	ldr	r3, [pc, #84]	; (8007ec0 <pxCurrentTCBConst>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	f01e 0f10 	tst.w	lr, #16
 8007e70:	bf08      	it	eq
 8007e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7a:	6010      	str	r0, [r2, #0]
 8007e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e84:	f380 8811 	msr	BASEPRI, r0
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f7fe ffb6 	bl	8006e00 <vTaskSwitchContext>
 8007e94:	f04f 0000 	mov.w	r0, #0
 8007e98:	f380 8811 	msr	BASEPRI, r0
 8007e9c:	bc09      	pop	{r0, r3}
 8007e9e:	6819      	ldr	r1, [r3, #0]
 8007ea0:	6808      	ldr	r0, [r1, #0]
 8007ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea6:	f01e 0f10 	tst.w	lr, #16
 8007eaa:	bf08      	it	eq
 8007eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007eb0:	f380 8809 	msr	PSP, r0
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst>:
 8007ec0:	24000810 	.word	0x24000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	607b      	str	r3, [r7, #4]
}
 8007ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ee2:	f7fe fed3 	bl	8006c8c <xTaskIncrementTick>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <xPortSysTickHandler+0x40>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f383 8811 	msr	BASEPRI, r3
}
 8007efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <vPortSetupTimerInterrupt+0x34>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <vPortSetupTimerInterrupt+0x38>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <vPortSetupTimerInterrupt+0x3c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <vPortSetupTimerInterrupt+0x40>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <vPortSetupTimerInterrupt+0x44>)
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f2e:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <vPortSetupTimerInterrupt+0x34>)
 8007f30:	2207      	movs	r2, #7
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	e000e010 	.word	0xe000e010
 8007f44:	e000e018 	.word	0xe000e018
 8007f48:	24000000 	.word	0x24000000
 8007f4c:	10624dd3 	.word	0x10624dd3
 8007f50:	e000e014 	.word	0xe000e014

08007f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f64 <vPortEnableVFP+0x10>
 8007f58:	6801      	ldr	r1, [r0, #0]
 8007f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f5e:	6001      	str	r1, [r0, #0]
 8007f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f62:	bf00      	nop
 8007f64:	e000ed88 	.word	0xe000ed88

08007f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f6e:	f3ef 8305 	mrs	r3, IPSR
 8007f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b0f      	cmp	r3, #15
 8007f78:	d914      	bls.n	8007fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <vPortValidateInterruptPriority+0x70>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f84:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <vPortValidateInterruptPriority+0x74>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	7afa      	ldrb	r2, [r7, #11]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d20a      	bcs.n	8007fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	607b      	str	r3, [r7, #4]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <vPortValidateInterruptPriority+0x78>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <vPortValidateInterruptPriority+0x7c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d90a      	bls.n	8007fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	603b      	str	r3, [r7, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <vPortValidateInterruptPriority+0x60>
	}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	e000e3f0 	.word	0xe000e3f0
 8007fdc:	24000e3c 	.word	0x24000e3c
 8007fe0:	e000ed0c 	.word	0xe000ed0c
 8007fe4:	24000e40 	.word	0x24000e40

08007fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ff4:	f7fe fd8e 	bl	8006b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ff8:	4b5b      	ldr	r3, [pc, #364]	; (8008168 <pvPortMalloc+0x180>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008000:	f000 f920 	bl	8008244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008004:	4b59      	ldr	r3, [pc, #356]	; (800816c <pvPortMalloc+0x184>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 8093 	bne.w	8008138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01d      	beq.n	8008054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008018:	2208      	movs	r2, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f023 0307 	bic.w	r3, r3, #7
 8008030:	3308      	adds	r3, #8
 8008032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <pvPortMalloc+0x6c>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	617b      	str	r3, [r7, #20]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d06e      	beq.n	8008138 <pvPortMalloc+0x150>
 800805a:	4b45      	ldr	r3, [pc, #276]	; (8008170 <pvPortMalloc+0x188>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d869      	bhi.n	8008138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <pvPortMalloc+0x18c>)
 8008066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008068:	4b42      	ldr	r3, [pc, #264]	; (8008174 <pvPortMalloc+0x18c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806e:	e004      	b.n	800807a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <pvPortMalloc+0xa4>
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f1      	bne.n	8008070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <pvPortMalloc+0x180>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	429a      	cmp	r2, r3
 8008094:	d050      	beq.n	8008138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2208      	movs	r2, #8
 800809c:	4413      	add	r3, r2
 800809e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	2308      	movs	r3, #8
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d91f      	bls.n	80080f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	613b      	str	r3, [r7, #16]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080f2:	69b8      	ldr	r0, [r7, #24]
 80080f4:	f000 f908 	bl	8008308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080f8:	4b1d      	ldr	r3, [pc, #116]	; (8008170 <pvPortMalloc+0x188>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <pvPortMalloc+0x188>)
 8008104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008106:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <pvPortMalloc+0x188>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <pvPortMalloc+0x190>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d203      	bcs.n	800811a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008112:	4b17      	ldr	r3, [pc, #92]	; (8008170 <pvPortMalloc+0x188>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	; (8008178 <pvPortMalloc+0x190>)
 8008118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4b13      	ldr	r3, [pc, #76]	; (800816c <pvPortMalloc+0x184>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	431a      	orrs	r2, r3
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800812e:	4b13      	ldr	r3, [pc, #76]	; (800817c <pvPortMalloc+0x194>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <pvPortMalloc+0x194>)
 8008136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008138:	f7fe fcfa 	bl	8006b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <pvPortMalloc+0x174>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60fb      	str	r3, [r7, #12]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <pvPortMalloc+0x172>
	return pvReturn;
 800815c:	69fb      	ldr	r3, [r7, #28]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	24004a4c 	.word	0x24004a4c
 800816c:	24004a60 	.word	0x24004a60
 8008170:	24004a50 	.word	0x24004a50
 8008174:	24004a44 	.word	0x24004a44
 8008178:	24004a54 	.word	0x24004a54
 800817c:	24004a58 	.word	0x24004a58

08008180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d04d      	beq.n	800822e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008192:	2308      	movs	r3, #8
 8008194:	425b      	negs	r3, r3
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4413      	add	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <vPortFree+0xb8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4013      	ands	r3, r2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <vPortFree+0x44>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	60fb      	str	r3, [r7, #12]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <vPortFree+0x62>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	60bb      	str	r3, [r7, #8]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <vPortFree+0xb8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01e      	beq.n	800822e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d11a      	bne.n	800822e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <vPortFree+0xb8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	43db      	mvns	r3, r3
 8008202:	401a      	ands	r2, r3
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008208:	f7fe fc84 	bl	8006b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <vPortFree+0xbc>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4413      	add	r3, r2
 8008216:	4a09      	ldr	r2, [pc, #36]	; (800823c <vPortFree+0xbc>)
 8008218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800821a:	6938      	ldr	r0, [r7, #16]
 800821c:	f000 f874 	bl	8008308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <vPortFree+0xc0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3301      	adds	r3, #1
 8008226:	4a06      	ldr	r2, [pc, #24]	; (8008240 <vPortFree+0xc0>)
 8008228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800822a:	f7fe fc81 	bl	8006b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800822e:	bf00      	nop
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	24004a60 	.word	0x24004a60
 800823c:	24004a50 	.word	0x24004a50
 8008240:	24004a5c 	.word	0x24004a5c

08008244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800824a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800824e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008250:	4b27      	ldr	r3, [pc, #156]	; (80082f0 <prvHeapInit+0xac>)
 8008252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00c      	beq.n	8008278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3307      	adds	r3, #7
 8008262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	4a1f      	ldr	r2, [pc, #124]	; (80082f0 <prvHeapInit+0xac>)
 8008274:	4413      	add	r3, r2
 8008276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <prvHeapInit+0xb0>)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <prvHeapInit+0xb0>)
 8008284:	2200      	movs	r2, #0
 8008286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008290:	2208      	movs	r2, #8
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <prvHeapInit+0xb4>)
 80082a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082a6:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <prvHeapInit+0xb4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <prvHeapInit+0xb4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvHeapInit+0xb4>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4a0a      	ldr	r2, [pc, #40]	; (80082fc <prvHeapInit+0xb8>)
 80082d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <prvHeapInit+0xbc>)
 80082da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <prvHeapInit+0xc0>)
 80082de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	24000e44 	.word	0x24000e44
 80082f4:	24004a44 	.word	0x24004a44
 80082f8:	24004a4c 	.word	0x24004a4c
 80082fc:	24004a54 	.word	0x24004a54
 8008300:	24004a50 	.word	0x24004a50
 8008304:	24004a60 	.word	0x24004a60

08008308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008310:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <prvInsertBlockIntoFreeList+0xac>)
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e002      	b.n	800831c <prvInsertBlockIntoFreeList+0x14>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d8f7      	bhi.n	8008316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4413      	add	r3, r2
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d108      	bne.n	800834a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	441a      	add	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d118      	bne.n	8008390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d00d      	beq.n	8008386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	441a      	add	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e008      	b.n	8008398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e003      	b.n	8008398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	429a      	cmp	r2, r3
 800839e:	d002      	beq.n	80083a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	24004a44 	.word	0x24004a44
 80083b8:	24004a4c 	.word	0x24004a4c

080083bc <atoi>:
 80083bc:	220a      	movs	r2, #10
 80083be:	2100      	movs	r1, #0
 80083c0:	f000 b948 	b.w	8008654 <strtol>

080083c4 <__errno>:
 80083c4:	4b01      	ldr	r3, [pc, #4]	; (80083cc <__errno+0x8>)
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	24000014 	.word	0x24000014

080083d0 <__libc_init_array>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	4d0d      	ldr	r5, [pc, #52]	; (8008408 <__libc_init_array+0x38>)
 80083d4:	4c0d      	ldr	r4, [pc, #52]	; (800840c <__libc_init_array+0x3c>)
 80083d6:	1b64      	subs	r4, r4, r5
 80083d8:	10a4      	asrs	r4, r4, #2
 80083da:	2600      	movs	r6, #0
 80083dc:	42a6      	cmp	r6, r4
 80083de:	d109      	bne.n	80083f4 <__libc_init_array+0x24>
 80083e0:	4d0b      	ldr	r5, [pc, #44]	; (8008410 <__libc_init_array+0x40>)
 80083e2:	4c0c      	ldr	r4, [pc, #48]	; (8008414 <__libc_init_array+0x44>)
 80083e4:	f000 f99c 	bl	8008720 <_init>
 80083e8:	1b64      	subs	r4, r4, r5
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	2600      	movs	r6, #0
 80083ee:	42a6      	cmp	r6, r4
 80083f0:	d105      	bne.n	80083fe <__libc_init_array+0x2e>
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f8:	4798      	blx	r3
 80083fa:	3601      	adds	r6, #1
 80083fc:	e7ee      	b.n	80083dc <__libc_init_array+0xc>
 80083fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008402:	4798      	blx	r3
 8008404:	3601      	adds	r6, #1
 8008406:	e7f2      	b.n	80083ee <__libc_init_array+0x1e>
 8008408:	08008a0c 	.word	0x08008a0c
 800840c:	08008a0c 	.word	0x08008a0c
 8008410:	08008a0c 	.word	0x08008a0c
 8008414:	08008a10 	.word	0x08008a10

08008418 <__retarget_lock_acquire_recursive>:
 8008418:	4770      	bx	lr

0800841a <__retarget_lock_release_recursive>:
 800841a:	4770      	bx	lr

0800841c <memcpy>:
 800841c:	440a      	add	r2, r1
 800841e:	4291      	cmp	r1, r2
 8008420:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008424:	d100      	bne.n	8008428 <memcpy+0xc>
 8008426:	4770      	bx	lr
 8008428:	b510      	push	{r4, lr}
 800842a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800842e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008432:	4291      	cmp	r1, r2
 8008434:	d1f9      	bne.n	800842a <memcpy+0xe>
 8008436:	bd10      	pop	{r4, pc}

08008438 <memset>:
 8008438:	4402      	add	r2, r0
 800843a:	4603      	mov	r3, r0
 800843c:	4293      	cmp	r3, r2
 800843e:	d100      	bne.n	8008442 <memset+0xa>
 8008440:	4770      	bx	lr
 8008442:	f803 1b01 	strb.w	r1, [r3], #1
 8008446:	e7f9      	b.n	800843c <memset+0x4>

08008448 <cleanup_glue>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	460c      	mov	r4, r1
 800844c:	6809      	ldr	r1, [r1, #0]
 800844e:	4605      	mov	r5, r0
 8008450:	b109      	cbz	r1, 8008456 <cleanup_glue+0xe>
 8008452:	f7ff fff9 	bl	8008448 <cleanup_glue>
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800845e:	f000 b90f 	b.w	8008680 <_free_r>
	...

08008464 <_reclaim_reent>:
 8008464:	4b2c      	ldr	r3, [pc, #176]	; (8008518 <_reclaim_reent+0xb4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4283      	cmp	r3, r0
 800846a:	b570      	push	{r4, r5, r6, lr}
 800846c:	4604      	mov	r4, r0
 800846e:	d051      	beq.n	8008514 <_reclaim_reent+0xb0>
 8008470:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008472:	b143      	cbz	r3, 8008486 <_reclaim_reent+0x22>
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d14a      	bne.n	8008510 <_reclaim_reent+0xac>
 800847a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	b111      	cbz	r1, 8008486 <_reclaim_reent+0x22>
 8008480:	4620      	mov	r0, r4
 8008482:	f000 f8fd 	bl	8008680 <_free_r>
 8008486:	6961      	ldr	r1, [r4, #20]
 8008488:	b111      	cbz	r1, 8008490 <_reclaim_reent+0x2c>
 800848a:	4620      	mov	r0, r4
 800848c:	f000 f8f8 	bl	8008680 <_free_r>
 8008490:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008492:	b111      	cbz	r1, 800849a <_reclaim_reent+0x36>
 8008494:	4620      	mov	r0, r4
 8008496:	f000 f8f3 	bl	8008680 <_free_r>
 800849a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800849c:	b111      	cbz	r1, 80084a4 <_reclaim_reent+0x40>
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 f8ee 	bl	8008680 <_free_r>
 80084a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80084a6:	b111      	cbz	r1, 80084ae <_reclaim_reent+0x4a>
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 f8e9 	bl	8008680 <_free_r>
 80084ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084b0:	b111      	cbz	r1, 80084b8 <_reclaim_reent+0x54>
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 f8e4 	bl	8008680 <_free_r>
 80084b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80084ba:	b111      	cbz	r1, 80084c2 <_reclaim_reent+0x5e>
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 f8df 	bl	8008680 <_free_r>
 80084c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80084c4:	b111      	cbz	r1, 80084cc <_reclaim_reent+0x68>
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f8da 	bl	8008680 <_free_r>
 80084cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ce:	b111      	cbz	r1, 80084d6 <_reclaim_reent+0x72>
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 f8d5 	bl	8008680 <_free_r>
 80084d6:	69a3      	ldr	r3, [r4, #24]
 80084d8:	b1e3      	cbz	r3, 8008514 <_reclaim_reent+0xb0>
 80084da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084dc:	4620      	mov	r0, r4
 80084de:	4798      	blx	r3
 80084e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084e2:	b1b9      	cbz	r1, 8008514 <_reclaim_reent+0xb0>
 80084e4:	4620      	mov	r0, r4
 80084e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084ea:	f7ff bfad 	b.w	8008448 <cleanup_glue>
 80084ee:	5949      	ldr	r1, [r1, r5]
 80084f0:	b941      	cbnz	r1, 8008504 <_reclaim_reent+0xa0>
 80084f2:	3504      	adds	r5, #4
 80084f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f6:	2d80      	cmp	r5, #128	; 0x80
 80084f8:	68d9      	ldr	r1, [r3, #12]
 80084fa:	d1f8      	bne.n	80084ee <_reclaim_reent+0x8a>
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 f8bf 	bl	8008680 <_free_r>
 8008502:	e7ba      	b.n	800847a <_reclaim_reent+0x16>
 8008504:	680e      	ldr	r6, [r1, #0]
 8008506:	4620      	mov	r0, r4
 8008508:	f000 f8ba 	bl	8008680 <_free_r>
 800850c:	4631      	mov	r1, r6
 800850e:	e7ef      	b.n	80084f0 <_reclaim_reent+0x8c>
 8008510:	2500      	movs	r5, #0
 8008512:	e7ef      	b.n	80084f4 <_reclaim_reent+0x90>
 8008514:	bd70      	pop	{r4, r5, r6, pc}
 8008516:	bf00      	nop
 8008518:	24000014 	.word	0x24000014

0800851c <strstr>:
 800851c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800851e:	780c      	ldrb	r4, [r1, #0]
 8008520:	b164      	cbz	r4, 800853c <strstr+0x20>
 8008522:	4603      	mov	r3, r0
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	1c5e      	adds	r6, r3, #1
 800852a:	b90a      	cbnz	r2, 8008530 <strstr+0x14>
 800852c:	4610      	mov	r0, r2
 800852e:	e005      	b.n	800853c <strstr+0x20>
 8008530:	4294      	cmp	r4, r2
 8008532:	d108      	bne.n	8008546 <strstr+0x2a>
 8008534:	460d      	mov	r5, r1
 8008536:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800853a:	b902      	cbnz	r2, 800853e <strstr+0x22>
 800853c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800853e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008542:	4297      	cmp	r7, r2
 8008544:	d0f7      	beq.n	8008536 <strstr+0x1a>
 8008546:	4633      	mov	r3, r6
 8008548:	e7ec      	b.n	8008524 <strstr+0x8>
	...

0800854c <_strtol_l.isra.0>:
 800854c:	2b01      	cmp	r3, #1
 800854e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008552:	d001      	beq.n	8008558 <_strtol_l.isra.0+0xc>
 8008554:	2b24      	cmp	r3, #36	; 0x24
 8008556:	d906      	bls.n	8008566 <_strtol_l.isra.0+0x1a>
 8008558:	f7ff ff34 	bl	80083c4 <__errno>
 800855c:	2316      	movs	r3, #22
 800855e:	6003      	str	r3, [r0, #0]
 8008560:	2000      	movs	r0, #0
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	4f3a      	ldr	r7, [pc, #232]	; (8008650 <_strtol_l.isra.0+0x104>)
 8008568:	468e      	mov	lr, r1
 800856a:	4676      	mov	r6, lr
 800856c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008570:	5de5      	ldrb	r5, [r4, r7]
 8008572:	f015 0508 	ands.w	r5, r5, #8
 8008576:	d1f8      	bne.n	800856a <_strtol_l.isra.0+0x1e>
 8008578:	2c2d      	cmp	r4, #45	; 0x2d
 800857a:	d134      	bne.n	80085e6 <_strtol_l.isra.0+0x9a>
 800857c:	f89e 4000 	ldrb.w	r4, [lr]
 8008580:	f04f 0801 	mov.w	r8, #1
 8008584:	f106 0e02 	add.w	lr, r6, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d05c      	beq.n	8008646 <_strtol_l.isra.0+0xfa>
 800858c:	2b10      	cmp	r3, #16
 800858e:	d10c      	bne.n	80085aa <_strtol_l.isra.0+0x5e>
 8008590:	2c30      	cmp	r4, #48	; 0x30
 8008592:	d10a      	bne.n	80085aa <_strtol_l.isra.0+0x5e>
 8008594:	f89e 4000 	ldrb.w	r4, [lr]
 8008598:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800859c:	2c58      	cmp	r4, #88	; 0x58
 800859e:	d14d      	bne.n	800863c <_strtol_l.isra.0+0xf0>
 80085a0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80085a4:	2310      	movs	r3, #16
 80085a6:	f10e 0e02 	add.w	lr, lr, #2
 80085aa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80085ae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80085b2:	2600      	movs	r6, #0
 80085b4:	fbbc f9f3 	udiv	r9, ip, r3
 80085b8:	4635      	mov	r5, r6
 80085ba:	fb03 ca19 	mls	sl, r3, r9, ip
 80085be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80085c2:	2f09      	cmp	r7, #9
 80085c4:	d818      	bhi.n	80085f8 <_strtol_l.isra.0+0xac>
 80085c6:	463c      	mov	r4, r7
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	dd24      	ble.n	8008616 <_strtol_l.isra.0+0xca>
 80085cc:	2e00      	cmp	r6, #0
 80085ce:	db1f      	blt.n	8008610 <_strtol_l.isra.0+0xc4>
 80085d0:	45a9      	cmp	r9, r5
 80085d2:	d31d      	bcc.n	8008610 <_strtol_l.isra.0+0xc4>
 80085d4:	d101      	bne.n	80085da <_strtol_l.isra.0+0x8e>
 80085d6:	45a2      	cmp	sl, r4
 80085d8:	db1a      	blt.n	8008610 <_strtol_l.isra.0+0xc4>
 80085da:	fb05 4503 	mla	r5, r5, r3, r4
 80085de:	2601      	movs	r6, #1
 80085e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80085e4:	e7eb      	b.n	80085be <_strtol_l.isra.0+0x72>
 80085e6:	2c2b      	cmp	r4, #43	; 0x2b
 80085e8:	bf08      	it	eq
 80085ea:	f89e 4000 	ldrbeq.w	r4, [lr]
 80085ee:	46a8      	mov	r8, r5
 80085f0:	bf08      	it	eq
 80085f2:	f106 0e02 	addeq.w	lr, r6, #2
 80085f6:	e7c7      	b.n	8008588 <_strtol_l.isra.0+0x3c>
 80085f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80085fc:	2f19      	cmp	r7, #25
 80085fe:	d801      	bhi.n	8008604 <_strtol_l.isra.0+0xb8>
 8008600:	3c37      	subs	r4, #55	; 0x37
 8008602:	e7e1      	b.n	80085c8 <_strtol_l.isra.0+0x7c>
 8008604:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008608:	2f19      	cmp	r7, #25
 800860a:	d804      	bhi.n	8008616 <_strtol_l.isra.0+0xca>
 800860c:	3c57      	subs	r4, #87	; 0x57
 800860e:	e7db      	b.n	80085c8 <_strtol_l.isra.0+0x7c>
 8008610:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008614:	e7e4      	b.n	80085e0 <_strtol_l.isra.0+0x94>
 8008616:	2e00      	cmp	r6, #0
 8008618:	da05      	bge.n	8008626 <_strtol_l.isra.0+0xda>
 800861a:	2322      	movs	r3, #34	; 0x22
 800861c:	6003      	str	r3, [r0, #0]
 800861e:	4665      	mov	r5, ip
 8008620:	b942      	cbnz	r2, 8008634 <_strtol_l.isra.0+0xe8>
 8008622:	4628      	mov	r0, r5
 8008624:	e79d      	b.n	8008562 <_strtol_l.isra.0+0x16>
 8008626:	f1b8 0f00 	cmp.w	r8, #0
 800862a:	d000      	beq.n	800862e <_strtol_l.isra.0+0xe2>
 800862c:	426d      	negs	r5, r5
 800862e:	2a00      	cmp	r2, #0
 8008630:	d0f7      	beq.n	8008622 <_strtol_l.isra.0+0xd6>
 8008632:	b10e      	cbz	r6, 8008638 <_strtol_l.isra.0+0xec>
 8008634:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008638:	6011      	str	r1, [r2, #0]
 800863a:	e7f2      	b.n	8008622 <_strtol_l.isra.0+0xd6>
 800863c:	2430      	movs	r4, #48	; 0x30
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1b3      	bne.n	80085aa <_strtol_l.isra.0+0x5e>
 8008642:	2308      	movs	r3, #8
 8008644:	e7b1      	b.n	80085aa <_strtol_l.isra.0+0x5e>
 8008646:	2c30      	cmp	r4, #48	; 0x30
 8008648:	d0a4      	beq.n	8008594 <_strtol_l.isra.0+0x48>
 800864a:	230a      	movs	r3, #10
 800864c:	e7ad      	b.n	80085aa <_strtol_l.isra.0+0x5e>
 800864e:	bf00      	nop
 8008650:	08008901 	.word	0x08008901

08008654 <strtol>:
 8008654:	4613      	mov	r3, r2
 8008656:	460a      	mov	r2, r1
 8008658:	4601      	mov	r1, r0
 800865a:	4802      	ldr	r0, [pc, #8]	; (8008664 <strtol+0x10>)
 800865c:	6800      	ldr	r0, [r0, #0]
 800865e:	f7ff bf75 	b.w	800854c <_strtol_l.isra.0>
 8008662:	bf00      	nop
 8008664:	24000014 	.word	0x24000014

08008668 <__malloc_lock>:
 8008668:	4801      	ldr	r0, [pc, #4]	; (8008670 <__malloc_lock+0x8>)
 800866a:	f7ff bed5 	b.w	8008418 <__retarget_lock_acquire_recursive>
 800866e:	bf00      	nop
 8008670:	24004c18 	.word	0x24004c18

08008674 <__malloc_unlock>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__malloc_unlock+0x8>)
 8008676:	f7ff bed0 	b.w	800841a <__retarget_lock_release_recursive>
 800867a:	bf00      	nop
 800867c:	24004c18 	.word	0x24004c18

08008680 <_free_r>:
 8008680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008682:	2900      	cmp	r1, #0
 8008684:	d048      	beq.n	8008718 <_free_r+0x98>
 8008686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800868a:	9001      	str	r0, [sp, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f1a1 0404 	sub.w	r4, r1, #4
 8008692:	bfb8      	it	lt
 8008694:	18e4      	addlt	r4, r4, r3
 8008696:	f7ff ffe7 	bl	8008668 <__malloc_lock>
 800869a:	4a20      	ldr	r2, [pc, #128]	; (800871c <_free_r+0x9c>)
 800869c:	9801      	ldr	r0, [sp, #4]
 800869e:	6813      	ldr	r3, [r2, #0]
 80086a0:	4615      	mov	r5, r2
 80086a2:	b933      	cbnz	r3, 80086b2 <_free_r+0x32>
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	6014      	str	r4, [r2, #0]
 80086a8:	b003      	add	sp, #12
 80086aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ae:	f7ff bfe1 	b.w	8008674 <__malloc_unlock>
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	d90b      	bls.n	80086ce <_free_r+0x4e>
 80086b6:	6821      	ldr	r1, [r4, #0]
 80086b8:	1862      	adds	r2, r4, r1
 80086ba:	4293      	cmp	r3, r2
 80086bc:	bf04      	itt	eq
 80086be:	681a      	ldreq	r2, [r3, #0]
 80086c0:	685b      	ldreq	r3, [r3, #4]
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	bf04      	itt	eq
 80086c6:	1852      	addeq	r2, r2, r1
 80086c8:	6022      	streq	r2, [r4, #0]
 80086ca:	602c      	str	r4, [r5, #0]
 80086cc:	e7ec      	b.n	80086a8 <_free_r+0x28>
 80086ce:	461a      	mov	r2, r3
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	b10b      	cbz	r3, 80086d8 <_free_r+0x58>
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	d9fa      	bls.n	80086ce <_free_r+0x4e>
 80086d8:	6811      	ldr	r1, [r2, #0]
 80086da:	1855      	adds	r5, r2, r1
 80086dc:	42a5      	cmp	r5, r4
 80086de:	d10b      	bne.n	80086f8 <_free_r+0x78>
 80086e0:	6824      	ldr	r4, [r4, #0]
 80086e2:	4421      	add	r1, r4
 80086e4:	1854      	adds	r4, r2, r1
 80086e6:	42a3      	cmp	r3, r4
 80086e8:	6011      	str	r1, [r2, #0]
 80086ea:	d1dd      	bne.n	80086a8 <_free_r+0x28>
 80086ec:	681c      	ldr	r4, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	6053      	str	r3, [r2, #4]
 80086f2:	4421      	add	r1, r4
 80086f4:	6011      	str	r1, [r2, #0]
 80086f6:	e7d7      	b.n	80086a8 <_free_r+0x28>
 80086f8:	d902      	bls.n	8008700 <_free_r+0x80>
 80086fa:	230c      	movs	r3, #12
 80086fc:	6003      	str	r3, [r0, #0]
 80086fe:	e7d3      	b.n	80086a8 <_free_r+0x28>
 8008700:	6825      	ldr	r5, [r4, #0]
 8008702:	1961      	adds	r1, r4, r5
 8008704:	428b      	cmp	r3, r1
 8008706:	bf04      	itt	eq
 8008708:	6819      	ldreq	r1, [r3, #0]
 800870a:	685b      	ldreq	r3, [r3, #4]
 800870c:	6063      	str	r3, [r4, #4]
 800870e:	bf04      	itt	eq
 8008710:	1949      	addeq	r1, r1, r5
 8008712:	6021      	streq	r1, [r4, #0]
 8008714:	6054      	str	r4, [r2, #4]
 8008716:	e7c7      	b.n	80086a8 <_free_r+0x28>
 8008718:	b003      	add	sp, #12
 800871a:	bd30      	pop	{r4, r5, pc}
 800871c:	24004a64 	.word	0x24004a64

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
